///<reference path='../../../typings/tsd.d.ts' />
'use strict';
var mysql = require("mysql");
var q = require("q");
var request = require("request");
var ConnectionService = (function () {
    function ConnectionService() {
        this.dbConfig = {
            host: 'gator2009.hostgator.com',
            user: 'tdnb1207_sof',
            password: 'pkc~^_9WZ(us',
            // database: 'tdnb1207_sof', // production
            database: 'tdnb1207_sof_develop',
            debug: false,
            insecureAuth: true
        };
    }
    ConnectionService.prototype.query = function (params) {
        var _queryPromise = q.defer();
        request('http://sof.tokyo/api/' + params, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                _queryPromise.resolve(JSON.parse(body)); // Show the HTML for the Google homepage.
            }
            else {
                console.error('connection.service > query error ', error);
                _queryPromise.reject(error);
            }
        });
        return _queryPromise.promise;
    };
    ConnectionService.prototype.query_db = function (params) {
        var defer = q.defer();
        var _rows;
        var _connection = mysql.createConnection(this.dbConfig);
        _connection.query(params, function (err, rows) {
            _connection.end();
            if (err) {
                defer.reject(err);
                throw err;
            }
            ;
            defer.resolve(rows);
        });
        return defer.promise;
    };
    return ConnectionService;
})();
exports.ConnectionService = ConnectionService;
exports.service = new ConnectionService();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQ29ubmVjdGlvblNlcnZpY2UiLCJDb25uZWN0aW9uU2VydmljZS5jb25zdHJ1Y3RvciIsIkNvbm5lY3Rpb25TZXJ2aWNlLnF1ZXJ5IiwiQ29ubmVjdGlvblNlcnZpY2UucXVlcnlfZGIiXSwibWFwcGluZ3MiOiJBQUFBLEFBQ0EsaURBRGlEO0FBQ2pELFlBQVksQ0FBQztBQUViLElBQU8sS0FBSyxXQUFXLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sT0FBTyxXQUFXLFNBQVMsQ0FBQyxDQUFDO0FBT3BDLElBQWEsaUJBQWlCO0lBSTFCQSxTQUpTQSxpQkFBaUJBO1FBS3RCQyxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQTtZQUNaQSxJQUFJQSxFQUFFQSx5QkFBeUJBO1lBQy9CQSxJQUFJQSxFQUFFQSxjQUFjQTtZQUNwQkEsUUFBUUEsRUFBRUEsY0FBY0E7WUFDeEJBLEFBQ0FBLDBDQUQwQ0E7WUFDMUNBLFFBQVFBLEVBQUVBLHNCQUFzQkE7WUFDaENBLEtBQUtBLEVBQUVBLEtBQUtBO1lBQ1pBLFlBQVlBLEVBQUVBLElBQUlBO1NBQ3JCQSxDQUFBQTtJQUNMQSxDQUFDQTtJQUVERCxpQ0FBS0EsR0FBTEEsVUFBTUEsTUFBTUE7UUFDUkUsSUFBSUEsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDOUJBLE9BQU9BLENBQUNBLHVCQUF1QkEsR0FBR0EsTUFBTUEsRUFBRUEsVUFBU0EsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsSUFBSUE7WUFDcEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyx5Q0FBeUM7WUFDckYsQ0FBQyxHQUQwQztZQUN6QyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWhDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUFBO1FBQ0ZBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUVERixvQ0FBUUEsR0FBUkEsVUFBU0EsTUFBTUE7UUFDWEcsSUFBSUEsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLEtBQUtBLENBQUNBO1FBQ1ZBLElBQUlBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLFdBQVdBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLFVBQUNBLEdBQUdBLEVBQUVBLElBQUlBO1lBQ2hDQSxXQUFXQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNsQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ05BLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFDQSxNQUFNQSxHQUFHQSxDQUFBQTtZQUNoQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0E7WUFDRkEsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLENBQUNBLENBQUNBLENBQUFBO1FBQ0ZBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUVMSCx3QkFBQ0E7QUFBREEsQ0E1Q0EsQUE0Q0NBLElBQUE7QUE1Q1kseUJBQWlCLEdBQWpCLGlCQTRDWixDQUFBO0FBRVUsZUFBTyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vPHJlZmVyZW5jZSBwYXRoPScuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzJyAvPlxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgbXlzcWwgPSByZXF1aXJlKFwibXlzcWxcIik7XG5pbXBvcnQgcSA9IHJlcXVpcmUoXCJxXCIpO1xuaW1wb3J0IHJlcXVlc3QgPSByZXF1aXJlKFwicmVxdWVzdFwiKTtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29ubmVjdGlvblNlcnZpY2Uge1xuICAgIHF1ZXJ5KHBhcmFtcyk6IHEuSVByb21pc2U8e30+XG4gICAgcXVlcnlfZGIocGFyYW1zKTogcS5JUHJvbWlzZTx7fT5cbn1cblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25TZXJ2aWNlIGltcGxlbWVudHMgSUNvbm5lY3Rpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIGNvbm5lY3Rpb25TdHJlYW07XG4gICAgcHJpdmF0ZSBkYkNvbmZpZztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRiQ29uZmlnID0ge1xuICAgICAgICAgICAgaG9zdDogJ2dhdG9yMjAwOS5ob3N0Z2F0b3IuY29tJyxcbiAgICAgICAgICAgIHVzZXI6ICd0ZG5iMTIwN19zb2YnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICdwa2N+Xl85V1oodXMnLFxuICAgICAgICAgICAgLy8gZGF0YWJhc2U6ICd0ZG5iMTIwN19zb2YnLCAvLyBwcm9kdWN0aW9uXG4gICAgICAgICAgICBkYXRhYmFzZTogJ3RkbmIxMjA3X3NvZl9kZXZlbG9wJywgLy8gZGV2ZWxvcFxuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgaW5zZWN1cmVBdXRoOiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBxdWVyeShwYXJhbXMpOiBxLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcXVlcnlQcm9taXNlID0gcS5kZWZlcigpO1xuICAgICAgICByZXF1ZXN0KCdodHRwOi8vc29mLnRva3lvL2FwaS8nICsgcGFyYW1zLCBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBfcXVlcnlQcm9taXNlLnJlc29sdmUoSlNPTi5wYXJzZShib2R5KSkgLy8gU2hvdyB0aGUgSFRNTCBmb3IgdGhlIEdvb2dsZSBob21lcGFnZS5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignY29ubmVjdGlvbi5zZXJ2aWNlID4gcXVlcnkgZXJyb3IgJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIF9xdWVyeVByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBfcXVlcnlQcm9taXNlLnJlc29sdmUoSlNPTi5wYXJzZShib2R5KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9xdWVyeVByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBxdWVyeV9kYihwYXJhbXMpOiBxLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBkZWZlciA9IHEuZGVmZXIoKTtcbiAgICAgICAgdmFyIF9yb3dzO1xuICAgICAgICB2YXIgX2Nvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHRoaXMuZGJDb25maWcpO1xuICAgICAgICBfY29ubmVjdGlvbi5xdWVyeShwYXJhbXMsIChlcnIsIHJvd3MpID0+IHtcbiAgICAgICAgICAgIF9jb25uZWN0aW9uLmVuZCgpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGRlZmVyLnJlamVjdChlcnIpOyB0aHJvdyBlcnJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZlci5yZXNvbHZlKHJvd3MpO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHZhciBzZXJ2aWNlID0gbmV3IENvbm5lY3Rpb25TZXJ2aWNlKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=