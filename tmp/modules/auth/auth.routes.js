'use strict';
///<reference path="../../../typings/tsd.d.ts" />
///<reference path="./authors.service.ts" />
var service = require('./auth.service');
var Joi = require('joi');
var AuthService = new service.AuthService();
var _prefix = '/auth';
var auth = [
    {
        method: 'GET',
        path: _prefix + '/nonce/{controller}/{method}',
        handler: function (request, reply) {
            AuthService.getNonce(request.params.controller, request.params.method).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    controller: Joi.string(),
                    method: Joi.string()
                }
            },
            description: "Retrieve a Nonce",
            notes: [
                "Controller values: 'user'/'posts'",
                "Method values: 'register'/'create_post'"
            ]
        }
    },
    {
        method: 'GET',
        path: _prefix + '/register/{username}/{email}/{nonce}/{display_name}',
        handler: function (request, reply) {
            AuthService.register(request.params.username, request.params.email, request.params.nonce, request.params.display_name).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    username: Joi.string(),
                    email: Joi.string(),
                    nonce: Joi.string(),
                    display_name: Joi.string()
                }
            },
            description: 'Create a new User (need to create a new Nonce first and pass it as param)'
        }
    },
    {
        method: 'GET',
        path: _prefix + '/login/{username}/{password}',
        handler: function (request, reply) {
            AuthService.login(request.params.username, request.params.password).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    username: Joi.string(),
                    password: Joi.string()
                }
            },
            description: 'Login a User > Retrieve a Session Cookie'
        }
    },
    {
        method: 'GET',
        path: _prefix + '/is_authorized/{cookie}',
        handler: function (request, reply) {
            AuthService.isAuthorized(request.params.cookie).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    cookie: Joi.string()
                }
            },
            description: 'Check if a Session Cookie is still valid'
        }
    },
    {
        method: 'GET',
        path: _prefix + '/get_user/{userId}',
        handler: function (request, reply) {
            AuthService.getUserInfo(request.params.userId).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.string()
                }
            },
            description: 'Retrieve User info'
        }
    },
    ,
    {
        method: 'GET',
        path: _prefix + '/get_avatar/{userId}/{type}',
        handler: function (request, reply) {
            AuthService.getUserAvatar(request.params.userId, request.params.type).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.string(),
                    type: Joi.string()
                }
            },
            description: "Retrieve User's Avatar",
            notes: [
                "Type values: 'full'/'thumb'"
            ]
        }
    },
    ,
    {
        method: 'GET',
        path: _prefix + '/reset_password/{username}',
        handler: function (request, reply) {
            AuthService.resetPassword(request.params.username).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    username: Joi.string()
                }
            },
            description: "Reset User's Password and send an email with instructions"
        }
    },
];
module.exports = auth;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdXRoLnJvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixBQUlBLGlEQUppRDtBQUNqRCw0Q0FBNEM7QUFHNUMsSUFBTyxPQUFPLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztBQUMzQyxJQUFPLEdBQUcsV0FBVyxLQUFLLENBQUMsQ0FBQztBQUU1QixJQUFJLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM1QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDdEIsSUFBSSxJQUFJLEdBQUc7SUFDUDtRQUNJLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLE9BQU8sR0FBRyw4QkFBOEI7UUFDOUMsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQzdFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUN4QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtpQkFDdkI7YUFDSjtZQUNELFdBQVcsRUFBRSxrQkFBa0I7WUFDL0IsS0FBSyxFQUFFO2dCQUNILG1DQUFtQztnQkFDbkMseUNBQXlDO2FBQzVDO1NBQ0o7S0FDSjtJQUNEO1FBQ0ksTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLHFEQUFxRDtRQUNyRSxPQUFPLEVBQUUsVUFBUyxPQUFPLEVBQUUsS0FBSztZQUM1QixXQUFXLENBQUMsUUFBUSxDQUFDLE9B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SSxDQUFDLFVBQUMsSUFBSTtnQkFDNUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNKLFFBQVEsRUFBRTtnQkFDTixLQUFLLEVBQUU7b0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO2lCQUNyQjthQUNKO1lBQ0QsV0FBVyxFQUFFLHdCQUF3QjtZQUNyQyxLQUFLLEVBQUU7Z0JBQ0gsNkJBQTZCO2FBQ2hDO1NBQ0o7S0FDSjtJQUFDLEFBQUM7SUFDSDtRQUNJLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLE9BQU8sR0FBRyw0QkFBNEI7UUFDNUMsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQ3pELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILFFBQVEsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO2lCQUN6QjthQUNKO1lBQ0QsV0FBVyxFQUFFLDJEQUEyRDtTQUMzRTtLQUNKO0NBQ0osQ0FBQTtBQUdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvYXV0aC9hdXRoLnJvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy88cmVmZXJlbmNlIHBhdGg9XCIuL2F1dGhvcnMuc2VydmljZS50c1wiIC8+XG5cblxuaW1wb3J0IHNlcnZpY2UgPSByZXF1aXJlKCcuL2F1dGguc2VydmljZScpO1xuaW1wb3J0IEpvaSA9IHJlcXVpcmUoJ2pvaScpO1xuXG52YXIgQXV0aFNlcnZpY2UgPSBuZXcgc2VydmljZS5BdXRoU2VydmljZSgpO1xudmFyIF9wcmVmaXggPSAnL2F1dGgnO1xudmFyIGF1dGggPSBbXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9ub25jZS97Y29udHJvbGxlcn0ve21ldGhvZH0nLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgQXV0aFNlcnZpY2UuZ2V0Tm9uY2UocmVxdWVzdC5wYXJhbXMuY29udHJvbGxlciwgcmVxdWVzdC5wYXJhbXMubWV0aG9kKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVwbHkoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogSm9pLnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IEpvaS5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJSZXRyaWV2ZSBhIE5vbmNlXCIsXG4gICAgICAgICAgICBub3RlczogW1xuICAgICAgICAgICAgICAgIFwiQ29udHJvbGxlciB2YWx1ZXM6ICd1c2VyJy8ncG9zdHMnXCIsXG4gICAgICAgICAgICAgICAgXCJNZXRob2QgdmFsdWVzOiAncmVnaXN0ZXInLydjcmVhdGVfcG9zdCdcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL3JlZ2lzdGVyL3t1c2VybmFtZX0ve2VtYWlsfS97bm9uY2V9L3tkaXNwbGF5X25hbWV9JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEF1dGhTZXJ2aWNlLnJlZ2lzdGVyKHJlcXVlc3QucGFyYW1zLnVzZXJuYW1lLCByZXF1ZXN0LnBhcmFtcy5lbWFpbCwgcmVxdWVzdC5wYXJhbXMubm9uY2UsIHJlcXVlc3QucGFyYW1zLmRpc3BsYXlfbmFtZSkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlcGx5KGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBKb2kuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBKb2kuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIG5vbmNlOiBKb2kuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZTogSm9pLnN0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGEgbmV3IFVzZXIgKG5lZWQgdG8gY3JlYXRlIGEgbmV3IE5vbmNlIGZpcnN0IGFuZCBwYXNzIGl0IGFzIHBhcmFtKSdcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9sb2dpbi97dXNlcm5hbWV9L3twYXNzd29yZH0nLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgQXV0aFNlcnZpY2UubG9naW4ocmVxdWVzdC5wYXJhbXMudXNlcm5hbWUsIHJlcXVlc3QucGFyYW1zLnBhc3N3b3JkKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVwbHkoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IEpvaS5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvZ2luIGEgVXNlciA+IFJldHJpZXZlIGEgU2Vzc2lvbiBDb29raWUnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGF0aDogX3ByZWZpeCArICcvaXNfYXV0aG9yaXplZC97Y29va2llfScsXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlcXVlc3QsIHJlcGx5KSB7XG4gICAgICAgICAgICBBdXRoU2VydmljZS5pc0F1dGhvcml6ZWQocmVxdWVzdC5wYXJhbXMuY29va2llKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVwbHkoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgY29va2llOiBKb2kuc3RyaW5nKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDaGVjayBpZiBhIFNlc3Npb24gQ29va2llIGlzIHN0aWxsIHZhbGlkJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL2dldF91c2VyL3t1c2VySWR9JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEF1dGhTZXJ2aWNlLmdldFVzZXJJbmZvKHJlcXVlc3QucGFyYW1zLnVzZXJJZCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlcGx5KGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogSm9pLnN0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmV0cmlldmUgVXNlciBpbmZvJ1xuICAgICAgICB9XG4gICAgfSwgLFxuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGF0aDogX3ByZWZpeCArICcvZ2V0X2F2YXRhci97dXNlcklkfS97dHlwZX0nLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgQXV0aFNlcnZpY2UuZ2V0VXNlckF2YXRhcihyZXF1ZXN0LnBhcmFtcy51c2VySWQsIHJlcXVlc3QucGFyYW1zLnR5cGUpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXBseShkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSm9pLnN0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlJldHJpZXZlIFVzZXIncyBBdmF0YXJcIixcbiAgICAgICAgICAgIG5vdGVzOiBbXG4gICAgICAgICAgICAgICAgXCJUeXBlIHZhbHVlczogJ2Z1bGwnLyd0aHVtYidcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfSwgLFxuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGF0aDogX3ByZWZpeCArICcvcmVzZXRfcGFzc3dvcmQve3VzZXJuYW1lfScsXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlcXVlc3QsIHJlcGx5KSB7XG4gICAgICAgICAgICBBdXRoU2VydmljZS5yZXNldFBhc3N3b3JkKHJlcXVlc3QucGFyYW1zLnVzZXJuYW1lKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVwbHkoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IEpvaS5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJSZXNldCBVc2VyJ3MgUGFzc3dvcmQgYW5kIHNlbmQgYW4gZW1haWwgd2l0aCBpbnN0cnVjdGlvbnNcIlxuICAgICAgICB9XG4gICAgfSxcbl1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGF1dGg7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=