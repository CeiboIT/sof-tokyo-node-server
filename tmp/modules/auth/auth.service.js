/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var AuthService = (function () {
    function AuthService() {
        this.db = connection.service;
    }
    AuthService.prototype.getNonce = function (controller, method) {
        return this.db.query('core/get_nonce/?controller=' + controller + '&method=' + method);
    };
    AuthService.prototype.register = function (username, email, display_name, years, country, school, ob) {
        var _this = this;
        var _registerPromise = Q.defer();
        this.getNonce('user', 'register').then(function (nonce) {
            console.log(nonce['nonce']);
            _this.db.query('user/register/?username=' + username + '&email=' + email + '&nonce=' + nonce['nonce'] + '&display_name=' + display_name).then(function (results) {
                console.log(results);
                //wp2_bp_xprofile_data
                console.log(display_name, years, country, school, ob);
                _registerPromise.resolve(results);
            });
        });
        return _registerPromise.promise;
    };
    AuthService.prototype.login = function (username, password) {
        return this.db.query('user/generate_auth_cookie/?username=' + username + '&password=' + password);
    };
    AuthService.prototype.fbLogin = function (token) {
        return this.db.query('user/fb_connect/?access_token=' + token);
    };
    AuthService.prototype.isAuthorized = function (cookie) {
        return this.db.query('user/validate_auth_cookie/?cookie=' + cookie);
    };
    AuthService.prototype.getUserInfo = function (userId) {
        return this.db.query('user/get_userinfo/?user_id=' + userId);
    };
    AuthService.prototype.getUserAvatar = function (userId, type) {
        return this.db.query('user/get_avatar/?user_id=' + userId + '&type=' + type);
    };
    AuthService.prototype.resetPassword = function (username) {
        return this.db.query('user/retrieve_password/?user_login=' + username);
    };
    return AuthService;
})();
exports.AuthService = AuthService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQXV0aFNlcnZpY2UiLCJBdXRoU2VydmljZS5jb25zdHJ1Y3RvciIsIkF1dGhTZXJ2aWNlLmdldE5vbmNlIiwiQXV0aFNlcnZpY2UucmVnaXN0ZXIiLCJBdXRoU2VydmljZS5sb2dpbiIsIkF1dGhTZXJ2aWNlLmZiTG9naW4iLCJBdXRoU2VydmljZS5pc0F1dGhvcml6ZWQiLCJBdXRoU2VydmljZS5nZXRVc2VySW5mbyIsIkF1dGhTZXJ2aWNlLmdldFVzZXJBdmF0YXIiLCJBdXRoU2VydmljZS5yZXNldFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRTVELElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUM7QUFlaEUsSUFBYSxXQUFXO0lBQXhCQSxTQUFhQSxXQUFXQTtRQUNaQyxPQUFFQSxHQUFHQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQTtJQXNEcENBLENBQUNBO0lBcERHRCw4QkFBUUEsR0FBUkEsVUFBU0EsVUFBVUEsRUFBRUEsTUFBTUE7UUFDdkJFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDZCQUE2QkEsR0FBR0EsVUFBVUEsR0FDMUNBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQzdDQSxDQUFDQTtJQUVERiw4QkFBUUEsR0FBUkEsVUFBU0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUEsRUFBRUEsRUFBRUE7UUFBbEVHLGlCQW9CQ0E7UUFuQkdBLElBQUlBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEVBQUVBLFVBQVVBLENBQUNBLENBQzVCQSxJQUFJQSxDQUFDQSxVQUFDQSxLQUFLQTtZQUNSQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1QkEsS0FBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxRQUFRQSxHQUM5QkEsU0FBU0EsR0FBR0EsS0FBS0EsR0FDakJBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLEdBQzFCQSxnQkFBZ0JBLEdBQUdBLFlBQVlBLENBQUNBLENBQ2hEQSxJQUFJQSxDQUFDQSxVQUFDQSxPQUFPQTtnQkFDVkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBRXJCQSxBQUNBQSxzQkFEc0JBO2dCQUN0QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBRXREQSxnQkFBZ0JBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQ3RDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNYQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUVOQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLE9BQU9BLENBQUNBO0lBQ3BDQSxDQUFDQTtJQUVESCwyQkFBS0EsR0FBTEEsVUFBTUEsUUFBUUEsRUFBRUEsUUFBUUE7UUFDcEJJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLHNDQUFzQ0EsR0FBR0EsUUFBUUEsR0FDakRBLFlBQVlBLEdBQUdBLFFBQVFBLENBQUNBLENBQUFBO0lBQ2pEQSxDQUFDQTtJQUVESiw2QkFBT0EsR0FBUEEsVUFBUUEsS0FBS0E7UUFDVEssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZ0NBQWdDQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFBQTtJQUNsRUEsQ0FBQ0E7SUFFREwsa0NBQVlBLEdBQVpBLFVBQWFBLE1BQU1BO1FBQ2ZNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLG9DQUFvQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQUE7SUFDdkVBLENBQUNBO0lBRUROLGlDQUFXQSxHQUFYQSxVQUFZQSxNQUFNQTtRQUNkTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSw2QkFBNkJBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQ2hFQSxDQUFDQTtJQUVEUCxtQ0FBYUEsR0FBYkEsVUFBY0EsTUFBTUEsRUFBRUEsSUFBSUE7UUFDdEJRLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDJCQUEyQkEsR0FBR0EsTUFBTUEsR0FDcENBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLENBQUFBO0lBQ3pDQSxDQUFDQTtJQUVEUixtQ0FBYUEsR0FBYkEsVUFBY0EsUUFBUUE7UUFDbEJTLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLHFDQUFxQ0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQUE7SUFDMUVBLENBQUNBO0lBQ0xULGtCQUFDQTtBQUFEQSxDQXZEQSxBQXVEQ0EsSUFBQTtBQXZEWSxtQkFBVyxHQUFYLFdBdURaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvYXV0aC9hdXRoLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UudHNcIiAvPlxuXG5pbXBvcnQgUSA9IHJlcXVpcmUoXCJxXCIpO1xuaW1wb3J0IGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZScpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBdXRoU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgZ2V0Tm9uY2UoY29udHJvbGxlciwgbWV0aG9kKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0VXNlckluZm8odXNlcklkKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0VXNlckF2YXRhcih1c2VySWQsIHR5cGUpOiBRLklQcm9taXNlPHt9PjtcbiAgICAvLyBQT1NUXG4gICAgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBkaXNwbGF5X25hbWUsIHllYXJzLCBjb3VudHJ5LCBzY2hvb2wsIG9iKTogUS5JUHJvbWlzZTx7fT47XG4gICAgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZmJMb2dpbih0b2tlbik6IFEuSVByb21pc2U8e30+O1xuICAgIGlzQXV0aG9yaXplZChjb29raWUpOiBRLklQcm9taXNlPHt9PjtcbiAgICByZXNldFBhc3N3b3JkKHVzZXJuYW1lKTogUS5JUHJvbWlzZTx7fT47XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSBpbXBsZW1lbnRzIElBdXRoU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkYiA9IGNvbm5lY3Rpb24uc2VydmljZTtcblxuICAgIGdldE5vbmNlKGNvbnRyb2xsZXIsIG1ldGhvZCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ2NvcmUvZ2V0X25vbmNlLz9jb250cm9sbGVyPScgKyBjb250cm9sbGVyICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZtZXRob2Q9JyArIG1ldGhvZClcbiAgICB9XG5cbiAgICByZWdpc3Rlcih1c2VybmFtZSwgZW1haWwsIGRpc3BsYXlfbmFtZSwgeWVhcnMsIGNvdW50cnksIHNjaG9vbCwgb2IpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcmVnaXN0ZXJQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmdldE5vbmNlKCd1c2VyJywgJ3JlZ2lzdGVyJylcbiAgICAgICAgICAgIC50aGVuKChub25jZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5vbmNlWydub25jZSddKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRiLnF1ZXJ5KCd1c2VyL3JlZ2lzdGVyLz91c2VybmFtZT0nICsgdXNlcm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmZW1haWw9JyArIGVtYWlsICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJm5vbmNlPScgKyBub25jZVsnbm9uY2UnXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZkaXNwbGF5X25hbWU9JyArIGRpc3BsYXlfbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3dwMl9icF94cHJvZmlsZV9kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkaXNwbGF5X25hbWUsIHllYXJzLCBjb3VudHJ5LCBzY2hvb2wsIG9iKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlZ2lzdGVyUHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIF9yZWdpc3RlclByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL2dlbmVyYXRlX2F1dGhfY29va2llLz91c2VybmFtZT0nICsgdXNlcm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnBhc3N3b3JkPScgKyBwYXNzd29yZClcbiAgICB9XG5cbiAgICBmYkxvZ2luKHRva2VuKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9mYl9jb25uZWN0Lz9hY2Nlc3NfdG9rZW49JyArIHRva2VuKVxuICAgIH1cblxuICAgIGlzQXV0aG9yaXplZChjb29raWUpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL3ZhbGlkYXRlX2F1dGhfY29va2llLz9jb29raWU9JyArIGNvb2tpZSlcbiAgICB9XG5cbiAgICBnZXRVc2VySW5mbyh1c2VySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL2dldF91c2VyaW5mby8/dXNlcl9pZD0nICsgdXNlcklkKVxuICAgIH1cblxuICAgIGdldFVzZXJBdmF0YXIodXNlcklkLCB0eXBlKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZXRfYXZhdGFyLz91c2VyX2lkPScgKyB1c2VySWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnR5cGU9JyArIHR5cGUpXG4gICAgfVxuXG4gICAgcmVzZXRQYXNzd29yZCh1c2VybmFtZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvcmV0cmlldmVfcGFzc3dvcmQvP3VzZXJfbG9naW49JyArIHVzZXJuYW1lKVxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=