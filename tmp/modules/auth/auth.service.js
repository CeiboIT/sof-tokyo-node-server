/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var connection = require('../connection/connection.service');
var AuthService = (function () {
    function AuthService() {
        this.db = connection.service;
    }
    AuthService.prototype.getNonce = function (controller, method) {
        return this.db.query('core/get_nonce/?controller=' + controller + '&method=' + method);
    };
    AuthService.prototype.register = function (username, email, nonce, display_name) {
        return this.db.query('user/register/?username=' + username + '&email=' + email + '&nonce=' + nonce + '&display_name=' + display_name);
    };
    AuthService.prototype.login = function (username, password) {
        return this.db.query('user/generate_auth_cookie/?username=' + username + '&password=' + password);
    };
    AuthService.prototype.fbLogin = function (token) {
        return this.db.query('user/fb_connect/?access_token=' + token);
    };
    AuthService.prototype.isAuthorized = function (cookie) {
        return this.db.query('user/validate_auth_cookie/?cookie=' + cookie);
    };
    AuthService.prototype.getUserInfo = function (userId) {
        return this.db.query('user/get_userinfo/?user_id=' + userId);
    };
    AuthService.prototype.getUserAvatar = function (userId, type) {
        return this.db.query('user/get_avatar/?user_id=' + userId + '&type=' + type);
    };
    AuthService.prototype.resetPassword = function (username) {
        return this.db.query('user/retrieve_password/?user_login=' + username);
    };
    return AuthService;
})();
exports.AuthService = AuthService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQXV0aFNlcnZpY2UiLCJBdXRoU2VydmljZS5jb25zdHJ1Y3RvciIsIkF1dGhTZXJ2aWNlLmdldE5vbmNlIiwiQXV0aFNlcnZpY2UucmVnaXN0ZXIiLCJBdXRoU2VydmljZS5sb2dpbiIsIkF1dGhTZXJ2aWNlLmZiTG9naW4iLCJBdXRoU2VydmljZS5pc0F1dGhvcml6ZWQiLCJBdXRoU2VydmljZS5nZXRVc2VySW5mbyIsIkF1dGhTZXJ2aWNlLmdldFVzZXJBdmF0YXIiLCJBdXRoU2VydmljZS5yZXNldFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRzVELElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUM7QUFlaEUsSUFBYSxXQUFXO0lBQXhCQSxTQUFhQSxXQUFXQTtRQUNaQyxPQUFFQSxHQUFHQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQTtJQXVDcENBLENBQUNBO0lBckNHRCw4QkFBUUEsR0FBUkEsVUFBU0EsVUFBVUEsRUFBRUEsTUFBTUE7UUFDdkJFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDZCQUE2QkEsR0FBR0EsVUFBVUEsR0FDMUNBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQzdDQSxDQUFDQTtJQUVERiw4QkFBUUEsR0FBUkEsVUFBU0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0EsRUFBRUEsWUFBWUE7UUFDekNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDBCQUEwQkEsR0FBR0EsUUFBUUEsR0FDckNBLFNBQVNBLEdBQUdBLEtBQUtBLEdBQ2pCQSxTQUFTQSxHQUFHQSxLQUFLQSxHQUNqQkEsZ0JBQWdCQSxHQUFHQSxZQUFZQSxDQUFDQSxDQUFBQTtJQUN6REEsQ0FBQ0E7SUFFREgsMkJBQUtBLEdBQUxBLFVBQU1BLFFBQVFBLEVBQUVBLFFBQVFBO1FBQ3BCSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxzQ0FBc0NBLEdBQUdBLFFBQVFBLEdBQ2pEQSxZQUFZQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFBQTtJQUNqREEsQ0FBQ0E7SUFFREosNkJBQU9BLEdBQVBBLFVBQVFBLEtBQUtBO1FBQ1RLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQUE7SUFDbEVBLENBQUNBO0lBRURMLGtDQUFZQSxHQUFaQSxVQUFhQSxNQUFNQTtRQUNmTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxvQ0FBb0NBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQ3ZFQSxDQUFDQTtJQUVETixpQ0FBV0EsR0FBWEEsVUFBWUEsTUFBTUE7UUFDZE8sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsNkJBQTZCQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFBQTtJQUNoRUEsQ0FBQ0E7SUFFRFAsbUNBQWFBLEdBQWJBLFVBQWNBLE1BQU1BLEVBQUVBLElBQUlBO1FBQ3RCUSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSwyQkFBMkJBLEdBQUdBLE1BQU1BLEdBQ3BDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFFRFIsbUNBQWFBLEdBQWJBLFVBQWNBLFFBQVFBO1FBQ2xCUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxxQ0FBcUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUFBO0lBQzFFQSxDQUFDQTtJQUNMVCxrQkFBQ0E7QUFBREEsQ0F4Q0EsQUF3Q0NBLElBQUE7QUF4Q1ksbUJBQVcsR0FBWCxXQXdDWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2F1dGgvYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbmltcG9ydCBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJQXV0aFNlcnZpY2Uge1xuICAgIC8vIEdFVFxuICAgIGdldE5vbmNlKGNvbnRyb2xsZXIsIG1ldGhvZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFVzZXJJbmZvKHVzZXJJZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFVzZXJBdmF0YXIodXNlcklkLCB0eXBlKTogUS5JUHJvbWlzZTx7fT47XG4gICAgLy8gUE9TVFxuICAgIHJlZ2lzdGVyKHVzZXJuYW1lLCBlbWFpbCwgbm9uY2UsIGRpc3BsYXlfbmFtZSk6IFEuSVByb21pc2U8e30+O1xuICAgIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGZiTG9naW4odG9rZW4pOiBRLklQcm9taXNlPHt9PjtcbiAgICBpc0F1dGhvcml6ZWQoY29va2llKTogUS5JUHJvbWlzZTx7fT47XG4gICAgcmVzZXRQYXNzd29yZCh1c2VybmFtZSk6IFEuSVByb21pc2U8e30+O1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aFNlcnZpY2UgaW1wbGVtZW50cyBJQXV0aFNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGIgPSBjb25uZWN0aW9uLnNlcnZpY2U7XG5cbiAgICBnZXROb25jZShjb250cm9sbGVyLCBtZXRob2QpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCdjb3JlL2dldF9ub25jZS8/Y29udHJvbGxlcj0nICsgY29udHJvbGxlciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmbWV0aG9kPScgKyBtZXRob2QpXG4gICAgfVxuXG4gICAgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBub25jZSwgZGlzcGxheV9uYW1lKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9yZWdpc3Rlci8/dXNlcm5hbWU9JyArIHVzZXJuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZlbWFpbD0nICsgZW1haWwgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJm5vbmNlPScgKyBub25jZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmZGlzcGxheV9uYW1lPScgKyBkaXNwbGF5X25hbWUpXG4gICAgfVxuXG4gICAgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZW5lcmF0ZV9hdXRoX2Nvb2tpZS8/dXNlcm5hbWU9JyArIHVzZXJuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZwYXNzd29yZD0nICsgcGFzc3dvcmQpXG4gICAgfVxuXG4gICAgZmJMb2dpbih0b2tlbik6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvZmJfY29ubmVjdC8/YWNjZXNzX3Rva2VuPScgKyB0b2tlbilcbiAgICB9XG5cbiAgICBpc0F1dGhvcml6ZWQoY29va2llKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci92YWxpZGF0ZV9hdXRoX2Nvb2tpZS8/Y29va2llPScgKyBjb29raWUpXG4gICAgfVxuXG4gICAgZ2V0VXNlckluZm8odXNlcklkKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZXRfdXNlcmluZm8vP3VzZXJfaWQ9JyArIHVzZXJJZClcbiAgICB9XG5cbiAgICBnZXRVc2VyQXZhdGFyKHVzZXJJZCwgdHlwZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvZ2V0X2F2YXRhci8/dXNlcl9pZD0nICsgdXNlcklkICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZ0eXBlPScgKyB0eXBlKVxuICAgIH1cblxuICAgIHJlc2V0UGFzc3dvcmQodXNlcm5hbWUpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL3JldHJpZXZlX3Bhc3N3b3JkLz91c2VyX2xvZ2luPScgKyB1c2VybmFtZSlcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9