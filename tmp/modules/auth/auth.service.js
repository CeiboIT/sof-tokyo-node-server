/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var AuthService = (function () {
    function AuthService() {
        this.db = connection.service;
    }
    AuthService.prototype.getNonce = function (controller, method) {
        return this.db.query('core/get_nonce/?controller=' + controller + '&method=' + method);
    };
    AuthService.prototype.register = function (username, email, password, display_name, years, country, school, ob) {
        var _this = this;
        var _promisesList = [];
        var registerPromise = Q.defer();
        this.getNonce('user', 'register').then(function (nonce) {
            _this.db.query('user/register/?username=' + username + '&email=' + email + '&password=' + password + '&nonce=' + nonce['nonce'] + '&notify=yes' + '&user_registered=yes' + '&display_name=' + display_name).then(function (results) {
                var i = [0, 1, 2, 3, 4];
                var fieldIds = [1, 645, 2, 4, 646];
                var fieldValues = [display_name, years, country, school, ob];
                if (results['status'] == 'error') {
                    if (results['error'] == "E-mail address is already in use.") {
                        results['code'] = '000';
                    }
                    ;
                    if (results['error'] == "Username already exists.") {
                        results['code'] = '001';
                    }
                    ;
                    registerPromise.resolve(results);
                    return registerPromise.promise;
                }
                else {
                    var userId = results['user_id'];
                    i.forEach(function (id) {
                        var xProfilePromise = Q.defer();
                        _promisesList.push(xProfilePromise.promise);
                        // if years value
                        if (fieldIds[id] == 645) {
                            // number value
                            var xProfileQuery = "INSERT INTO wp2_bp_xprofile_data (id, field_id, user_id, value, last_updated) " + "VALUES (null," + fieldIds[id] + "," + userId + "," + fieldValues[id] + ",'" + new Date().toISOString() + "')";
                        }
                        else {
                            // string value
                            var xProfileQuery = "INSERT INTO wp2_bp_xprofile_data (id, field_id, user_id, value, last_updated) " + "VALUES (null," + fieldIds[id] + "," + userId + ",'" + fieldValues[id] + "','" + new Date().toISOString() + "')";
                        }
                        ;
                        _this.db.query_db(xProfileQuery).then(function (data) {
                            xProfilePromise.resolve(data);
                        });
                    });
                    Q.all(_promisesList).then(function (values) {
                        results['username'] = username;
                        results['email'] = email;
                        results['display_name'] = display_name;
                        results['years'] = years;
                        results['country'] = country;
                        results['school'] = school;
                        results['ob'] = ob;
                        registerPromise.resolve(results);
                    });
                }
                ;
            });
        });
        return registerPromise.promise;
    };
    AuthService.prototype.login = function (username, password) {
        return this.db.query('user/generate_auth_cookie/?username=' + username + '&password=' + password);
    };
    AuthService.prototype.fbLogin = function (token) {
        return this.db.query('user/fb_connect/?access_token=' + token);
    };
    AuthService.prototype.isAuthorized = function (cookie) {
        return this.db.query('user/validate_auth_cookie/?cookie=' + cookie);
    };
    AuthService.prototype.getUserInfo = function (userId) {
        return this.db.query('user/get_userinfo/?user_id=' + userId);
    };
    AuthService.prototype.getUserAvatar = function (userId, type) {
        return this.db.query('user/get_avatar/?user_id=' + userId + '&type=' + type);
    };
    AuthService.prototype.resetPassword = function (username) {
        return this.db.query('user/retrieve_password/?user_login=' + username);
    };
    return AuthService;
})();
exports.AuthService = AuthService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQXV0aFNlcnZpY2UiLCJBdXRoU2VydmljZS5jb25zdHJ1Y3RvciIsIkF1dGhTZXJ2aWNlLmdldE5vbmNlIiwiQXV0aFNlcnZpY2UucmVnaXN0ZXIiLCJBdXRoU2VydmljZS5sb2dpbiIsIkF1dGhTZXJ2aWNlLmZiTG9naW4iLCJBdXRoU2VydmljZS5pc0F1dGhvcml6ZWQiLCJBdXRoU2VydmljZS5nZXRVc2VySW5mbyIsIkF1dGhTZXJ2aWNlLmdldFVzZXJBdmF0YXIiLCJBdXRoU2VydmljZS5yZXNldFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRTVELElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUM7QUFlaEUsSUFBYSxXQUFXO0lBQXhCQSxTQUFhQSxXQUFXQTtRQUNaQyxPQUFFQSxHQUFHQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQTtJQW9HcENBLENBQUNBO0lBbEdHRCw4QkFBUUEsR0FBUkEsVUFBU0EsVUFBVUEsRUFBRUEsTUFBTUE7UUFDdkJFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDZCQUE2QkEsR0FBR0EsVUFBVUEsR0FDMUNBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQzdDQSxDQUFDQTtJQUVERiw4QkFBUUEsR0FBUkEsVUFBU0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsT0FBT0EsRUFBRUEsTUFBTUEsRUFBRUEsRUFBRUE7UUFBNUVHLGlCQWtFQ0E7UUFqRUdBLElBQUlBLGFBQWFBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3ZCQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUNo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QSxLQUFLQSxDQUFDQSxxQ0FBcUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUFBO0lBQzFFQSxDQUFDQTtJQUNMVCxrQkFBQ0E7QUFBREEsQ0FyR0EsQUFxR0NBLElBQUE7QUFyR1ksbUJBQVcsR0FBWCxXQXFHWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2F1dGgvYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbmltcG9ydCBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJQXV0aFNlcnZpY2Uge1xuICAgIC8vIEdFVFxuICAgIGdldE5vbmNlKGNvbnRyb2xsZXIsIG1ldGhvZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFVzZXJJbmZvKHVzZXJJZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFVzZXJBdmF0YXIodXNlcklkLCB0eXBlKTogUS5JUHJvbWlzZTx7fT47XG4gICAgLy8gUE9TVFxuICAgIHJlZ2lzdGVyKHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQsIGRpc3BsYXlfbmFtZSwgeWVhcnMsIGNvdW50cnksIHNjaG9vbCwgb2IpOiBRLklQcm9taXNlPHt9PjtcbiAgICBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOiBRLklQcm9taXNlPHt9PjtcbiAgICBmYkxvZ2luKHRva2VuKTogUS5JUHJvbWlzZTx7fT47XG4gICAgaXNBdXRob3JpemVkKGNvb2tpZSk6IFEuSVByb21pc2U8e30+O1xuICAgIHJlc2V0UGFzc3dvcmQodXNlcm5hbWUpOiBRLklQcm9taXNlPHt9Pjtcbn1cblxuZXhwb3J0IGNsYXNzIEF1dGhTZXJ2aWNlIGltcGxlbWVudHMgSUF1dGhTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGRiID0gY29ubmVjdGlvbi5zZXJ2aWNlO1xuXG4gICAgZ2V0Tm9uY2UoY29udHJvbGxlciwgbWV0aG9kKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgnY29yZS9nZXRfbm9uY2UvP2NvbnRyb2xsZXI9JyArIGNvbnRyb2xsZXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJm1ldGhvZD0nICsgbWV0aG9kKVxuICAgIH1cblxuICAgIHJlZ2lzdGVyKHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQsIGRpc3BsYXlfbmFtZSwgeWVhcnMsIGNvdW50cnksIHNjaG9vbCwgb2IpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZXNMaXN0ID0gW107XG4gICAgICAgIHZhciByZWdpc3RlclByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZ2V0Tm9uY2UoJ3VzZXInLCAncmVnaXN0ZXInKVxuICAgICAgICAgICAgLnRoZW4oKG5vbmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYi5xdWVyeSgndXNlci9yZWdpc3Rlci8/dXNlcm5hbWU9JyArIHVzZXJuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmVtYWlsPScgKyBlbWFpbCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZwYXNzd29yZD0nICsgcGFzc3dvcmQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmbm9uY2U9JyArIG5vbmNlWydub25jZSddICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJm5vdGlmeT15ZXMnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnVzZXJfcmVnaXN0ZXJlZD15ZXMnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmRpc3BsYXlfbmFtZT0nICsgZGlzcGxheV9uYW1lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBbMCwgMSwgMiwgMywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRJZHMgPSBbMSwgNjQ1LCAyLCA0LCA2NDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWVzID0gW2Rpc3BsYXlfbmFtZSwgeWVhcnMsIGNvdW50cnksIHNjaG9vbCwgb2JdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0c1snc3RhdHVzJ10gPT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdHNbJ2Vycm9yJ10gPT0gXCJFLW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IGluIHVzZS5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWydjb2RlJ10gPSAnMDAwJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdHNbJ2Vycm9yJ10gPT0gXCJVc2VybmFtZSBhbHJlYWR5IGV4aXN0cy5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWydjb2RlJ10gPSAnMDAxJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyUHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RlclByb21pc2UucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJJZCA9IHJlc3VsdHNbJ3VzZXJfaWQnXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhQcm9maWxlUHJvbWlzZSA9IFEuZGVmZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcHJvbWlzZXNMaXN0LnB1c2goeFByb2ZpbGVQcm9taXNlLnByb21pc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHllYXJzIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZElkc1tpZF0gPT0gNjQ1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4UHJvZmlsZVF1ZXJ5ID0gXCJJTlNFUlQgSU5UTyB3cDJfYnBfeHByb2ZpbGVfZGF0YSAoaWQsIGZpZWxkX2lkLCB1c2VyX2lkLCB2YWx1ZSwgbGFzdF91cGRhdGVkKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWQUxVRVMgKG51bGwsXCIgKyBmaWVsZElkc1tpZF0gKyBcIixcIiArIHVzZXJJZCArIFwiLFwiICsgZmllbGRWYWx1ZXNbaWRdICsgXCIsJ1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCInKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RyaW5nIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeFByb2ZpbGVRdWVyeSA9IFwiSU5TRVJUIElOVE8gd3AyX2JwX3hwcm9maWxlX2RhdGEgKGlkLCBmaWVsZF9pZCwgdXNlcl9pZCwgdmFsdWUsIGxhc3RfdXBkYXRlZCkgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVkFMVUVTIChudWxsLFwiICsgZmllbGRJZHNbaWRdICsgXCIsXCIgKyB1c2VySWQgKyBcIiwnXCIgKyBmaWVsZFZhbHVlc1tpZF0gKyBcIicsJ1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCInKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGIucXVlcnlfZGIoeFByb2ZpbGVRdWVyeSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFByb2ZpbGVQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUS5hbGwoX3Byb21pc2VzTGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1sndXNlcm5hbWUnXSA9IHVzZXJuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1snZW1haWwnXSA9IGVtYWlsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1snZGlzcGxheV9uYW1lJ10gPSBkaXNwbGF5X25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWyd5ZWFycyddID0geWVhcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWydjb3VudHJ5J10gPSBjb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1snc2Nob29sJ10gPSBzY2hvb2w7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWydvYiddID0gb2I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlclByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZWdpc3RlclByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL2dlbmVyYXRlX2F1dGhfY29va2llLz91c2VybmFtZT0nICsgdXNlcm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnBhc3N3b3JkPScgKyBwYXNzd29yZClcbiAgICB9XG5cbiAgICBmYkxvZ2luKHRva2VuKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9mYl9jb25uZWN0Lz9hY2Nlc3NfdG9rZW49JyArIHRva2VuKVxuICAgIH1cblxuICAgIGlzQXV0aG9yaXplZChjb29raWUpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL3ZhbGlkYXRlX2F1dGhfY29va2llLz9jb29raWU9JyArIGNvb2tpZSlcbiAgICB9XG5cbiAgICBnZXRVc2VySW5mbyh1c2VySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL2dldF91c2VyaW5mby8/dXNlcl9pZD0nICsgdXNlcklkKVxuICAgIH1cblxuICAgIGdldFVzZXJBdmF0YXIodXNlcklkLCB0eXBlKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZXRfYXZhdGFyLz91c2VyX2lkPScgKyB1c2VySWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnR5cGU9JyArIHR5cGUpXG4gICAgfVxuXG4gICAgcmVzZXRQYXNzd29yZCh1c2VybmFtZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvcmV0cmlldmVfcGFzc3dvcmQvP3VzZXJfbG9naW49JyArIHVzZXJuYW1lKVxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=