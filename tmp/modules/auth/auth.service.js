/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var connection = require('../connection/connection.service');
var FB = require('facebook-ts');
FB.settings.setClientId('198345513569692');
FB.settings.setSecret('458a0d0542451868acedbd8c74e61ba4');
var AuthService = (function () {
    function AuthService() {
        this.db = connection.service;
    }
    AuthService.prototype.getNonce = function (controller, method) {
        return this.db.query('core/get_nonce/?controller=' + controller + '&method=' + method);
    };
    AuthService.prototype.register = function (username, email, nonce, display_name) {
        return this.db.query('user/register/?username=' + username + '&email=' + email + '&nonce=' + nonce + '&display_name=' + display_name);
    };
    AuthService.prototype.login = function (username, password) {
        return this.db.query('user/generate_auth_cookie/?username=' + username + '&password=' + password);
    };
    AuthService.prototype.fbLogin = function (token) {
        var _this = this;
        return FB.accessToken().then(function (data) {
            console.log(data);
            return _this.db.query('user/fb_connect/?access_token=' + data);
        });
    };
    AuthService.prototype.isAuthorized = function (cookie) {
        return this.db.query('user/validate_auth_cookie/?cookie=' + cookie);
    };
    AuthService.prototype.getUserInfo = function (userId) {
        return this.db.query('user/get_userinfo/?user_id=' + userId);
    };
    AuthService.prototype.getUserAvatar = function (userId, type) {
        return this.db.query('user/get_avatar/?user_id=' + userId + '&type=' + type);
    };
    AuthService.prototype.resetPassword = function (username) {
        return this.db.query('user/retrieve_password/?user_login=' + username);
    };
    return AuthService;
})();
exports.AuthService = AuthService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQXV0aFNlcnZpY2UiLCJBdXRoU2VydmljZS5jb25zdHJ1Y3RvciIsIkF1dGhTZXJ2aWNlLmdldE5vbmNlIiwiQXV0aFNlcnZpY2UucmVnaXN0ZXIiLCJBdXRoU2VydmljZS5sb2dpbiIsIkF1dGhTZXJ2aWNlLmZiTG9naW4iLCJBdXRoU2VydmljZS5pc0F1dGhvcml6ZWQiLCJBdXRoU2VydmljZS5nZXRVc2VySW5mbyIsIkF1dGhTZXJ2aWNlLmdldFVzZXJBdmF0YXIiLCJBdXRoU2VydmljZS5yZXNldFBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRzVELElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUM7QUFFaEUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRWhDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDM0MsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQWdCMUQsSUFBYSxXQUFXO0lBQXhCQSxTQUFhQSxXQUFXQTtRQUNaQyxPQUFFQSxHQUFHQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQTtJQTJDcENBLENBQUNBO0lBekNHRCw4QkFBUUEsR0FBUkEsVUFBU0EsVUFBVUEsRUFBRUEsTUFBTUE7UUFDdkJFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDZCQUE2QkEsR0FBR0EsVUFBVUEsR0FDMUNBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQzdDQSxDQUFDQTtJQUVERiw4QkFBUUEsR0FBUkEsVUFBU0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0EsRUFBRUEsWUFBWUE7UUFDekNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDBCQUEwQkEsR0FBR0EsUUFBUUEsR0FDckNBLFNBQVNBLEdBQUdBLEtBQUtBLEdBQ2pCQSxTQUFTQSxHQUFHQSxLQUFLQSxHQUNqQkEsZ0JBQWdCQSxHQUFHQSxZQUFZQSxDQUFDQSxDQUFBQTtJQUN6REEsQ0FBQ0E7SUFFREgsMkJBQUtBLEdBQUxBLFVBQU1BLFFBQVFBLEVBQUVBLFFBQVFBO1FBQ3BCSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxzQ0FBc0NBLEdBQUdBLFFBQVFBLEdBQ2pEQSxZQUFZQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFBQTtJQUNqREEsQ0FBQ0E7SUFFREosNkJBQU9BLEdBQVBBLFVBQVFBLEtBQUtBO1FBQWJLLGlCQU1DQTtRQUxHQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUM5QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLE1BQU1BLENBQUNBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDbEVBLENBQUNBLENBQUNBLENBQUNBO0lBRVBBLENBQUNBO0lBRURMLGtDQUFZQSxHQUFaQSxVQUFhQSxNQUFNQTtRQUNmTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxvQ0FBb0NBLEdBQUdBLE1BQU1BLENBQUNBLENBQUFBO0lBQ3ZFQSxDQUFDQTtJQUVETixpQ0FBV0EsR0FBWEEsVUFBWUEsTUFBTUE7UUFDZE8sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsNkJBQTZCQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFBQTtJQUNoRUEsQ0FBQ0E7SUFFRFAsbUNBQWFBLEdBQWJBLFVBQWNBLE1BQU1BLEVBQUVBLElBQUlBO1FBQ3RCUSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSwyQkFBMkJBLEdBQUdBLE1BQU1BLEdBQ3BDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFFRFIsbUNBQWFBLEdBQWJBLFVBQWNBLFFBQVFBO1FBQ2xCUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxxQ0FBcUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUFBO0lBQzFFQSxDQUFDQTtJQUNMVCxrQkFBQ0E7QUFBREEsQ0E1Q0EsQUE0Q0NBLElBQUE7QUE1Q1ksbUJBQVcsR0FBWCxXQTRDWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2F1dGgvYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbmltcG9ydCBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UnKTtcblxudmFyIEZCID0gcmVxdWlyZSgnZmFjZWJvb2stdHMnKTtcblxuRkIuc2V0dGluZ3Muc2V0Q2xpZW50SWQoJzE5ODM0NTUxMzU2OTY5MicpO1xuRkIuc2V0dGluZ3Muc2V0U2VjcmV0KCc0NThhMGQwNTQyNDUxODY4YWNlZGJkOGM3NGU2MWJhNCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBdXRoU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgZ2V0Tm9uY2UoY29udHJvbGxlciwgbWV0aG9kKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0VXNlckluZm8odXNlcklkKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0VXNlckF2YXRhcih1c2VySWQsIHR5cGUpOiBRLklQcm9taXNlPHt9PjtcbiAgICAvLyBQT1NUXG4gICAgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBub25jZSwgZGlzcGxheV9uYW1lKTogUS5JUHJvbWlzZTx7fT47XG4gICAgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZmJMb2dpbih0b2tlbik6IFEuSVByb21pc2U8e30+O1xuLy8gICAgZmJMb2dpbihhY2Nlc3NfdG9rZW4pOiBRLklQcm9taXNlPHt9PjtcbiAgICBpc0F1dGhvcml6ZWQoY29va2llKTogUS5JUHJvbWlzZTx7fT47XG4gICAgcmVzZXRQYXNzd29yZCh1c2VybmFtZSk6IFEuSVByb21pc2U8e30+O1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aFNlcnZpY2UgaW1wbGVtZW50cyBJQXV0aFNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGIgPSBjb25uZWN0aW9uLnNlcnZpY2U7XG5cbiAgICBnZXROb25jZShjb250cm9sbGVyLCBtZXRob2QpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCdjb3JlL2dldF9ub25jZS8/Y29udHJvbGxlcj0nICsgY29udHJvbGxlciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmbWV0aG9kPScgKyBtZXRob2QpXG4gICAgfVxuXG4gICAgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBub25jZSwgZGlzcGxheV9uYW1lKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9yZWdpc3Rlci8/dXNlcm5hbWU9JyArIHVzZXJuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZlbWFpbD0nICsgZW1haWwgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJm5vbmNlPScgKyBub25jZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmZGlzcGxheV9uYW1lPScgKyBkaXNwbGF5X25hbWUpXG4gICAgfVxuXG4gICAgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZW5lcmF0ZV9hdXRoX2Nvb2tpZS8/dXNlcm5hbWU9JyArIHVzZXJuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZwYXNzd29yZD0nICsgcGFzc3dvcmQpXG4gICAgfVxuXG4gICAgZmJMb2dpbih0b2tlbik6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIEZCLmFjY2Vzc1Rva2VuKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9mYl9jb25uZWN0Lz9hY2Nlc3NfdG9rZW49JyArIGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGlzQXV0aG9yaXplZChjb29raWUpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL3ZhbGlkYXRlX2F1dGhfY29va2llLz9jb29raWU9JyArIGNvb2tpZSlcbiAgICB9XG5cbiAgICBnZXRVc2VySW5mbyh1c2VySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLnF1ZXJ5KCd1c2VyL2dldF91c2VyaW5mby8/dXNlcl9pZD0nICsgdXNlcklkKVxuICAgIH1cblxuICAgIGdldFVzZXJBdmF0YXIodXNlcklkLCB0eXBlKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgndXNlci9nZXRfYXZhdGFyLz91c2VyX2lkPScgKyB1c2VySWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnR5cGU9JyArIHR5cGUpXG4gICAgfVxuXG4gICAgcmVzZXRQYXNzd29yZCh1c2VybmFtZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvcmV0cmlldmVfcGFzc3dvcmQvP3VzZXJfbG9naW49JyArIHVzZXJuYW1lKVxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=