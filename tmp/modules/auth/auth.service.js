/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var UserAvatar = (function () {
    function UserAvatar(avatarUrl) {
        this._avatar = avatarUrl;
    }
    Object.defineProperty(UserAvatar.prototype, "avatar", {
        get: function () {
            return this._avatar;
        },
        enumerable: true,
        configurable: true
    });
    return UserAvatar;
})();
exports.UserAvatar = UserAvatar;
var AuthService = (function () {
    function AuthService() {
        this.db = connection.service;
    }
    AuthService.prototype.getNonce = function (controller, method) {
        return this.db.query('core/get_nonce/?controller=' + controller + '&method=' + method);
    };
    AuthService.prototype.register = function (username, email, password, display_name, years, country, school, ob) {
        var _this = this;
        var _promisesList = [];
        var registerPromise = Q.defer();
        this.getNonce('user', 'register').then(function (nonce) {
            _this.db.query('user/register/?username=' + username + '&email=' + email + '&password=' + password + '&nonce=' + nonce['nonce'] + '&notify=yes' + '&user_registered=yes' + '&display_name=' + display_name).then(function (results) {
                var i = [0, 1, 2, 3, 4];
                var fieldIds = [1, 645, 2, 4, 646];
                var fieldValues = [display_name, years, country, school, ob];
                if (results['status'] == 'error') {
                    if (results['error'] == "E-mail address is already in use.") {
                        results['code'] = '000';
                    }
                    ;
                    if (results['error'] == "Username already exists.") {
                        results['code'] = '001';
                    }
                    ;
                    registerPromise.resolve(results);
                    return registerPromise.promise;
                }
                else {
                    var userId = results['user_id'];
                    i.forEach(function (id) {
                        var xProfilePromise = Q.defer();
                        _promisesList.push(xProfilePromise.promise);
                        // if years value
                        if (fieldIds[id] == 645) {
                            // number value
                            var xProfileQuery = "INSERT INTO wp2_bp_xprofile_data (id, field_id, user_id, value, last_updated) " + "VALUES (null," + fieldIds[id] + "," + userId + "," + fieldValues[id] + ",'" + new Date().toISOString() + "')";
                        }
                        else {
                            // string value
                            var xProfileQuery = "INSERT INTO wp2_bp_xprofile_data (id, field_id, user_id, value, last_updated) " + "VALUES (null," + fieldIds[id] + "," + userId + ",'" + fieldValues[id] + "','" + new Date().toISOString() + "')";
                        }
                        ;
                        _this.db.query_db(xProfileQuery).then(function (data) {
                            xProfilePromise.resolve(data);
                        });
                    });
                    Q.all(_promisesList).then(function (values) {
                        results['username'] = username;
                        results['email'] = email;
                        results['display_name'] = display_name;
                        results['years'] = years;
                        results['country'] = country;
                        results['school'] = school;
                        results['ob'] = ob;
                        registerPromise.resolve(results);
                    });
                }
                ;
            });
        });
        return registerPromise.promise;
    };
    AuthService.prototype.login = function (username, password) {
        var loginPromise = Q.defer();
        this.db.query('user/generate_auth_cookie/?username=' + username + '&password=' + password).then(function (results) {
            if (results['status'] == 'error') {
                if (results['error'] == "Invalid username and/or password.") {
                    results['code'] = '100';
                }
                ;
            }
            ;
            loginPromise.resolve(results);
        });
        return loginPromise.promise;
    };
    AuthService.prototype.fbLogin = function (token) {
        return this.db.query('user/fb_connect/?access_token=' + token);
    };
    AuthService.prototype.isAuthorized = function (cookie) {
        return this.db.query('user/validate_auth_cookie/?cookie=' + cookie);
    };
    AuthService.prototype.getUserInfo = function (userId) {
        return this.db.query('user/get_userinfo/?user_id=' + userId);
    };
    AuthService.prototype.getUserAvatarUrl = function (userId) {
        var deferred = Q.defer();
        var query = "SELECT meta_value FROM wp2_usermeta WHERE user_id=" + userId + " AND meta_key='kleo_fb_picture' ";
        try {
            this.db.query_db(query).then(function (response) {
                console.log('getUserAvatarUrl response ', JSON.stringify(response));
                if (response.length > 0) {
                    deferred.resolve(new UserAvatar(response[0].meta_value));
                }
                else {
                    deferred.resolve(new UserAvatar(''));
                }
            });
        }
        catch (error) {
            console.error('getUserAvatarUrl error ', error);
        }
        return deferred.promise;
    };
    AuthService.prototype.getUserAvatar = function (userId, type) {
        return this.db.query('user/get_avatar/?user_id=' + userId + '&type=' + type);
    };
    AuthService.prototype.resetPassword = function (username) {
        return this.db.query('user/retrieve_password/?user_login=' + username);
    };
    return AuthService;
})();
exports.AuthService = AuthService;
;

//# sourceMappingURL=data:application/json;base64,