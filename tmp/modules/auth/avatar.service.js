/// <reference path="../../index.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var hapiServer = require('../../index');
var dbConn = connection.service;
var AvatarService = (function () {
    function AvatarService() {
        this.db = connection.service;
        if (!hapiServer.server.methods.getCachedAvatar) {
            hapiServer.server.method('getCachedAvatar', this.getUserAvatarUrl, {
                cache: {
                    cache: 'mongoCache',
                    expiresIn: 300 * 1000,
                    generateTimeout: 10000
                }
            });
        }
    }
    AvatarService.prototype.getUserAvatarUrl = function (userId, type, next) {
        dbConn.query('user/get_avatar/?user_id=' + userId + '&type=' + type).then(function (response) {
            if (response['error']) {
                next(response['error'], null);
            }
            else {
                next(null, response);
            }
        });
    };
    AvatarService.prototype.getUserAvatar = function (userId, type) {
        var deferred = Q.defer();
        hapiServer.server.methods.getCachedAvatar(userId, type, function (err, response) {
            if (err) {
                console.error('avatarService > getUserAvatar ERROR ', err);
                deferred.resolve(err);
                return err;
            }
            deferred.resolve(response);
        });
        return deferred.promise;
    };
    return AvatarService;
})();
exports.AvatarService = AvatarService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYXV0aC9hdmF0YXIuc2VydmljZS50cyJdLCJuYW1lcyI6WyJBdmF0YXJTZXJ2aWNlIiwiQXZhdGFyU2VydmljZS5jb25zdHJ1Y3RvciIsIkF2YXRhclNlcnZpY2UuZ2V0VXNlckF2YXRhclVybCIsIkF2YXRhclNlcnZpY2UuZ2V0VXNlckF2YXRhciJdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDO0FBRXZDLElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUM7QUFDaEUsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRXhDLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7QUFFaEMsSUFBYSxhQUFhO0lBR3RCQSxTQUhTQSxhQUFhQTtRQUlsQkMsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDN0JBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxpQkFBaUJBLEVBQUVBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUE7Z0JBQy9EQSxLQUFLQSxFQUFFQTtvQkFDSEEsS0FBS0EsRUFBRUEsWUFBWUE7b0JBQ25CQSxTQUFTQSxFQUFFQSxHQUFHQSxHQUFHQSxJQUFJQTtvQkFDckJBLGVBQWVBLEVBQUVBLEtBQUtBO2lCQUN6QkE7YUFDSkEsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREQsd0NBQWdCQSxHQUFoQkEsVUFBaUJBLE1BQU1BLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBO1FBQy9CRSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSwyQkFBMkJBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLENBQy9EQSxJQUFJQSxDQUFDQSxVQUFVQSxRQUFRQTtZQUNwQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO0lBQ1hBLENBQUNBO0lBRURGLHFDQUFhQSxHQUFiQSxVQUFjQSxNQUFNQSxFQUFFQSxJQUFJQTtRQUN0QkcsSUFBSUEsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDekJBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLGVBQWVBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLEVBQUVBLFVBQVVBLEdBQUdBLEVBQUVBLFFBQVFBO1lBQzNFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDM0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNmLENBQUM7WUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFDSEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRUxILG9CQUFDQTtBQUFEQSxDQXhDQSxBQXdDQ0EsSUFBQTtBQXhDWSxxQkFBYSxHQUFiLGFBd0NaLENBQUEiLCJmaWxlIjoibW9kdWxlcy9hdXRoL2F2YXRhci5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2luZGV4LnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbmltcG9ydCBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UnKTtcbnZhciBoYXBpU2VydmVyID0gcmVxdWlyZSgnLi4vLi4vaW5kZXgnKTtcblxudmFyIGRiQ29ubiA9IGNvbm5lY3Rpb24uc2VydmljZTtcblxuZXhwb3J0IGNsYXNzIEF2YXRhclNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGI7XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuZGIgPSBjb25uZWN0aW9uLnNlcnZpY2U7IFxuICAgICAgICBpZiAoIWhhcGlTZXJ2ZXIuc2VydmVyLm1ldGhvZHMuZ2V0Q2FjaGVkQXZhdGFyKSB7XG4gICAgICAgICAgICBoYXBpU2VydmVyLnNlcnZlci5tZXRob2QoJ2dldENhY2hlZEF2YXRhcicsIHRoaXMuZ2V0VXNlckF2YXRhclVybCwge1xuICAgICAgICAgICAgICAgIGNhY2hlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbW9uZ29DYWNoZScsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNJbjogMzAwICogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUaW1lb3V0OiAxMDAwMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VXNlckF2YXRhclVybCh1c2VySWQsIHR5cGUsIG5leHQpIDogdm9pZCB7XG4gICAgICAgIGRiQ29ubi5xdWVyeSgndXNlci9nZXRfYXZhdGFyLz91c2VyX2lkPScgKyB1c2VySWQgKyAnJnR5cGU9JyArIHR5cGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VbJ2Vycm9yJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dChyZXNwb25zZVsnZXJyb3InXSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dChudWxsLCByZXNwb25zZSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRVc2VyQXZhdGFyKHVzZXJJZCwgdHlwZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgICAgICBoYXBpU2VydmVyLnNlcnZlci5tZXRob2RzLmdldENhY2hlZEF2YXRhcih1c2VySWQsIHR5cGUsIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignYXZhdGFyU2VydmljZSA+IGdldFVzZXJBdmF0YXIgRVJST1IgJywgZXJyKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9