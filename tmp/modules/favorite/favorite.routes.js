'use strict';
///<reference path="../../../typings/tsd.d.ts" />
/// <reference path="./favorite.service.ts" />
var service = require('./favorite.service');
var Joi = require('joi');
var FavoriteService = new service.FavoriteService();
var _prefix = '/favorite';
var favorite = [
    {
        method: 'GET',
        path: _prefix + '/{userId}',
        handler: function (request, reply) {
            FavoriteService.showFavorite(request.params.userId).then(function (data) {
                reply({ favorite: data });
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.number().integer()
                }
            },
            description: 'Show favorite Products from matched UserID',
            tags: ['favorite']
        }
    },
    {
        method: 'POST',
        path: _prefix,
        handler: function (request, reply) {
            FavoriteService.createFavorite(request.payload.userId, request.payload.productId).then(function (data) {
                reply({ data: data });
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.number().integer(),
                    productId: Joi.number().integer()
                }
            },
            description: 'Create a favorite ProductID to matched UserID',
            tags: ['favorite']
        }
    },
    {
        method: 'DELETE',
        path: _prefix,
        handler: function (request, reply) {
            FavoriteService.removeFavorite(request.payload.userId, request.payload.productId).then(function (data) {
                reply({ data: data });
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.number().integer(),
                    productId: Joi.number().integer()
                }
            },
            description: 'Delete ProductID favorite from matched UserID',
            tags: ['favorite']
        }
    }
];
module.exports = favorite;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZmF2b3JpdGUvZmF2b3JpdGUucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLEFBR0EsaURBSGlEO0FBQ2pELDhDQUE4QztBQUU5QyxJQUFPLE9BQU8sV0FBVyxvQkFBb0IsQ0FBQyxDQUFDO0FBQy9DLElBQU8sR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0FBRTVCLElBQUksZUFBZSxHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3BELElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUMxQixJQUFJLFFBQVEsR0FBRztJQUNYO1FBQ0ksTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLFdBQVc7UUFDM0IsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsZUFBZSxDQUFDLFlBQVksQ0FDeEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDckIsSUFBSSxDQUFDLFVBQUMsSUFBSTtnQkFDUCxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO2lCQUNqQzthQUNKO1lBQ0QsV0FBVyxFQUFFLDRDQUE0QztZQUN6RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDckI7S0FDSjtJQUNEO1FBQ0ksTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsT0FBTztRQUNiLE9BQU8sRUFBRSxVQUFTLE9BQU8sRUFBRSxLQUFLO1lBQzVCLGVBQWUsQ0FBQyxjQUFjLENBQzFCLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUN0QixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUN6QixJQUFJLENBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUssQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO29CQUM5QixTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtpQkFDcEM7YUFDSjtZQUNELFdBQVcsRUFBRSwrQ0FBK0M7WUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQ3JCO0tBQ0o7SUFDRDtRQUNJLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsZUFBZSxDQUFDLGNBQWMsQ0FDMUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQ3pCLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQ1AsS0FBSyxDQUFDLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNKLFFBQVEsRUFBRTtnQkFDTixLQUFLLEVBQUU7b0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUU7b0JBQzlCLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO2lCQUNwQzthQUNKO1lBQ0QsV0FBVyxFQUFFLCtDQUErQztZQUM1RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDckI7S0FDSjtDQUNKLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2Zhdm9yaXRlL2Zhdm9yaXRlLnJvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9mYXZvcml0ZS5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IHNlcnZpY2UgPSByZXF1aXJlKCcuL2Zhdm9yaXRlLnNlcnZpY2UnKTtcbmltcG9ydCBKb2kgPSByZXF1aXJlKCdqb2knKTtcblxudmFyIEZhdm9yaXRlU2VydmljZSA9IG5ldyBzZXJ2aWNlLkZhdm9yaXRlU2VydmljZSgpO1xudmFyIF9wcmVmaXggPSAnL2Zhdm9yaXRlJztcbnZhciBmYXZvcml0ZSA9IFtcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL3t1c2VySWR9JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEZhdm9yaXRlU2VydmljZS5zaG93RmF2b3JpdGUoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMudXNlcklkKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KHtmYXZvcml0ZTogZGF0YSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU2hvdyBmYXZvcml0ZSBQcm9kdWN0cyBmcm9tIG1hdGNoZWQgVXNlcklEJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnZmF2b3JpdGUnXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBfcHJlZml4LFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgRmF2b3JpdGVTZXJ2aWNlLmNyZWF0ZUZhdm9yaXRlKFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnByb2R1Y3RJZClcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXBseSh7IGRhdGEgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogSm9pLm51bWJlcigpLmludGVnZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGEgZmF2b3JpdGUgUHJvZHVjdElEIHRvIG1hdGNoZWQgVXNlcklEJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnZmF2b3JpdGUnXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgIHBhdGg6IF9wcmVmaXgsXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlcXVlc3QsIHJlcGx5KSB7XG4gICAgICAgICAgICBGYXZvcml0ZVNlcnZpY2UucmVtb3ZlRmF2b3JpdGUoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnVzZXJJZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQucHJvZHVjdElkKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KHsgZGF0YSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdEZWxldGUgUHJvZHVjdElEIGZhdm9yaXRlIGZyb20gbWF0Y2hlZCBVc2VySUQnLFxuICAgICAgICAgICAgdGFnczogWydmYXZvcml0ZSddXG4gICAgICAgIH1cbiAgICB9XG5dXG5cbm1vZHVsZS5leHBvcnRzID0gZmF2b3JpdGU7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=