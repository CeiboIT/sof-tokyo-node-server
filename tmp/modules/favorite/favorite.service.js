/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var FavoriteService = (function () {
    function FavoriteService() {
        this.db = connection.service;
    }
    FavoriteService.prototype.showFavorite = function (userId) {
        var _promise = Q.defer();
        var query = "SELECT * FROM " + "( " + "SELECT post_id " + "FROM wp2_user_favorites " + "WHERE user_id=" + userId + ") list " + "JOIN " + "( " + "SELECT * FROM " + "( " + "SELECT ID as post_id, post_author, post_title " + "FROM wp2_posts " + ") posts " + "JOIN " + "( " + "SELECT ID as user_id, display_name " + "FROM wp2_users " + ") users " + "ON posts.post_author = users.user_id " + ") data " + "ON list.post_id = data.post_id";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    FavoriteService.prototype.createFavorite = function (userId, productId) {
        var _promise = Q.defer();
        var query = "INSERT INTO wp2_user_favorites (post_id, user_id) " + "VALUES (" + productId + "," + userId + ") " + "ON DUPLICATE KEY UPDATE user_id=user_id";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    FavoriteService.prototype.removeFavorite = function (userId, productId) {
        var _promise = Q.defer();
        var query = "DELETE FROM wp2_user_favorites " + "WHERE post_id=" + productId + " AND user_id=" + userId + " " + "LIMIT 1";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    return FavoriteService;
})();
exports.FavoriteService = FavoriteService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZmF2b3JpdGUvZmF2b3JpdGUuc2VydmljZS50cyJdLCJuYW1lcyI6WyJGYXZvcml0ZVNlcnZpY2UiLCJGYXZvcml0ZVNlcnZpY2UuY29uc3RydWN0b3IiLCJGYXZvcml0ZVNlcnZpY2Uuc2hvd0Zhdm9yaXRlIiwiRmF2b3JpdGVTZXJ2aWNlLmNyZWF0ZUZhdm9yaXRlIiwiRmF2b3JpdGVTZXJ2aWNlLnJlbW92ZUZhdm9yaXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRTVELElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUE7QUFVL0QsSUFBYSxlQUFlO0lBQTVCQSxTQUFhQSxlQUFlQTtRQUNoQkMsT0FBRUEsR0FBR0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUEyRHBDQSxDQUFDQTtJQXpER0Qsc0NBQVlBLEdBQVpBLFVBQWFBLE1BQU1BO1FBQ2ZFLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ3pCQSxJQUFJQSxLQUFLQSxHQUFHQSxnQkFBZ0JBLEdBQ1pBLElBQUlBLEdBQ0pBLGlCQUFpQkEsR0FDakJBLDBCQUEwQkEsR0FDMUJBLGdCQUFnQkEsR0FBR0EsTUFBTUEsR0FDekJBLFNBQVNBLEdBQ2JBLE9BQU9BLEdBQ0hBLElBQUlBLEdBQ0pBLGdCQUFnQkEsR0FDWkEsSUFBSUEsR0FDSkEsZ0RBQWdEQSxHQUNoREEsaUJBQWlCQSxHQUNqQkEsVUFBVUEsR0FDZEEsT0FBT0EsR0FDSEEsSUFBSUEsR0FDSkEscUNBQXFDQSxHQUNyQ0EsaUJBQWlCQSxHQUNqQkEsVUFBVUEsR0FDVkEsdUNBQXVDQSxHQUMzQ0EsU0FBU0EsR0FDYkEsZ0NBQWdDQSxDQUFDQTtRQUM3Q0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FDbEJBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzNCQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVQQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFREYsd0NBQWNBLEdBQWRBLFVBQWVBLE1BQU1BLEVBQUVBLFNBQVNBO1FBQzVCRyxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsS0FBS0EsR0FBR0Esb0RBQW9EQSxHQUNwREEsVUFBVUEsR0FBR0EsU0FBU0EsR0FBR0EsR0FBR0EsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FDNUNBLHlDQUF5Q0EsQ0FBQ0E7UUFDdERBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQ2xCQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFUEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURILHdDQUFjQSxHQUFkQSxVQUFlQSxNQUFNQSxFQUFFQSxTQUFTQTtRQUM1QkksSUFBSUEsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDekJBLElBQUlBLEtBQUtBLEdBQUdBLGlDQUFpQ0EsR0FDakNBLGdCQUFnQkEsR0FBR0EsU0FBU0EsR0FBR0EsZUFBZUEsR0FBR0EsTUFBTUEsR0FBR0EsR0FBR0EsR0FDN0RBLFNBQVNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUNsQkEsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFDUEEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLENBQUNBLENBQUNBLENBQUNBO1FBRVBBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVMSixzQkFBQ0E7QUFBREEsQ0E1REEsQUE0RENBLElBQUE7QUE1RFksdUJBQWUsR0FBZixlQTREWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2Zhdm9yaXRlL2Zhdm9yaXRlLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UudHNcIiAvPlxuXG5pbXBvcnQgUSA9IHJlcXVpcmUoXCJxXCIpO1xuaW1wb3J0IGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZScpXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZhdm9yaXRlU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgc2hvd0Zhdm9yaXRlKHVzZXJJZCk6IFEuSVByb21pc2U8e30+O1xuICAgIC8vIFBPU1RcbiAgICBjcmVhdGVGYXZvcml0ZSh1c2VySWQsIHByb2R1Y3RJZCk6IFEuSVByb21pc2U8e30+O1xuICAgIHJlbW92ZUZhdm9yaXRlKHVzZXJJZCwgcHJvZHVjdElkKTogUS5JUHJvbWlzZTx7fT47XG59XG5cbmV4cG9ydCBjbGFzcyBGYXZvcml0ZVNlcnZpY2UgaW1wbGVtZW50cyBJRmF2b3JpdGVTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGRiID0gY29ubmVjdGlvbi5zZXJ2aWNlO1xuXG4gICAgc2hvd0Zhdm9yaXRlKHVzZXJJZCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB2YXIgcXVlcnkgPSBcIlNFTEVDVCAqIEZST00gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU0VMRUNUIHBvc3RfaWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJGUk9NIHdwMl91c2VyX2Zhdm9yaXRlcyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHVzZXJfaWQ9XCIgKyB1c2VySWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIpIGxpc3QgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU0VMRUNUICogRlJPTSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlNFTEVDVCBJRCBhcyBwb3N0X2lkLCBwb3N0X2F1dGhvciwgcG9zdF90aXRsZSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGUk9NIHdwMl9wb3N0cyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpIHBvc3RzIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSk9JTiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlNFTEVDVCBJRCBhcyB1c2VyX2lkLCBkaXNwbGF5X25hbWUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRlJPTSB3cDJfdXNlcnMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKSB1c2VycyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJPTiBwb3N0cy5wb3N0X2F1dGhvciA9IHVzZXJzLnVzZXJfaWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIpIGRhdGEgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIk9OIGxpc3QucG9zdF9pZCA9IGRhdGEucG9zdF9pZFwiO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgY3JlYXRlRmF2b3JpdGUodXNlcklkLCBwcm9kdWN0SWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gXCJJTlNFUlQgSU5UTyB3cDJfdXNlcl9mYXZvcml0ZXMgKHBvc3RfaWQsIHVzZXJfaWQpIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJWQUxVRVMgKFwiICsgcHJvZHVjdElkICsgXCIsXCIgKyB1c2VySWQgKyBcIikgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIHVzZXJfaWQ9dXNlcl9pZFwiO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgcmVtb3ZlRmF2b3JpdGUodXNlcklkLCBwcm9kdWN0SWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gXCJERUxFVEUgRlJPTSB3cDJfdXNlcl9mYXZvcml0ZXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHBvc3RfaWQ9XCIgKyBwcm9kdWN0SWQgKyBcIiBBTkQgdXNlcl9pZD1cIiArIHVzZXJJZCArIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMSU1JVCAxXCI7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIocXVlcnkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=