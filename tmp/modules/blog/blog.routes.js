'use strict';
///<reference path="../../../typings/tsd.d.ts" />
///<reference path="./categories.service.ts" />
var service = require('./blog.service');
var Joi = require('joi');
var BlogService = new service.BlogService();
var _prefix = '/blog';
var blog = [
    {
        method: 'GET',
        path: _prefix + '/banners',
        handler: function (request, reply) {
            BlogService.getBanners().then(function (data) {
                reply({ banners: data });
            });
        },
        config: {
            description: 'Retrieve all Banners',
            tags: ['blog']
        }
    },
    {
        method: 'GET',
        path: _prefix + '/banners/banner/{bannerId}',
        handler: function (request, reply) {
            BlogService.getBanner(request.params.bannerId).then(function (data) {
                reply({ banner: data });
            });
        },
        config: {
            validate: {
                query: {
                    bannerId: Joi.number().integer()
                }
            },
            description: 'Retrieve Banner with matched BannerID',
            tags: ['blog']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/banners',
        handler: function (request, reply) {
            BlogService.createBanner(request.payload.post_author, request.payload.post_content, request.payload.post_title, request.payload.post_name).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    banner: Joi.array()
                }
            },
            description: 'Create a Banner object',
            tags: ['blog']
        }
    }
];
module.exports = blog;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYmxvZy9ibG9nLnJvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixBQUlBLGlEQUppRDtBQUNqRCwrQ0FBK0M7QUFHL0MsSUFBTyxPQUFPLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztBQUMzQyxJQUFPLEdBQUcsV0FBVyxLQUFLLENBQUMsQ0FBQztBQUU1QixJQUFJLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM1QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDdEIsSUFBSSxJQUFJLEdBQUc7SUFDUDtRQUNJLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLE9BQU8sR0FBRyxVQUFVO1FBQzFCLE9BQU8sRUFBRSxVQUFTLE9BQU8sRUFBRSxLQUFLO1lBQzVCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLFVBQUMsSUFBSTtnQkFDUCxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixXQUFXLEVBQUUsc0JBQXNCO1lBQ25DLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztTQUNqQjtLQUNKO0lBQ0Q7UUFDSSxNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBRSxPQUFPLEdBQUcsNEJBQTRCO1FBQzVDLE9BQU8sRUFBRSxVQUFTLE9BQU8sRUFBRSxLQUFLO1lBQzVCLFdBQVcsQ0FBQyxTQUFTLENBQ2pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQ3ZCLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQ1AsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDO1FBQ0QsTUFBTSxFQUFFO1lBQ0osUUFBUSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDSCxRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtpQkFDbkM7YUFDSjtZQUNELFdBQVcsRUFBRSx1Q0FBdUM7WUFDcEQsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ2pCO0tBQ0o7SUFDRDtRQUNJLE1BQU0sRUFBRSxNQUFNO1FBQ1YsSUFBSSxFQUFFLE9BQU8sR0FBRyxVQUFVO1FBQ3RCLE9BQU8sRUFBRSxVQUFTLE9BQU8sRUFBRSxLQUFLO1lBQzVCLFdBQVcsQ0FBQyxZQUFZLENBQ3BCLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksRUFDNUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQzFCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQ3pCLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQ1AsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQztRQUNULE1BQU0sRUFBRTtZQUNKLFFBQVEsRUFBRTtnQkFDTixLQUFLLEVBQUU7b0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUU7aUJBQ3RCO2FBQ0o7WUFDRCxXQUFXLEVBQUUsd0JBQXdCO1lBQ2pDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztTQUNyQjtLQUNKO0NBQ0osQ0FBQTtBQUdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvYmxvZy9ibG9nLnJvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8vPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy88cmVmZXJlbmNlIHBhdGg9XCIuL2NhdGVnb3JpZXMuc2VydmljZS50c1wiIC8+XG5cblxuaW1wb3J0IHNlcnZpY2UgPSByZXF1aXJlKCcuL2Jsb2cuc2VydmljZScpO1xuaW1wb3J0IEpvaSA9IHJlcXVpcmUoJ2pvaScpO1xuXG52YXIgQmxvZ1NlcnZpY2UgPSBuZXcgc2VydmljZS5CbG9nU2VydmljZSgpO1xudmFyIF9wcmVmaXggPSAnL2Jsb2cnO1xudmFyIGJsb2cgPSBbXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9iYW5uZXJzJyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEJsb2dTZXJ2aWNlLmdldEJhbm5lcnMoKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KHsgYmFubmVyczogZGF0YSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmV0cmlldmUgYWxsIEJhbm5lcnMnLFxuICAgICAgICAgICAgdGFnczogWydibG9nJ11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9iYW5uZXJzL2Jhbm5lci97YmFubmVySWR9JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEJsb2dTZXJ2aWNlLmdldEJhbm5lcihcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtcy5iYW5uZXJJZClcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXBseSh7IGJhbm5lcjogZGF0YSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFubmVySWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdSZXRyaWV2ZSBCYW5uZXIgd2l0aCBtYXRjaGVkIEJhbm5lcklEJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnYmxvZyddXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9iYW5uZXJzJyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgICAgICAgICBCbG9nU2VydmljZS5jcmVhdGVCYW5uZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQucG9zdF9hdXRob3IsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQucG9zdF9jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnBvc3RfdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQucG9zdF9uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIGJhbm5lcjogSm9pLmFycmF5KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDcmVhdGUgYSBCYW5uZXIgb2JqZWN0JyxcbiAgICAgICAgICAgICAgICB0YWdzOiBbJ2Jsb2cnXVxuICAgICAgICB9XG4gICAgfVxuXVxuXG5cbm1vZHVsZS5leHBvcnRzID0gYmxvZztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==