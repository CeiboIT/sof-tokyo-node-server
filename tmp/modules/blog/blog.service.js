/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var BlogService = (function () {
    function BlogService() {
        this.db = connection.service;
    }
    BlogService.prototype.getBanners = function () {
        var _promise = Q.defer();
        var query = "SELECT * FROM `wp2_posts` " + "JOIN (SELECT ID as user_id, display_name FROM wp2_users ) AS table2 ON `wp2_posts`.`post_author` = table2.user_id " + "WHERE `wp2_posts`.`post_type` = 'info' AND `wp2_posts`.`post_status` = 'publish'";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    BlogService.prototype.getBanner = function (bannerId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT * FROM `wp2_posts` " + "INNER JOIN `wp2_users` ON `wp2_posts`.`post_author` = `wp2_users`.`ID` " + "WHERE `wp2_posts`.`post_type` = 'info' AND `wp2_posts`.`post_status` = 'publish' AND `wp2_posts`.`ID`=" + bannerId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    BlogService.prototype.createBanner = function (post_author, post_content, post_title, post_name) {
        var _this = this;
        var _promise = Q.defer();
        var now = new Date();
        var query = "INSERT INTO wp2_posts (ID, post_author, post_content, post_title, post_status, comment_status, ping_status, post_name, post_type, post_date)" + " VALUES (NULL, '" + post_author + "', '" + post_content + "', '" + post_title + "', 'publish', 'open', 'open', '" + post_name + "', 'info', '" + now.toISOString() + "')";
        this.db.query_db(query).then(function (data) {
            var guid = "http://sof.tokyo/?p=" + data['insertId'];
            var query2 = "UPDATE wp2_posts SET guid = '" + guid + "' WHERE ID = " + data['insertId'];
            _this.db.query_db(query2).then(function (data2) {
                _promise.resolve(data);
            });
        });
        return _promise.promise;
    };
    return BlogService;
})();
exports.BlogService = BlogService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYmxvZy9ibG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQmxvZ1NlcnZpY2UiLCJCbG9nU2VydmljZS5jb25zdHJ1Y3RvciIsIkJsb2dTZXJ2aWNlLmdldEJhbm5lcnMiLCJCbG9nU2VydmljZS5nZXRCYW5uZXIiLCJCbG9nU2VydmljZS5jcmVhdGVCYW5uZXIiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBTyxVQUFVLFdBQVcsa0NBQWtDLENBQUMsQ0FBQTtBQVkvRCxJQUFhLFdBQVc7SUFBeEJBLFNBQWFBLFdBQVdBO1FBQ1pDLE9BQUVBLEdBQUdBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBO0lBNENwQ0EsQ0FBQ0E7SUExQ0dELGdDQUFVQSxHQUFWQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsS0FBS0EsR0FBR0EsNEJBQTRCQSxHQUM1QkEsb0hBQW9IQSxHQUNwSEEsa0ZBQWtGQSxDQUFDQTtRQUMvRkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FDbEJBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzNCQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFREYsK0JBQVNBLEdBQVRBLFVBQVVBLFFBQVFBO1FBQ2RHLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSw0QkFBNEJBLEdBQzVCQSx5RUFBeUVBLEdBQ3pFQSx3R0FBd0dBLEdBQUdBLFFBQVFBLENBQUNBLENBQ2hJQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURILGtDQUFZQSxHQUFaQSxVQUFhQSxXQUFXQSxFQUFFQSxZQUFZQSxFQUFFQSxVQUFVQSxFQUFFQSxTQUFTQTtRQUE3REksaUJBaUJDQTtRQWhCR0EsSUFBSUEsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDekJBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBO1FBQ3JCQSxJQUFJQSxLQUFLQSxHQUFHQSw4SUFBOElBLEdBQzlJQSxrQkFBa0JBLEdBQUdBLFdBQVdBLEdBQUdBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLEdBQUdBLFVBQVVBLEdBQUdBLGlDQUFpQ0EsR0FBR0EsU0FBU0EsR0FBR0EsY0FBY0EsR0FBR0EsR0FBR0EsQ0FBQ0EsV0FBV0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFdkxBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQ2xCQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxJQUFJQSxJQUFJQSxHQUFHQSxzQkFBc0JBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBQ3JEQSxJQUFJQSxNQUFNQSxHQUFHQSwrQkFBK0JBLEdBQUdBLElBQUlBLEdBQUdBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBRXpGQSxLQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUNuQkEsSUFBSUEsQ0FBQ0EsVUFBQ0EsS0FBS0E7Z0JBQ1JBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQzNCQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNWQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFTEosa0JBQUNBO0FBQURBLENBN0NBLEFBNkNDQSxJQUFBO0FBN0NZLG1CQUFXLEdBQVgsV0E2Q1osQ0FBQTtBQUFBLENBQUMiLCJmaWxlIjoibW9kdWxlcy9ibG9nL2Jsb2cuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBRID0gcmVxdWlyZShcInFcIik7XG5pbXBvcnQgY29ubmVjdGlvbiA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlJylcblxuZXhwb3J0IGludGVyZmFjZSBJQmxvZ1NlcnZpY2Uge1xuICAgIC8vIEdFVFxuICAgIGdldEJhbm5lcnMoKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0QmFubmVyKGJhbm5lcklkKTogUS5JUHJvbWlzZTx7fT47XG5cbiAgICAvLyBQT1NUXG4gICAgY3JlYXRlQmFubmVyKHBvc3RfYXV0aG9yLCBwb3N0X2NvbnRlbnQsIHBvc3RfdGl0bGUsIHBvc3RfbmFtZSk6IFEuSVByb21pc2U8e30+O1xufVxuXG5cbmV4cG9ydCBjbGFzcyBCbG9nU2VydmljZSBpbXBsZW1lbnRzIElCbG9nU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkYiA9IGNvbm5lY3Rpb24uc2VydmljZTtcblxuICAgIGdldEJhbm5lcnMoKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHZhciBxdWVyeSA9IFwiU0VMRUNUICogRlJPTSBgd3AyX3Bvc3RzYCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiAoU0VMRUNUIElEIGFzIHVzZXJfaWQsIGRpc3BsYXlfbmFtZSBGUk9NIHdwMl91c2VycyApIEFTIHRhYmxlMiBPTiBgd3AyX3Bvc3RzYC5gcG9zdF9hdXRob3JgID0gdGFibGUyLnVzZXJfaWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGB3cDJfcG9zdHNgLmBwb3N0X3R5cGVgID0gJ2luZm8nIEFORCBgd3AyX3Bvc3RzYC5gcG9zdF9zdGF0dXNgID0gJ3B1Ymxpc2gnXCI7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIocXVlcnkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRCYW5uZXIoYmFubmVySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihcIlNFTEVDVCAqIEZST00gYHdwMl9wb3N0c2AgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIFwiSU5ORVIgSk9JTiBgd3AyX3VzZXJzYCBPTiBgd3AyX3Bvc3RzYC5gcG9zdF9hdXRob3JgID0gYHdwMl91c2Vyc2AuYElEYCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBgd3AyX3Bvc3RzYC5gcG9zdF90eXBlYCA9ICdpbmZvJyBBTkQgYHdwMl9wb3N0c2AuYHBvc3Rfc3RhdHVzYCA9ICdwdWJsaXNoJyBBTkQgYHdwMl9wb3N0c2AuYElEYD1cIiArIGJhbm5lcklkKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgY3JlYXRlQmFubmVyKHBvc3RfYXV0aG9yLCBwb3N0X2NvbnRlbnQsIHBvc3RfdGl0bGUsIHBvc3RfbmFtZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gXCJJTlNFUlQgSU5UTyB3cDJfcG9zdHMgKElELCBwb3N0X2F1dGhvciwgcG9zdF9jb250ZW50LCBwb3N0X3RpdGxlLCBwb3N0X3N0YXR1cywgY29tbWVudF9zdGF0dXMsIHBpbmdfc3RhdHVzLCBwb3N0X25hbWUsIHBvc3RfdHlwZSwgcG9zdF9kYXRlKVwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgVkFMVUVTIChOVUxMLCAnXCIgKyBwb3N0X2F1dGhvciArIFwiJywgJ1wiICsgcG9zdF9jb250ZW50ICsgXCInLCAnXCIgKyBwb3N0X3RpdGxlICsgXCInLCAncHVibGlzaCcsICdvcGVuJywgJ29wZW4nLCAnXCIgKyBwb3N0X25hbWUgKyBcIicsICdpbmZvJywgJ1wiICsgbm93LnRvSVNPU3RyaW5nKCkgKyBcIicpXCI7XG5cbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihxdWVyeSlcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGd1aWQgPSBcImh0dHA6Ly9zb2YudG9reW8vP3A9XCIgKyBkYXRhWydpbnNlcnRJZCddO1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeTIgPSBcIlVQREFURSB3cDJfcG9zdHMgU0VUIGd1aWQgPSAnXCIgKyBndWlkICsgXCInIFdIRVJFIElEID0gXCIgKyBkYXRhWydpbnNlcnRJZCddO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihxdWVyeTIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==