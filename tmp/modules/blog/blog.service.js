/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var BlogService = (function () {
    function BlogService() {
        this.db = connection.service;
    }
    BlogService.prototype.getBanners = function () {
        var _promise = Q.defer();
        this.db.query_db("SELECT * FROM `wp2_posts` " + "INNER JOIN `wp2_users` ON `wp2_posts`.`post_author` = `wp2_users`.`ID` " + "WHERE `wp2_posts`.`post_type` = 'info' AND `wp2_posts`.`post_status` = 'publish'").then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    BlogService.prototype.getBanner = function (bannerId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT * FROM `wp2_posts` " + "INNER JOIN `wp2_users` ON `wp2_posts`.`post_author` = `wp2_users`.`ID` " + "WHERE `wp2_posts`.`post_type` = 'info' AND `wp2_posts`.`post_status` = 'publish' AND `wp2_posts`.`ID`=" + bannerId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    BlogService.prototype.createBanner = function (post_author, post_content, post_title, post_name) {
        var _this = this;
        var _promise = Q.defer();
        var now = new Date();
        var query = "INSERT INTO wp2_posts (ID, post_author, post_content, post_title, post_status, comment_status, ping_status, post_name, post_type, post_date)" + " VALUES (NULL, '" + post_author + "', '" + post_content + "', '" + post_title + "', 'publish', 'open', 'open', '" + post_name + "', 'info', '" + now.toISOString() + "')";
        this.db.query_db(query).then(function (data) {
            var guid = "http://sof.tokyo/?p=" + data['insertId'];
            var query2 = "UPDATE wp2_posts SET guid = '" + guid + "' WHERE ID = " + data['insertId'];
            _this.db.query_db(query2).then(function (data2) {
                _promise.resolve(data);
            });
        });
        return _promise.promise;
    };
    return BlogService;
})();
exports.BlogService = BlogService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYmxvZy9ibG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiQmxvZ1NlcnZpY2UiLCJCbG9nU2VydmljZS5jb25zdHJ1Y3RvciIsIkJsb2dTZXJ2aWNlLmdldEJhbm5lcnMiLCJCbG9nU2VydmljZS5nZXRCYW5uZXIiLCJCbG9nU2VydmljZS5jcmVhdGVCYW5uZXIiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBTyxVQUFVLFdBQVcsa0NBQWtDLENBQUMsQ0FBQTtBQVkvRCxJQUFhLFdBQVc7SUFBeEJBLFNBQWFBLFdBQVdBO1FBQ1pDLE9BQUVBLEdBQUdBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBO0lBNENwQ0EsQ0FBQ0E7SUExQ0dELGdDQUFVQSxHQUFWQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsNEJBQTRCQSxHQUM1QkEseUVBQXlFQSxHQUN6RUEsa0ZBQWtGQSxDQUFDQSxDQUMvRkEsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFDUEEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERiwrQkFBU0EsR0FBVEEsVUFBVUEsUUFBUUE7UUFDZEcsSUFBSUEsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLDRCQUE0QkEsR0FDNUJBLHlFQUF5RUEsR0FDekVBLHdHQUF3R0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FDaElBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzNCQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFREgsa0NBQVlBLEdBQVpBLFVBQWFBLFdBQVdBLEVBQUVBLFlBQVlBLEVBQUVBLFVBQVVBLEVBQUVBLFNBQVNBO1FBQTdESSxpQkFpQkNBO1FBaEJHQSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDckJBLElBQUlBLEtBQUtBLEdBQUdBLDhJQUE4SUEsR0FDOUlBLGtCQUFrQkEsR0FBR0EsV0FBV0EsR0FBR0EsTUFBTUEsR0FBR0EsWUFBWUEsR0FBR0EsTUFBTUEsR0FBR0EsVUFBVUEsR0FBR0EsaUNBQWlDQSxHQUFHQSxTQUFTQSxHQUFHQSxjQUFjQSxHQUFHQSxHQUFHQSxDQUFDQSxXQUFXQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUV2TEEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FDbEJBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLElBQUlBLElBQUlBLEdBQUdBLHNCQUFzQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFDckRBLElBQUlBLE1BQU1BLEdBQUdBLCtCQUErQkEsR0FBR0EsSUFBSUEsR0FBR0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFFekZBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQ25CQSxJQUFJQSxDQUFDQSxVQUFDQSxLQUFLQTtnQkFDUkEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ1ZBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVMSixrQkFBQ0E7QUFBREEsQ0E3Q0EsQUE2Q0NBLElBQUE7QUE3Q1ksbUJBQVcsR0FBWCxXQTZDWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2Jsb2cvYmxvZy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbmltcG9ydCBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UnKVxuXG5leHBvcnQgaW50ZXJmYWNlIElCbG9nU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgZ2V0QmFubmVycygpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRCYW5uZXIoYmFubmVySWQpOiBRLklQcm9taXNlPHt9PjtcblxuICAgIC8vIFBPU1RcbiAgICBjcmVhdGVCYW5uZXIocG9zdF9hdXRob3IsIHBvc3RfY29udGVudCwgcG9zdF90aXRsZSwgcG9zdF9uYW1lKTogUS5JUHJvbWlzZTx7fT47XG59XG5cblxuZXhwb3J0IGNsYXNzIEJsb2dTZXJ2aWNlIGltcGxlbWVudHMgSUJsb2dTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGRiID0gY29ubmVjdGlvbi5zZXJ2aWNlO1xuXG4gICAgZ2V0QmFubmVycygpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKFwiU0VMRUNUICogRlJPTSBgd3AyX3Bvc3RzYCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJJTk5FUiBKT0lOIGB3cDJfdXNlcnNgIE9OIGB3cDJfcG9zdHNgLmBwb3N0X2F1dGhvcmAgPSBgd3AyX3VzZXJzYC5gSURgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGB3cDJfcG9zdHNgLmBwb3N0X3R5cGVgID0gJ2luZm8nIEFORCBgd3AyX3Bvc3RzYC5gcG9zdF9zdGF0dXNgID0gJ3B1Ymxpc2gnXCIpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRCYW5uZXIoYmFubmVySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihcIlNFTEVDVCAqIEZST00gYHdwMl9wb3N0c2AgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIFwiSU5ORVIgSk9JTiBgd3AyX3VzZXJzYCBPTiBgd3AyX3Bvc3RzYC5gcG9zdF9hdXRob3JgID0gYHdwMl91c2Vyc2AuYElEYCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBgd3AyX3Bvc3RzYC5gcG9zdF90eXBlYCA9ICdpbmZvJyBBTkQgYHdwMl9wb3N0c2AuYHBvc3Rfc3RhdHVzYCA9ICdwdWJsaXNoJyBBTkQgYHdwMl9wb3N0c2AuYElEYD1cIiArIGJhbm5lcklkKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgY3JlYXRlQmFubmVyKHBvc3RfYXV0aG9yLCBwb3N0X2NvbnRlbnQsIHBvc3RfdGl0bGUsIHBvc3RfbmFtZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gXCJJTlNFUlQgSU5UTyB3cDJfcG9zdHMgKElELCBwb3N0X2F1dGhvciwgcG9zdF9jb250ZW50LCBwb3N0X3RpdGxlLCBwb3N0X3N0YXR1cywgY29tbWVudF9zdGF0dXMsIHBpbmdfc3RhdHVzLCBwb3N0X25hbWUsIHBvc3RfdHlwZSwgcG9zdF9kYXRlKVwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgVkFMVUVTIChOVUxMLCAnXCIgKyBwb3N0X2F1dGhvciArIFwiJywgJ1wiICsgcG9zdF9jb250ZW50ICsgXCInLCAnXCIgKyBwb3N0X3RpdGxlICsgXCInLCAncHVibGlzaCcsICdvcGVuJywgJ29wZW4nLCAnXCIgKyBwb3N0X25hbWUgKyBcIicsICdpbmZvJywgJ1wiICsgbm93LnRvSVNPU3RyaW5nKCkgKyBcIicpXCI7XG5cbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihxdWVyeSlcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGd1aWQgPSBcImh0dHA6Ly9zb2YudG9reW8vP3A9XCIgKyBkYXRhWydpbnNlcnRJZCddO1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeTIgPSBcIlVQREFURSB3cDJfcG9zdHMgU0VUIGd1aWQgPSAnXCIgKyBndWlkICsgXCInIFdIRVJFIElEID0gXCIgKyBkYXRhWydpbnNlcnRJZCddO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihxdWVyeTIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==