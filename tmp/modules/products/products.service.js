/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var auth = require("../auth/auth.service");
var metadata = require("../metadata/metadata.service");
var authServ = new auth.AuthService();
var metadataServ = new metadata.MetadataService();
var inArray = function (myArray, myValue) {
    var inArray = false;
    myArray.map(function (key) {
        if (key === myValue) {
            inArray = true;
        }
    });
    return inArray;
};
var ProductsService = (function () {
    function ProductsService() {
        this.db = connection.service;
    }
    ProductsService.prototype.getProductsNew = function (page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_recent_posts&count=4&page=' + page).then(function (results) {
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadata
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsList = function (page) {
        var _listPromise = Q.defer();
        var count = 6;
        this.db.query('core/?json=get_posts&count=' + count + '&page=' + page).then(function (results) {
            function shuffle(o) {
                for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x)
                    ;
                return o;
            }
            var shuffled = shuffle(results['posts']);
            results['posts'] = shuffled;
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductById = function (productId) {
        var _this = this;
        var _productPromise = Q.defer();
        this.db.query('core/get_post/?id=' + productId).then(function (result) {
            var _promises = [];
            // save visit
            var saveVisitPromise = Q.defer();
            _promises.push(saveVisitPromise.promise);
            var visitQuery = "INSERT INTO wp2_post_views (id, type, period, count) " + "VALUES (" + productId + ",4,'total',1) " + "ON DUPLICATE KEY UPDATE count=count+1";
            _this.db.query_db(visitQuery).then(function () {
                saveVisitPromise.resolve(undefined);
            });
            // populate product visits
            var viewVisitsPromise = Q.defer();
            _promises.push(viewVisitsPromise.promise);
            var visitQuery = "SELECT count FROM wp2_post_views " + "WHERE id=" + productId + " AND type=4 AND period='total'";
            _this.db.query_db(visitQuery).then(function (data) {
                result['post']['visits'] = data[0]['count'];
                viewVisitsPromise.resolve(undefined);
            });
            // populate author's avatar
            authServ.getUserAvatar(result['post']['author']['id'], "thumb").then(function (data) {
                var authorPromise = Q.defer();
                _promises.push(authorPromise.promise);
                result['post']['author']['avatar'] = data['avatar'];
                authorPromise.resolve(data);
            });
            if (result['post']['comments'] && result['post']['comments'].length) {
                // for each comment
                result['post']['comments'].forEach(function (comment) {
                    var commentPromise = Q.defer();
                    _promises.push(commentPromise.promise);
                    // populate comments avatar
                    authServ.getUserAvatar(comment.author.id, "thumb").then(function (avatar) {
                        comment['author']['avatar'] = avatar['avatar'];
                        commentPromise.resolve(avatar);
                    });
                });
            }
            // populate metadata
            metadataServ.getProductMetadata(result['post']['id']).then(function (metadata) {
                var metadataPromise = Q.defer();
                _promises.push(metadataPromise.promise);
                result['post']['metadata'] = metadata;
                metadataPromise.resolve(metadata);
            });
            Q.all(_promises).then(function (values) {
                _productPromise.resolve(result);
            });
        });
        return _productPromise.promise;
    };
    ProductsService.prototype.getProductsByAuthor = function (authorId) {
        var _promise = Q.defer();
        this.db.query('core/get_author_posts/?count=4&id=' + authorId).then(function (results) {
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            var headerPromise = Q.defer();
            _postAuthorPopulate.push(headerPromise.promise);
            // populate header avatar
            authServ.getUserAvatar(results['author']['id'], "thumb").then(function (data) {
                results['author']['avatar'] = data['avatar'];
                headerPromise.resolve(data);
                results['posts'].forEach(function (result) {
                    var authorPromise = Q.defer();
                    var metadataPromise = Q.defer();
                    _postAuthorPopulate.push(authorPromise.promise);
                    _postMetadataPopulate.push(metadataPromise.promise);
                    // populate author's avatar
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadata
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
                Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                    _promise.resolve(results);
                });
            });
        });
        return _promise.promise;
    };
    ProductsService.prototype.getProductsBySchool = function (schoolId, page) {
        var _this = this;
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            _this.db.query_db("SELECT user_id FROM wp2_bp_xprofile_data WHERE value='" + schoolId + "' AND field_id=4").then(function (data) {
                var userIds = [];
                for (var i in data) {
                    userIds.push(data[i].user_id);
                }
                var schoolPosts = [];
                for (var j in posts) {
                    if (inArray(userIds, posts[j].author.id)) {
                        schoolPosts.push(posts[j]);
                    }
                    ;
                }
                ;
                results['posts'] = schoolPosts;
                results['school'] = schoolId;
                results['count'] = schoolPosts.length;
                results['count_total'] = schoolPosts.length;
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsBySubcategory0 = function (subcategory0Id, page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var subcategory0Posts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__category_0'] == subcategory0Id) {
                    subcategory0Posts.push(posts[i]);
                }
                ;
            }
            ;
            results['posts'] = subcategory0Posts;
            results['subcategory0'] = subcategory0Id;
            results['count'] = subcategory0Posts.length;
            results['count_total'] = subcategory0Posts.length;
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsBySubcategory1 = function (subcategory1Id, page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var subcategory1Posts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__category_0'] == subcategory1Id) {
                    subcategory1Posts.push(posts[i]);
                }
                ;
            }
            ;
            results['posts'] = subcategory1Posts;
            results['subcategory0'] = subcategory1Id;
            results['count'] = subcategory1Posts.length;
            results['count_total'] = subcategory1Posts.length;
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsByStyle = function (styleId, page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var stylePosts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__style'] == styleId) {
                    stylePosts.push(posts[i]);
                }
                ;
            }
            ;
            results['posts'] = stylePosts;
            results['style'] = styleId;
            results['count'] = stylePosts.length;
            results['count_total'] = stylePosts.length;
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsBySex = function (sexId, page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var sexPosts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__sex'] == sexId) {
                    sexPosts.push(posts[i]);
                }
                ;
            }
            ;
            results['posts'] = sexPosts;
            results['sex'] = sexId;
            results['count'] = sexPosts.length;
            results['count_total'] = sexPosts.length;
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.createProduct = function (nonce, author, title, content, status, school, subcategory0, subcategory1, styles) {
        return this.db.query('posts/create_post/?nonce=' + nonce + '&author=' + author + '&title=' + title + '&content=' + content + '&status=' + status).then(function (post) {
            console.log(post);
            // FALTA GUARDAR SCHOOL, SUBCATEGORY, STYLES
            return post;
        });
    };
    ProductsService.prototype.updateProduct = function (nonce, productId, author, title, content, status, categories, tags) {
        return this.db.query('posts/update_post/?nonce=' + nonce + '&id=' + productId + '&author=' + author + '&title=' + title + '&content=' + content + '&status=' + status + '&categories=' + categories + '&tags=' + tags);
    };
    ProductsService.prototype.deleteProduct = function (nonce, productId) {
        return this.db.query('posts/delete_post/?nonce=' + nonce + '&id=' + productId);
    };
    ProductsService.prototype.createComment = function (productId, cookie, content) {
        return this.db.query('user/post_comment/?post_id=' + productId + '&cookie=' + cookie + '&comment_status=1' + '&content=' + content);
    };
    ProductsService.prototype.getProductsBySearch = function (search, page) {
        var _searchPromise = Q.defer();
        this.db.query('core/get_search_results/?count=4&search=' + search + '&page=' + page).then(function (results) {
            var _postAuthorPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                    });
                });
            });
            Q.all(_postAuthorPopulate).then(function () {
                _searchPromise.resolve(results);
            });
        });
        return _searchPromise.promise;
    };
    ProductsService.prototype.getProductsRankingByLikes = function () {
        var _this = this;
        var _responsePromise = Q.defer();
        var _productsPromises = [];
        var _response = {
            posts: []
        };
        var query = "SELECT * FROM " + "( " + "SELECT wp2_posts.ID AS post_id, " + "wp2_posts.post_date_gmt AS date, " + "wp2_postmeta.meta_value AS likes, " + "wp2_users.display_name AS author " + "FROM `wp2_posts` " + "JOIN wp2_users ON wp2_posts.post_author = wp2_users.ID " + "JOIN wp2_postmeta ON wp2_posts.ID = wp2_postmeta.post_id " + "WHERE wp2_postmeta.meta_key = '_item_likes' " + ") table1 " + "ORDER BY likes DESC " + "LIMIT 5";
        this.db.query_db(query).then(function (data) {
            data.forEach(function (product) {
                var _promise = Q.defer();
                _productsPromises.push(_promise.promise);
                _this.getProductById(product['post_id']).then(function (result) {
                    _promise.resolve(result['post']);
                });
            });
            Q.all(_productsPromises).then(function (results) {
                _responsePromise.resolve(results);
            });
        });
        return _responsePromise.promise;
    };
    ProductsService.prototype.getProductsRankingByVisits = function () {
        var _promise = Q.defer();
        var query = "SELECT * FROM " + "( " + "SELECT wp2_posts.ID AS post_id, " + "wp2_posts.post_date_gmt AS date, " + "wp2_users.display_name AS author, " + "wp2_post_views.count AS visits " + "FROM `wp2_posts` " + "JOIN wp2_users ON wp2_posts.post_author = wp2_users.ID " + "JOIN wp2_post_views ON wp2_posts.ID = wp2_post_views.id " + "WHERE wp2_post_views.period = 'total' " + ") table1 " + "JOIN " + "( " + "SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS image " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__postImage' " + ") table2 " + "ON table1.post_id = table2.post_id " + "ORDER BY visits DESC " + "LIMIT 10";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    return ProductsService;
})();
exports.ProductsService = ProductsService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcHJvZHVjdHMvcHJvZHVjdHMuc2VydmljZS50cyJdLCJuYW1lcyI6WyJQcm9kdWN0c1NlcnZpY2UiLCJQcm9kdWN0c1NlcnZpY2UuY29uc3RydWN0b3IiLCJQcm9kdWN0c1NlcnZpY2UuZ2V0UHJvZHVjdHNOZXciLCJQcm9kdWN0c1NlcnZpY2UuZ2V0UHJvZHVjdHNMaXN0IiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RzTGlzdC5zaHVmZmxlIiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RCeUlkIiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RzQnlBdXRob3IiLCJQcm9kdWN0c1NlcnZpY2UuZ2V0UHJvZHVjdHNCeVNjaG9vbCIsIlByb2R1Y3RzU2VydmljZS5nZXRQcm9kdWN0c0J5U3ViY2F0ZWdvcnkwIiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RzQnlTdWJjYXRlZ29yeTEiLCJQcm9kdWN0c1NlcnZpY2UuZ2V0UHJvZHVjdHNCeVN0eWxlIiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RzQnlTZXgiLCJQcm9kdWN0c1NlcnZpY2UuY3JlYXRlUHJvZHVjdCIsIlByb2R1Y3RzU2VydmljZS51cGRhdGVQcm9kdWN0IiwiUHJvZHVjdHNTZXJ2aWNlLmRlbGV0ZVByb2R1Y3QiLCJQcm9kdWN0c1NlcnZpY2UuY3JlYXRlQ29tbWVudCIsIlByb2R1Y3RzU2VydmljZS5nZXRQcm9kdWN0c0J5U2VhcmNoIiwiUHJvZHVjdHNTZXJ2aWNlLmdldFByb2R1Y3RzUmFua2luZ0J5TGlrZXMiLCJQcm9kdWN0c1NlcnZpY2UuZ2V0UHJvZHVjdHNSYW5raW5nQnlWaXNpdHMiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBTyxVQUFVLFdBQVcsa0NBQWtDLENBQUMsQ0FBQTtBQUMvRCxJQUFPLElBQUksV0FBVyxzQkFBc0IsQ0FBQyxDQUFBO0FBQzdDLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFFMUQsSUFBSSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEMsSUFBSSxZQUFZLEdBQUcsSUFBSSxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7QUF5QmxELElBQUksT0FBTyxHQUFHLFVBQVMsT0FBTyxFQUFFLE9BQU87SUFDbkMsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBUyxHQUFHO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixJQUFhLGVBQWU7SUFBNUJBLFNBQWFBLGVBQWVBO1FBQ2hCQyxPQUFFQSxHQUFHQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQTtJQWdkcENBLENBQUNBO0lBOWNHRCx3Q0FBY0EsR0FBZEEsVUFBZUEsSUFBSUE7UUFDZkUsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLDJDQUEyQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FDNURBLElBQUlBLENBQUNBLFVBQUNBLE9BQU9BO1lBQ1ZBLElBQUlBLG1CQUFtQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDN0JBLElBQUlBLHFCQUFxQkEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFL0JBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLE1BQU1BO2dCQUM1QkEsSUFBSUEsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7Z0JBQzlCQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtnQkFDaENBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hEQSxxQkFBcUJBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUVwREEsQUFDQUEsMkJBRDJCQTtnQkFDM0JBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLEVBQUVBLE9BQU9BLENBQUNBLENBQzVDQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtvQkFDUEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7b0JBQzVDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFFNUJBLEFBQ0FBLG9CQURvQkE7b0JBQ3BCQSxZQUFZQSxDQUFDQSxrQkFBa0JBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQ3JDQSxJQUFJQSxDQUFDQSxVQUFDQSxLQUFLQTt3QkFDUkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0E7d0JBQzNCQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFDbkNBLENBQUNBLENBQUNBLENBQUFBO2dCQUNWQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUNWQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxtQkFBbUJBLENBQUNBLE1BQU1BLENBQUNBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0EsQ0FDbkRBLElBQUlBLENBQUNBLFVBQUNBLE1BQU1BO2dCQUNUQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUNsQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDWEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFUEEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBRURGLHlDQUFlQSxHQUFmQSxVQUFnQkEsSUFBSUE7UUFDaEJHLElBQUlBLFlBQVlBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQzdCQSxJQUFJQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNkQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSw2QkFBNkJBLEdBQUdBLEtBQUtBLEdBQUdBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLENBQ2pFQSxJQUFJQSxDQUFDQSxVQUFDQSxPQUFPQTtZQUVWQSxTQUFTQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFDZEMsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7b0JBQUNBLENBQUNBO2dCQUN0R0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDYkEsQ0FBQ0E7WUFDREQsSUFBSUEsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFekNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBO1lBQzVCQSxJQUFJQSxtQkFBbUJBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzdCQSxJQUFJQSxxQkFBcUJBLEdBQUdBLEVBQUVBLENBQUNBO1lBRS9CQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxNQUFNQTtnQkFDNUJBLElBQUlBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO2dCQUM5QkEsSUFBSUEsZUFBZUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7Z0JBQ2hDQSxtQkFBbUJBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUNoREEscUJBQXFCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFFcERBLEFBQ0FBLDJCQUQyQkE7Z0JBQzNCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUM1Q0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7b0JBQ1BBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO29CQUM1Q0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBRTVCQSxBQUNBQSxzQkFEc0JBO29CQUN0QkEsWUFBWUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUNyQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsS0FBS0E7d0JBQ1JBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO3dCQUMzQkEsZUFBZUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7b0JBQ25DQSxDQUFDQSxDQUFDQSxDQUFBQTtnQkFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxNQUFNQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQ25EQSxJQUFJQSxDQUFDQSxVQUFDQSxNQUFNQTtnQkFDVEEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLENBQUNBLENBQUNBLENBQUNBO1FBRVBBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVESCx3Q0FBY0EsR0FBZEEsVUFBZUEsU0FBU0E7UUFBeEJLLGlCQXNFQ0E7UUFyRUdBLElBQUlBLGVBQWVBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxvQkFBb0JBLEdBQUdBLFNBQVNBLENBQUNBLENBQzFDQSxJQUFJQSxDQUFDQSxVQUFDQSxNQUFNQTtZQUNUQSxJQUFJQSxTQUFTQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUVuQkEsQUFDQUEsYUFEYUE7Z0JBQ1RBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7WUFDakNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFekNBLElBQUlBLFVBQVVBLEdBQUdBLHVEQUF1REEsR0FDcERBLFVBQVVBLEdBQUdBLFNBQVNBLEdBQUdBLGdCQUFnQkEsR0FDekNBLHVDQUF1Q0EsQ0FBQ0E7WUFDNURBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLENBQ3ZCQSxJQUFJQSxDQUFDQTtnQkFDRkEsZ0JBQWdCQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsQUFDQUEsMEJBRDBCQTtnQkFDdEJBLGlCQUFpQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7WUFDbENBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFMUNBLElBQUlBLFVBQVVBLEdBQUdBLG1DQUFtQ0EsR0FDaENBLFdBQVdBLEdBQUdBLFNBQVNBLEdBQUdBLGdDQUFnQ0EsQ0FBQ0E7WUFDL0VBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLENBQ3ZCQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtnQkFDUEEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxpQkFBaUJBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1lBQzdDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxBQUNBQSwyQkFEMkJBO1lBQzNCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUMxREEsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7Z0JBQ1BBLElBQUlBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO2dCQUM5QkEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3RDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDcERBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3BDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxFQUFFQSxDQUFBQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakVBLEFBQ0FBLG1CQURtQkE7Z0JBQ25CQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQTtvQkFDdkNBLElBQUlBLGNBQWNBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO29CQUMvQkEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBRXZDQSxBQUNBQSwyQkFEMkJBO29CQUMzQkEsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FDN0NBLElBQUlBLENBQUNBLFVBQUNBLE1BQU1BO3dCQUNUQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTt3QkFDL0NBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO29CQUNuQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7Z0JBQ1ZBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBO1lBRURBLEFBQ0FBLG9CQURvQkE7WUFDcEJBLFlBQVlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDaERBLElBQUlBLENBQUNBLFVBQUNBLFFBQVFBO2dCQUNYQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtnQkFDaENBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUN4Q0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsUUFBUUEsQ0FBQ0E7Z0JBQ3RDQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUN0Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFFTkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FDWEEsSUFBSUEsQ0FBQ0EsVUFBQ0EsTUFBTUE7Z0JBQ1RBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3hDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVQQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFFREwsNkNBQW1CQSxHQUFuQkEsVUFBb0JBLFFBQVFBO1FBQ3hCTSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esb0NBQW9DQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUN6REEsSUFBSUEsQ0FBQ0EsVUFBQ0EsT0FBT0E7WUFDVkEsSUFBSUEsbUJBQW1CQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUM3QkEsSUFBSUEscUJBQXFCQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUMvQkEsSUFBSUEsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7WUFDOUJBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFaERBLEFBQ0FBLHlCQUR5QkE7WUFDekJBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLE9BQU9BLENBQUNBLENBQ25EQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtnQkFDUEEsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzdDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFFNUJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLE1BQU1BO29CQUM1QkEsSUFBSUEsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7b0JBQzlCQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtvQkFDaENBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2hEQSxxQkFBcUJBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO29CQUVwREEsQUFDQUEsMkJBRDJCQTtvQkFDM0JBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO29CQUM1Q0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBRTVCQSxBQUNBQSxvQkFEb0JBO29CQUNwQkEsWUFBWUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUNyQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsS0FBS0E7d0JBQ1JBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO3dCQUMzQkEsZUFBZUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7b0JBQ25DQSxDQUFDQSxDQUFDQSxDQUFBQTtnQkFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7Z0JBRUZBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQSxDQUNuREEsSUFBSUEsQ0FBQ0EsVUFBQ0EsTUFBTUE7b0JBQ1RBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUM5QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDWEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDUEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRUROLDZDQUFtQkEsR0FBbkJBLFVBQW9CQSxRQUFRQSxFQUFFQSxJQUFJQTtRQUFsQ08saUJBNEJDQTtRQTNCR0EsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsQ0FBQ0EsQ0FDMUNBLElBQUlBLENBQUNBLFVBQUNBLE9BQU9BO1lBQ1ZBLElBQUlBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBRTdCQSxLQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSx3REFBd0RBLEdBQUdBLFFBQVFBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsQ0FDckdBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO2dCQUNQQSxJQUFJQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFBQTtnQkFDaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUNqQkEsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxDQUFDQTtnQkFFREEsSUFBSUEsV0FBV0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3JCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbEJBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUN2Q0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQy9CQSxDQUFDQTtvQkFBQUEsQ0FBQ0E7Z0JBQ05BLENBQUNBO2dCQUFBQSxDQUFDQTtnQkFDRkEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsV0FBV0EsQ0FBQ0E7Z0JBQy9CQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQTtnQkFDN0JBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBO2dCQUN0Q0EsT0FBT0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBRTVDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUNsQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBRURQLG1EQUF5QkEsR0FBekJBLFVBQTBCQSxjQUFjQSxFQUFFQSxJQUFJQTtRQUMxQ1EsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsQ0FBQ0EsQ0FDMUNBLElBQUlBLENBQUNBLFVBQUNBLE9BQU9BO1lBQ1ZBLElBQUlBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBRTdCQSxJQUFJQSxpQkFBaUJBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzNCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFbEJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLHVDQUF1Q0EsQ0FBQ0EsSUFBSUEsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3ZGQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNyQ0EsQ0FBQ0E7Z0JBQUFBLENBQUNBO1lBQ05BLENBQUNBO1lBQUFBLENBQUNBO1lBRUZBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLGlCQUFpQkEsQ0FBQ0E7WUFDckNBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLGNBQWNBLENBQUNBO1lBQ3pDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxpQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBO1lBQzVDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxpQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBO1lBRWxEQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNsQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBRURSLG1EQUF5QkEsR0FBekJBLFVBQTBCQSxjQUFjQSxFQUFFQSxJQUFJQTtRQUMxQ1MsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsQ0FBQ0EsQ0FDMUNBLElBQUlBLENBQUNBLFVBQUNBLE9BQU9BO1lBQ1ZBLElBQUlBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBRTdCQSxJQUFJQSxpQkFBaUJBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzNCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFbEJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLHVDQUF1Q0EsQ0FBQ0EsSUFBSUEsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3ZGQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNyQ0EsQ0FBQ0E7Z0JBQUFBLENBQUNBO1lBQ05BLENBQUNBO1lBQUFBLENBQUNBO1lBRUZBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLGlCQUFpQkEsQ0FBQ0E7WUFDckNBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLGNBQWNBLENBQUNBO1lBQ3pDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxpQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBO1lBQzVDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxpQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBO1lBRWxEQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNsQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBRURULDRDQUFrQkEsR0FBbEJBLFVBQW1CQSxPQUFPQSxFQUFFQSxJQUFJQTtRQUM1QlUsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLGdDQUFnQ0EsQ0FBQ0EsQ0FDMUNBLElBQUlBLENBQUNBLFVBQUNBLE9BQU9BO1lBQ1ZBLElBQUlBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBRTdCQSxJQUFJQSxVQUFVQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNwQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRWxCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQSxrQ0FBa0NBLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO29CQUMzRUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlCQSxDQUFDQTtnQkFBQUEsQ0FBQ0E7WUFDTkEsQ0FBQ0E7WUFBQUEsQ0FBQ0E7WUFFRkEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0E7WUFDOUJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBO1lBQzNCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNyQ0EsT0FBT0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFM0NBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2xDQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFRFYsMENBQWdCQSxHQUFoQkEsVUFBaUJBLEtBQUtBLEVBQUVBLElBQUlBO1FBQ3hCVyxJQUFJQSxZQUFZQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZ0NBQWdDQSxDQUFDQSxDQUMxQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsT0FBT0E7WUFDVkEsSUFBSUEsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFN0JBLElBQUlBLFFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2xCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFbEJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLGdDQUFnQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3ZFQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDNUJBLENBQUNBO2dCQUFBQSxDQUFDQTtZQUNOQSxDQUFDQTtZQUFBQSxDQUFDQTtZQUVGQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUM1QkEsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDdkJBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBO1lBQ25DQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUV6Q0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDbENBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVEWCx1Q0FBYUEsR0FBYkEsVUFBY0EsS0FBS0EsRUFBRUEs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QUNwQ0EsaUNBQWlDQSxHQUNqQ0EsbUJBQW1CQSxHQUNuQkEseURBQXlEQSxHQUN6REEsMERBQTBEQSxHQUMxREEsd0NBQXdDQSxHQUN4Q0EsV0FBV0EsR0FDWEEsT0FBT0EsR0FDUEEsSUFBSUEsR0FDSkEsK0JBQStCQSxHQUMvQkEsbUNBQW1DQSxHQUNuQ0Esb0JBQW9CQSxHQUNwQkEsdUVBQXVFQSxHQUN2RUEsV0FBV0EsR0FDWEEscUNBQXFDQSxHQUNyQ0EsdUJBQXVCQSxHQUN2QkEsVUFBVUEsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQ2xCQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFUEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRUxsQixzQkFBQ0E7QUFBREEsQ0FqZEEsQUFpZENBLElBQUE7QUFqZFksdUJBQWUsR0FBZixlQWlkWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL3Byb2R1Y3RzL3Byb2R1Y3RzLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UudHNcIiAvPlxuXG5pbXBvcnQgUSA9IHJlcXVpcmUoXCJxXCIpO1xuaW1wb3J0IGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZScpXG5pbXBvcnQgYXV0aCA9IHJlcXVpcmUoXCIuLi9hdXRoL2F1dGguc2VydmljZVwiKVxuaW1wb3J0IG1ldGFkYXRhID0gcmVxdWlyZShcIi4uL21ldGFkYXRhL21ldGFkYXRhLnNlcnZpY2VcIik7XG5cbnZhciBhdXRoU2VydiA9IG5ldyBhdXRoLkF1dGhTZXJ2aWNlKCk7XG52YXIgbWV0YWRhdGFTZXJ2ID0gbmV3IG1ldGFkYXRhLk1ldGFkYXRhU2VydmljZSgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9kdWN0c1NlcnZpY2Uge1xuICAgIC8vIEdFVFxuICAgIGdldFByb2R1Y3RzTmV3KHBhZ2UpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRQcm9kdWN0c0xpc3QocGFnZSk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFByb2R1Y3RCeUlkKHByb2R1Y3RJZCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFByb2R1Y3RzQnlBdXRob3IoYXV0aG9ySWQsIHBhZ2UpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRQcm9kdWN0c0J5U2Nob29sKHNjaG9vbElkLCBwYWdlKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0UHJvZHVjdHNCeVN1YmNhdGVnb3J5MChzdWJjYXRlZ29yeTBJZCwgcGFnZSk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFByb2R1Y3RzQnlTdWJjYXRlZ29yeTEoc3ViY2F0ZWdvcnkxSWQsIHBhZ2UpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRQcm9kdWN0c0J5U3R5bGUoc3R5bGVJZCwgcGFnZSk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFByb2R1Y3RzQnlTZXgoc2V4SWQsIHBhZ2UpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRQcm9kdWN0c0J5U2VhcmNoKHNlYXJjaCwgcGFnZSk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFByb2R1Y3RzUmFua2luZ0J5TGlrZXMoKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0UHJvZHVjdHNSYW5raW5nQnlWaXNpdHMoKTogUS5JUHJvbWlzZTx7fT47XG4gICAgLy8gUE9TVFxuICAgIGNyZWF0ZVByb2R1Y3Qobm9uY2UsIGF1dGhvciwgdGl0bGUsIGNvbnRlbnQsIHN0YXR1cywgc2Nob29sLCBzdWJjYXRlZ29yeTAsIHN1YmNhdGVnb3J5MSwgc3R5bGVzKTogUS5JUHJvbWlzZTx7fT47XG4gICAgY3JlYXRlQ29tbWVudChwcm9kdWN0SWQsIGNvb2tpZSwgY29udGVudCk6IFEuSVByb21pc2U8e30+O1xuICAgIC8vIFBVVFxuICAgIHVwZGF0ZVByb2R1Y3Qobm9uY2UsIHByb2R1Y3RJZCwgYXV0aG9yLCB0aXRsZSwgY29udGVudCwgc3RhdHVzLCBjYXRlZ29yaWVzLCB0YWdzKTogUS5JUHJvbWlzZTx7fT47XG4gICAgLy8gREVMRVRFXG4gICAgZGVsZXRlUHJvZHVjdChub25jZSwgcHJvZHVjdElkKTogUS5JUHJvbWlzZTx7fT47XG59XG5cbnZhciBpbkFycmF5ID0gZnVuY3Rpb24obXlBcnJheSwgbXlWYWx1ZSkge1xuICAgIHZhciBpbkFycmF5ID0gZmFsc2U7XG4gICAgbXlBcnJheS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09IG15VmFsdWUpIHtcbiAgICAgICAgICAgIGluQXJyYXkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluQXJyYXk7XG59O1xuXG5leHBvcnQgY2xhc3MgUHJvZHVjdHNTZXJ2aWNlIGltcGxlbWVudHMgSVByb2R1Y3RzU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkYiA9IGNvbm5lY3Rpb24uc2VydmljZTtcblxuICAgIGdldFByb2R1Y3RzTmV3KHBhZ2UpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnkoJ2NvcmUvP2pzb249Z2V0X3JlY2VudF9wb3N0cyZjb3VudD00JnBhZ2U9JyArIHBhZ2UpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfcG9zdEF1dGhvclBvcHVsYXRlID0gW107XG4gICAgICAgICAgICAgICAgdmFyIF9wb3N0TWV0YWRhdGFQb3B1bGF0ZSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0c1sncG9zdHMnXS5mb3JFYWNoKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF1dGhvclByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YVByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9wb3N0QXV0aG9yUG9wdWxhdGUucHVzaChhdXRob3JQcm9taXNlLnByb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICBfcG9zdE1ldGFkYXRhUG9wdWxhdGUucHVzaChtZXRhZGF0YVByb21pc2UucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcG9wdWxhdGUgYXV0aG9yJ3MgYXZhdGFyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhTZXJ2LmdldFVzZXJBdmF0YXIocmVzdWx0LmF1dGhvci5pZCwgXCJ0aHVtYlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ2F1dGhvciddWydhdmF0YXInXSA9IGRhdGFbJ2F2YXRhciddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvclByb21pc2UucmVzb2x2ZShkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcHVsYXRlIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFTZXJ2LmdldFByb2R1Y3RNZXRhZGF0YShyZXN1bHQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WydtZXRhZGF0YSddID0gZGF0YTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVByb21pc2UucmVzb2x2ZShkYXRhMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgUS5hbGwoX3Bvc3RBdXRob3JQb3B1bGF0ZS5jb25jYXQoX3Bvc3RNZXRhZGF0YVBvcHVsYXRlKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFByb2R1Y3RzTGlzdChwYWdlKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB2YXIgY291bnQgPSA2O1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5KCdjb3JlLz9qc29uPWdldF9wb3N0cyZjb3VudD0nICsgY291bnQgKyAnJnBhZ2U9JyArIHBhZ2UpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2h1ZmZsZShvKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGosIHgsIGkgPSBvLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB4ID0gb1stLWldLCBvW2ldID0gb1tqXSwgb1tqXSA9IHgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNodWZmbGVkID0gc2h1ZmZsZShyZXN1bHRzWydwb3N0cyddKTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10gPSBzaHVmZmxlZDtcbiAgICAgICAgICAgICAgICB2YXIgX3Bvc3RBdXRob3JQb3B1bGF0ZSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBfcG9zdE1ldGFkYXRhUG9wdWxhdGUgPSBbXTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10uZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdXRob3JQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICAgICAgICAgICAgICBfcG9zdEF1dGhvclBvcHVsYXRlLnB1c2goYXV0aG9yUHJvbWlzZS5wcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgX3Bvc3RNZXRhZGF0YVBvcHVsYXRlLnB1c2gobWV0YWRhdGFQcm9taXNlLnByb21pc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvcHVsYXRlIGF1dGhvcidzIGF2YXRhclxuICAgICAgICAgICAgICAgICAgICBhdXRoU2Vydi5nZXRVc2VyQXZhdGFyKHJlc3VsdC5hdXRob3IuaWQsIFwidGh1bWJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WydhdXRob3InXVsnYXZhdGFyJ10gPSBkYXRhWydhdmF0YXInXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JQcm9taXNlLnJlc29sdmUoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSBtZXRhZGF0YWdpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFTZXJ2LmdldFByb2R1Y3RNZXRhZGF0YShyZXN1bHQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WydtZXRhZGF0YSddID0gZGF0YTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVByb21pc2UucmVzb2x2ZShkYXRhMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgUS5hbGwoX3Bvc3RBdXRob3JQb3B1bGF0ZS5jb25jYXQoX3Bvc3RNZXRhZGF0YVBvcHVsYXRlKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFByb2R1Y3RCeUlkKHByb2R1Y3RJZCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9kdWN0UHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeSgnY29yZS9nZXRfcG9zdC8/aWQ9JyArIHByb2R1Y3RJZClcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX3Byb21pc2VzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyBzYXZlIHZpc2l0XG4gICAgICAgICAgICAgICAgdmFyIHNhdmVWaXNpdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgX3Byb21pc2VzLnB1c2goc2F2ZVZpc2l0UHJvbWlzZS5wcm9taXNlKTtcblxuICAgICAgICAgICAgICAgIHZhciB2aXNpdFF1ZXJ5ID0gXCJJTlNFUlQgSU5UTyB3cDJfcG9zdF92aWV3cyAoaWQsIHR5cGUsIHBlcmlvZCwgY291bnQpIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVkFMVUVTIChcIiArIHByb2R1Y3RJZCArIFwiLDQsJ3RvdGFsJywxKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk9OIERVUExJQ0FURSBLRVkgVVBEQVRFIGNvdW50PWNvdW50KzFcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKHZpc2l0UXVlcnkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVWaXNpdFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gcG9wdWxhdGUgcHJvZHVjdCB2aXNpdHNcbiAgICAgICAgICAgICAgICB2YXIgdmlld1Zpc2l0c1Byb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgX3Byb21pc2VzLnB1c2godmlld1Zpc2l0c1Byb21pc2UucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdmlzaXRRdWVyeSA9IFwiU0VMRUNUIGNvdW50IEZST00gd3AyX3Bvc3Rfdmlld3MgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBpZD1cIiArIHByb2R1Y3RJZCArIFwiIEFORCB0eXBlPTQgQU5EIHBlcmlvZD0ndG90YWwnXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5kYi5xdWVyeV9kYih2aXNpdFF1ZXJ5KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Wydwb3N0J11bJ3Zpc2l0cyddID0gZGF0YVswXVsnY291bnQnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdWaXNpdHNQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHBvcHVsYXRlIGF1dGhvcidzIGF2YXRhclxuICAgICAgICAgICAgICAgIGF1dGhTZXJ2LmdldFVzZXJBdmF0YXIocmVzdWx0Wydwb3N0J11bJ2F1dGhvciddWydpZCddLCBcInRodW1iXCIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXV0aG9yUHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wcm9taXNlcy5wdXNoKGF1dGhvclByb21pc2UucHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3Bvc3QnXVsnYXV0aG9yJ11bJ2F2YXRhciddID0gZGF0YVsnYXZhdGFyJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZihyZXN1bHRbJ3Bvc3QnXVsnY29tbWVudHMnXSAmJiByZXN1bHRbJ3Bvc3QnXVsnY29tbWVudHMnXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggY29tbWVudFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3Bvc3QnXVsnY29tbWVudHMnXS5mb3JFYWNoKChjb21tZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJvbWlzZXMucHVzaChjb21tZW50UHJvbWlzZS5wcm9taXNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9wdWxhdGUgY29tbWVudHMgYXZhdGFyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoU2Vydi5nZXRVc2VyQXZhdGFyKGNvbW1lbnQuYXV0aG9yLmlkLCBcInRodW1iXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGF2YXRhcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50WydhdXRob3InXVsnYXZhdGFyJ10gPSBhdmF0YXJbJ2F2YXRhciddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50UHJvbWlzZS5yZXNvbHZlKGF2YXRhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcG9wdWxhdGUgbWV0YWRhdGFcbiAgICAgICAgICAgICAgICBtZXRhZGF0YVNlcnYuZ2V0UHJvZHVjdE1ldGFkYXRhKHJlc3VsdFsncG9zdCddWydpZCddKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigobWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YVByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJvbWlzZXMucHVzaChtZXRhZGF0YVByb21pc2UucHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3Bvc3QnXVsnbWV0YWRhdGEnXSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFQcm9taXNlLnJlc29sdmUobWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgUS5hbGwoX3Byb21pc2VzKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigodmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJvZHVjdFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9kdWN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFByb2R1Y3RzQnlBdXRob3IoYXV0aG9ySWQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeSgnY29yZS9nZXRfYXV0aG9yX3Bvc3RzLz9jb3VudD00JmlkPScgKyBhdXRob3JJZClcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9wb3N0QXV0aG9yUG9wdWxhdGUgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgX3Bvc3RNZXRhZGF0YVBvcHVsYXRlID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlclByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgX3Bvc3RBdXRob3JQb3B1bGF0ZS5wdXNoKGhlYWRlclByb21pc2UucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSBoZWFkZXIgYXZhdGFyXG4gICAgICAgICAgICAgICAgYXV0aFNlcnYuZ2V0VXNlckF2YXRhcihyZXN1bHRzWydhdXRob3InXVsnaWQnXSwgXCJ0aHVtYlwiKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1snYXV0aG9yJ11bJ2F2YXRhciddID0gZGF0YVsnYXZhdGFyJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJQcm9taXNlLnJlc29sdmUoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10uZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF1dGhvclByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGFkYXRhUHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9zdEF1dGhvclBvcHVsYXRlLnB1c2goYXV0aG9yUHJvbWlzZS5wcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9zdE1ldGFkYXRhUG9wdWxhdGUucHVzaChtZXRhZGF0YVByb21pc2UucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSBhdXRob3IncyBhdmF0YXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ2F1dGhvciddWydhdmF0YXInXSA9IGRhdGFbJ2F2YXRhciddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvclByb21pc2UucmVzb2x2ZShkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcHVsYXRlIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFTZXJ2LmdldFByb2R1Y3RNZXRhZGF0YShyZXN1bHQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WydtZXRhZGF0YSddID0gZGF0YTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVByb21pc2UucmVzb2x2ZShkYXRhMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBRLmFsbChfcG9zdEF1dGhvclBvcHVsYXRlLmNvbmNhdChfcG9zdE1ldGFkYXRhUG9wdWxhdGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCh2YWx1ZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0UHJvZHVjdHNCeVNjaG9vbChzY2hvb2xJZCwgcGFnZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9saXN0UHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeSgnY29yZS8/anNvbj1nZXRfcG9zdHMmY291bnQ9MjAwJylcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RzID0gcmVzdWx0c1sncG9zdHMnXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJTRUxFQ1QgdXNlcl9pZCBGUk9NIHdwMl9icF94cHJvZmlsZV9kYXRhIFdIRVJFIHZhbHVlPSdcIiArIHNjaG9vbElkICsgXCInIEFORCBmaWVsZF9pZD00XCIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlcklkcyA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWRzLnB1c2goZGF0YVtpXS51c2VyX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjaG9vbFBvc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqIGluIHBvc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluQXJyYXkodXNlcklkcywgcG9zdHNbal0uYXV0aG9yLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hvb2xQb3N0cy5wdXNoKHBvc3RzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10gPSBzY2hvb2xQb3N0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3NjaG9vbCddID0gc2Nob29sSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzWydjb3VudCddID0gc2Nob29sUG9zdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1snY291bnRfdG90YWwnXSA9IHNjaG9vbFBvc3RzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX2xpc3RQcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0UHJvZHVjdHNCeVN1YmNhdGVnb3J5MChzdWJjYXRlZ29yeTBJZCwgcGFnZSk6IFEuSVByb21pc2U8e30+IMKge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5KCdjb3JlLz9qc29uPWdldF9wb3N0cyZjb3VudD0yMDAnKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdHMgPSByZXN1bHRzWydwb3N0cyddO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YmNhdGVnb3J5MFBvc3RzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwb3N0cykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0c1tpXVsnY3VzdG9tX2ZpZWxkcyddWydzb2ZiYWNrZW5kX19zb2Zfd29ya19tZXRhX19jYXRlZ29yeV8wJ10gPT0gc3ViY2F0ZWdvcnkwSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3J5MFBvc3RzLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXN1bHRzWydwb3N0cyddID0gc3ViY2F0ZWdvcnkwUG9zdHM7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1snc3ViY2F0ZWdvcnkwJ10gPSBzdWJjYXRlZ29yeTBJZDtcbiAgICAgICAgICAgICAgICByZXN1bHRzWydjb3VudCddID0gc3ViY2F0ZWdvcnkwUG9zdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ2NvdW50X3RvdGFsJ10gPSBzdWJjYXRlZ29yeTBQb3N0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBfbGlzdFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfbGlzdFByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRQcm9kdWN0c0J5U3ViY2F0ZWdvcnkxKHN1YmNhdGVnb3J5MUlkLCBwYWdlKTogUS5JUHJvbWlzZTx7fT4gwqB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnkoJ2NvcmUvP2pzb249Z2V0X3Bvc3RzJmNvdW50PTIwMCcpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBwb3N0cyA9IHJlc3VsdHNbJ3Bvc3RzJ107XG5cbiAgICAgICAgICAgICAgICB2YXIgc3ViY2F0ZWdvcnkxUG9zdHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHBvc3RzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RzW2ldWydjdXN0b21fZmllbGRzJ11bJ3NvZmJhY2tlbmRfX3NvZl93b3JrX21ldGFfX2NhdGVnb3J5XzAnXSA9PSBzdWJjYXRlZ29yeTFJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcnkxUG9zdHMucHVzaChwb3N0c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10gPSBzdWJjYXRlZ29yeTFQb3N0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzWydzdWJjYXRlZ29yeTAnXSA9IHN1YmNhdGVnb3J5MUlkO1xuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ2NvdW50J10gPSBzdWJjYXRlZ29yeTFQb3N0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1snY291bnRfdG90YWwnXSA9IHN1YmNhdGVnb3J5MVBvc3RzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIF9saXN0UHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFByb2R1Y3RzQnlTdHlsZShzdHlsZUlkLCBwYWdlKTogUS5JUHJvbWlzZTx7fT4gwqB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnkoJ2NvcmUvP2pzb249Z2V0X3Bvc3RzJmNvdW50PTIwMCcpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBwb3N0cyA9IHJlc3VsdHNbJ3Bvc3RzJ107XG5cbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVQb3N0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcG9zdHMpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zdHNbaV1bJ2N1c3RvbV9maWVsZHMnXVsnc29mYmFja2VuZF9fc29mX3dvcmtfbWV0YV9fc3R5bGUnXSA9PSBzdHlsZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVBvc3RzLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXN1bHRzWydwb3N0cyddID0gc3R5bGVQb3N0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzWydzdHlsZSddID0gc3R5bGVJZDtcbiAgICAgICAgICAgICAgICByZXN1bHRzWydjb3VudCddID0gc3R5bGVQb3N0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1snY291bnRfdG90YWwnXSA9IHN0eWxlUG9zdHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX2xpc3RQcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0UHJvZHVjdHNCeVNleChzZXhJZCwgcGFnZSk6IFEuSVByb21pc2U8e30+IMKge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5KCdjb3JlLz9qc29uPWdldF9wb3N0cyZjb3VudD0yMDAnKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdHMgPSByZXN1bHRzWydwb3N0cyddO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNleFBvc3RzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwb3N0cykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0c1tpXVsnY3VzdG9tX2ZpZWxkcyddWydzb2ZiYWNrZW5kX19zb2Zfd29ya19tZXRhX19zZXgnXSA9PSBzZXhJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V4UG9zdHMucHVzaChwb3N0c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10gPSBzZXhQb3N0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzWydzZXgnXSA9IHNleElkO1xuICAgICAgICAgICAgICAgIHJlc3VsdHNbJ2NvdW50J10gPSBzZXhQb3N0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1snY291bnRfdG90YWwnXSA9IHNleFBvc3RzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIF9saXN0UHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGNyZWF0ZVByb2R1Y3Qobm9uY2UsIGF1dGhvciwgdGl0bGUsIGNvbnRlbnQsIHN0YXR1cywgc2Nob29sLCBzdWJjYXRlZ29yeTAsIHN1YmNhdGVnb3J5MSwgc3R5bGVzKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5xdWVyeSgncG9zdHMvY3JlYXRlX3Bvc3QvP25vbmNlPScgKyBub25jZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmYXV0aG9yPScgKyBhdXRob3IgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnRpdGxlPScgKyB0aXRsZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmY29udGVudD0nICsgY29udGVudCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmc3RhdHVzPScgKyBzdGF0dXMpXG4gICAgICAgICAgICAudGhlbigocG9zdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvc3QpO1xuXG4gICAgICAgICAgICAgICAgLy8gRkFMVEEgR1VBUkRBUiBTQ0hPT0wsIFNVQkNBVEVHT1JZLCBTVFlMRVNcblxuICAgICAgICAgICAgICAgIHJldHVybiBwb3N0O1xuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICB1cGRhdGVQcm9kdWN0KG5vbmNlLCBwcm9kdWN0SWQsIGF1dGhvciwgdGl0bGUsIGNvbnRlbnQsIHN0YXR1cywgY2F0ZWdvcmllcywgdGFncyk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3Bvc3RzL3VwZGF0ZV9wb3N0Lz9ub25jZT0nICsgbm9uY2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmlkPScgKyBwcm9kdWN0SWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmF1dGhvcj0nICsgYXV0aG9yICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZ0aXRsZT0nICsgdGl0bGUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmNvbnRlbnQ9JyArIGNvbnRlbnQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnN0YXR1cz0nICsgc3RhdHVzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZjYXRlZ29yaWVzPScgKyBjYXRlZ29yaWVzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZ0YWdzPScgKyB0YWdzKVxuICAgIH1cblxuICAgIGRlbGV0ZVByb2R1Y3Qobm9uY2UsIHByb2R1Y3RJZCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3Bvc3RzL2RlbGV0ZV9wb3N0Lz9ub25jZT0nICsgbm9uY2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmlkPScgKyBwcm9kdWN0SWQpXG4gICAgfVxuXG4gICAgY3JlYXRlQ29tbWVudChwcm9kdWN0SWQsIGNvb2tpZSwgY29udGVudCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIucXVlcnkoJ3VzZXIvcG9zdF9jb21tZW50Lz9wb3N0X2lkPScgKyBwcm9kdWN0SWQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJmNvb2tpZT0nICsgY29va2llICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZjb21tZW50X3N0YXR1cz0xJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmY29udGVudD0nICsgY29udGVudClcbiAgICB9XG5cbiAgICBnZXRQcm9kdWN0c0J5U2VhcmNoKHNlYXJjaCwgcGFnZSk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9zZWFyY2hQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5KCdjb3JlL2dldF9zZWFyY2hfcmVzdWx0cy8/Y291bnQ9NCZzZWFyY2g9JyArIHNlYXJjaCArXG4gICAgICAgICAgICAnJnBhZ2U9JyArIHBhZ2UpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgIHZhciBfcG9zdEF1dGhvclBvcHVsYXRlID0gW107XG5cbiAgICAgICAgICAgIHJlc3VsdHNbJ3Bvc3RzJ10uZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGF1dGhvclByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgX3Bvc3RBdXRob3JQb3B1bGF0ZS5wdXNoKGF1dGhvclByb21pc2UucHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgYXV0aFNlcnYuZ2V0VXNlckF2YXRhcihyZXN1bHQuYXV0aG9yLmlkLCBcInRodW1iXCIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ2F1dGhvciddWydhdmF0YXInXT0gZGF0YVsnYXZhdGFyJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JQcm9taXNlLnJlc29sdmUoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhU2Vydi5nZXRQcm9kdWN0TWV0YWRhdGEocmVzdWx0LmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ21ldGFkYXRhJ10gPSBkYXRhMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFEuYWxsKF9wb3N0QXV0aG9yUG9wdWxhdGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoUHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3NlYXJjaFByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRQcm9kdWN0c1JhbmtpbmdCeUxpa2VzKCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9yZXNwb25zZVByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHZhciBfcHJvZHVjdHNQcm9taXNlcyA9IFtdO1xuICAgICAgICB2YXIgX3Jlc3BvbnNlID0ge1xuICAgICAgICAgICAgcG9zdHMgOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBxdWVyeSA9IFwiU0VMRUNUICogRlJPTSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiKCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiU0VMRUNUIHdwMl9wb3N0cy5JRCBBUyBwb3N0X2lkLCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwid3AyX3Bvc3RzLnBvc3RfZGF0ZV9nbXQgQVMgZGF0ZSwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIndwMl9wb3N0bWV0YS5tZXRhX3ZhbHVlIEFTIGxpa2VzLCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwid3AyX3VzZXJzLmRpc3BsYXlfbmFtZSBBUyBhdXRob3IgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkZST00gYHdwMl9wb3N0c2AgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gd3AyX3VzZXJzIE9OIHdwMl9wb3N0cy5wb3N0X2F1dGhvciA9IHdwMl91c2Vycy5JRCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiB3cDJfcG9zdG1ldGEgT04gd3AyX3Bvc3RzLklEID0gd3AyX3Bvc3RtZXRhLnBvc3RfaWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHdwMl9wb3N0bWV0YS5tZXRhX2tleSA9ICdfaXRlbV9saWtlcycgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIikgdGFibGUxIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJPUkRFUiBCWSBsaWtlcyBERVNDIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMSU1JVCA1XCI7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIocXVlcnkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSA6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKChwcm9kdWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX3Byb2R1Y3RzUHJvbWlzZXMucHVzaChfcHJvbWlzZS5wcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQcm9kdWN0QnlJZChwcm9kdWN0Wydwb3N0X2lkJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZShyZXN1bHRbJ3Bvc3QnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBRLmFsbChfcHJvZHVjdHNQcm9taXNlcylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXNwb25zZVByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3Jlc3BvbnNlUHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFByb2R1Y3RzUmFua2luZ0J5VmlzaXRzKCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB2YXIgcXVlcnkgPSBcIlNFTEVDVCAqIEZST00gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiggXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIlNFTEVDVCB3cDJfcG9zdHMuSUQgQVMgcG9zdF9pZCwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIndwMl9wb3N0cy5wb3N0X2RhdGVfZ210IEFTIGRhdGUsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJ3cDJfdXNlcnMuZGlzcGxheV9uYW1lIEFTIGF1dGhvciwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIndwMl9wb3N0X3ZpZXdzLmNvdW50IEFTIHZpc2l0cyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiRlJPTSBgd3AyX3Bvc3RzYCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiB3cDJfdXNlcnMgT04gd3AyX3Bvc3RzLnBvc3RfYXV0aG9yID0gd3AyX3VzZXJzLklEIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIHdwMl9wb3N0X3ZpZXdzIE9OIHdwMl9wb3N0cy5JRCA9IHdwMl9wb3N0X3ZpZXdzLmlkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB3cDJfcG9zdF92aWV3cy5wZXJpb2QgPSAndG90YWwnIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIpIHRhYmxlMSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiKCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiU0VMRUNUIHdwMl9wb3N0bWV0YS5wb3N0X2lkLCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwid3AyX3Bvc3RtZXRhLm1ldGFfdmFsdWUgQVMgaW1hZ2UgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkZST00gd3AyX3Bvc3RtZXRhIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB3cDJfcG9zdG1ldGEubWV0YV9rZXkgPSAnc29mYmFja2VuZF9fc29mX3dvcmtfbWV0YV9fcG9zdEltYWdlJyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiKSB0YWJsZTIgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIk9OIHRhYmxlMS5wb3N0X2lkID0gdGFibGUyLnBvc3RfaWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIk9SREVSIEJZIHZpc2l0cyBERVNDIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMSU1JVCAxMFwiO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9