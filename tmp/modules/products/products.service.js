/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var auth = require("../auth/auth.service");
var metadata = require("../metadata/metadata.service");
var images = require("../images/images.service");
var authServ = new auth.AuthService();
var metadataServ = new metadata.MetadataService();
var imagesServ = new images.ImagesService();
var inArray = function (myArray, myValue) {
    var inArray = false;
    myArray.map(function (key) {
        if (key === myValue) {
            inArray = true;
        }
    });
    return inArray;
};
var ProductsService = (function () {
    function ProductsService() {
        this.db = connection.service;
    }
    ProductsService.prototype.getProductsNew = function (page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_recent_posts&count=6&page=' + page).then(function (results) {
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadata
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsList = function (page) {
        var _listPromise = Q.defer();
        var count = 6;
        this.db.query('core/?json=get_posts&count=' + count + '&page=' + page).then(function (results) {
            function shuffle(o) {
                for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x)
                    ;
                return o;
            }
            var shuffled = shuffle(results['posts']);
            results['posts'] = shuffled;
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductById = function (productId) {
        var _this = this;
        var _productPromise = Q.defer();
        this.db.query('core/get_post/?id=' + productId).then(function (result) {
            var _promises = [];
            // save visit
            var saveVisitPromise = Q.defer();
            _promises.push(saveVisitPromise.promise);
            var visitQuery = "INSERT INTO wp2_post_views (id, type, period, count) " + "VALUES (" + productId + ",4,'total',1) " + "ON DUPLICATE KEY UPDATE count=count+1";
            _this.db.query_db(visitQuery).then(function () {
                saveVisitPromise.resolve(undefined);
            });
            // populate product visits
            var viewVisitsPromise = Q.defer();
            _promises.push(viewVisitsPromise.promise);
            var visitQuery = "SELECT count FROM wp2_post_views " + "WHERE id=" + productId + " AND type=4 AND period='total'";
            _this.db.query_db(visitQuery).then(function (data) {
                result['post']['visits'] = data[0]['count'];
                viewVisitsPromise.resolve(undefined);
            });
            // populate author's avatar
            authServ.getUserAvatar(result['post']['author']['id'], "thumb").then(function (data) {
                var authorPromise = Q.defer();
                _promises.push(authorPromise.promise);
                result['post']['author']['avatar'] = data['avatar'];
                authorPromise.resolve(data);
            });
            if (result['post']['comments'] && result['post']['comments'].length) {
                // for each comment
                result['post']['comments'].forEach(function (comment) {
                    var commentPromise = Q.defer();
                    _promises.push(commentPromise.promise);
                    // populate comments avatar
                    authServ.getUserAvatar(comment.author.id, "thumb").then(function (avatar) {
                        comment['author']['avatar'] = avatar['avatar'];
                        commentPromise.resolve(avatar);
                    });
                });
            }
            // populate metadata
            metadataServ.getProductMetadata(result['post']['id']).then(function (metadata) {
                var metadataPromise = Q.defer();
                _promises.push(metadataPromise.promise);
                result['post']['metadata'] = metadata;
                metadataPromise.resolve(metadata);
            });
            Q.all(_promises).then(function (values) {
                _productPromise.resolve(result);
            });
        });
        return _productPromise.promise;
    };
    ProductsService.prototype.getProductsByAuthor = function (authorId) {
        var _promise = Q.defer();
        this.db.query('core/get_author_posts/?count=4&id=' + authorId).then(function (results) {
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            var headerPromise = Q.defer();
            _postAuthorPopulate.push(headerPromise.promise);
            // populate header avatar
            authServ.getUserAvatar(results['author']['id'], "thumb").then(function (data) {
                results['author']['avatar'] = data['avatar'];
                headerPromise.resolve(data);
                results['posts'].forEach(function (result) {
                    var authorPromise = Q.defer();
                    var metadataPromise = Q.defer();
                    _postAuthorPopulate.push(authorPromise.promise);
                    _postMetadataPopulate.push(metadataPromise.promise);
                    // populate author's avatar
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadata
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
                Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                    _promise.resolve(results);
                });
            });
        });
        return _promise.promise;
    };
    ProductsService.prototype.getProductsBySchool = function (schoolId, page) {
        var _this = this;
        var _listPromise = Q.defer();
        var _postAuthorPopulate = [];
        var _postMetadataPopulate = [];
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            _this.db.query_db("SELECT user_id FROM wp2_bp_xprofile_data WHERE value='" + schoolId + "' AND field_id=4").then(function (data) {
                var userIds = [];
                for (var i in data) {
                    userIds.push(data[i].user_id);
                }
                var schoolPosts = [];
                for (var j in posts) {
                    if (inArray(userIds, posts[j].author.id)) {
                        schoolPosts.push(posts[j]);
                    }
                    ;
                }
                ;
                // pagination
                var count = 6;
                results['count_total'] = schoolPosts.length;
                results['pages'] = Math.floor(schoolPosts.length / count);
                if (schoolPosts.length > 5) {
                    var from = -count + (count * page);
                    var to = 0 + (count * page);
                    schoolPosts = schoolPosts.slice(from, to);
                }
                ;
                results['posts'] = schoolPosts;
                results['school'] = schoolId;
                results['count'] = schoolPosts.length;
                results['posts'].forEach(function (result) {
                    var authorPromise = Q.defer();
                    var metadataPromise = Q.defer();
                    _postAuthorPopulate.push(authorPromise.promise);
                    _postMetadataPopulate.push(metadataPromise.promise);
                    // populate author's avatar
                    authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                        result['author']['avatar'] = data['avatar'];
                        authorPromise.resolve(data);
                        // populate metadatagi
                        metadataServ.getProductMetadata(result.id).then(function (data2) {
                            result['metadata'] = data2;
                            metadataPromise.resolve(data2);
                        });
                    });
                });
                Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                    _listPromise.resolve(results);
                });
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsByOptionsSearch = function (search, subcategory0, subcategory1, style, sex) {
        var _promise = Q.defer();
        if (search == 'null')
            search = '';
        if (subcategory0 == 'null')
            search = '';
        if (subcategory1 == 'null')
            search = '';
        if (style == 'null')
            search = '';
        if (sex == 'null')
            search = '';
        var query = "SELECT post_data.post_id, post_data.title, post_data.date, post_data.author, " + "image.image, subcategory0.subcategory0, subcategory1.subcategory1, style.style, sex.sex " + "FROM " + "(SELECT wp2_posts.ID AS post_id, " + "wp2_posts.post_title AS title, " + "wp2_posts.post_date_gmt AS date, " + "wp2_users.display_name AS author, " + "wp2_users.ID AS author_id " + "FROM `wp2_posts` " + "JOIN wp2_users " + "ON wp2_posts.post_author = wp2_users.ID " + "WHERE wp2_posts.post_title LIKE '%" + search + "%' " + ") post_data " + "JOIN " + "(SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS image " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__postImage' " + ") image " + "ON post_data.post_id = image.post_id " + "JOIN " + "(SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS subcategory0 " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__category_0' " + "AND wp2_postmeta.meta_value LIKE '%" + subcategory0 + "%' " + ") subcategory0 " + "ON post_data.post_id = subcategory0.post_id " + "JOIN " + "(SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS subcategory1 " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__category_1' " + "AND wp2_postmeta.meta_value LIKE '%" + subcategory1 + "%' " + ") subcategory1 " + "ON post_data.post_id = subcategory1.post_id " + "JOIN " + "(SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS style " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__style' " + "AND wp2_postmeta.meta_value LIKE '%" + style + "%' " + ") style " + "ON post_data.post_id = style.post_id " + "JOIN " + "(SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS sex " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__sex' " + "AND wp2_postmeta.meta_value LIKE '%" + sex + "%' " + ") sex " + "ON post_data.post_id = sex.post_id " + "ORDER BY post_id " + "LIMIT 10";
        this.db.query_db(query).then(function (data) {
            var dataJson = JSON.parse(JSON.stringify(data));
            var _postAuthorPopulate = [];
            var _postMetadataPopulate = [];
            dataJson.forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result['author_id'], "thumb").then(function (data) {
                    result['author_avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadata
                    metadataServ.getProductMetadata(result.post_id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _promise.resolve(dataJson);
            });
        });
        return _promise.promise;
    };
    ProductsService.prototype.getProductsBySubcategory0 = function (subcategory0Id, page) {
        var _listPromise = Q.defer();
        var _postAuthorPopulate = [];
        var _postMetadataPopulate = [];
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var subcategory0Posts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__category_0'] == subcategory0Id) {
                    subcategory0Posts.push(posts[i]);
                }
                ;
            }
            ;
            // pagination
            var count = 6;
            results['count_total'] = subcategory0Posts.length;
            results['pages'] = Math.floor(subcategory0Posts.length / count);
            if (subcategory0Posts.length > 5) {
                var from = -count + (count * page);
                var to = 0 + (count * page);
                subcategory0Posts = subcategory0Posts.slice(from, to);
            }
            ;
            results['posts'] = subcategory0Posts;
            results['subcategory0'] = subcategory0Id;
            results['count'] = subcategory0Posts.length;
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsBySubcategory1 = function (subcategory1Id, page) {
        var _listPromise = Q.defer();
        var _postAuthorPopulate = [];
        var _postMetadataPopulate = [];
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var subcategory1Posts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__category_1'] == subcategory1Id) {
                    subcategory1Posts.push(posts[i]);
                }
                ;
            }
            ;
            // pagination
            var count = 6;
            results['count_total'] = subcategory1Posts.length;
            results['pages'] = Math.floor(subcategory1Posts.length / count);
            if (subcategory1Posts.length > 5) {
                var from = -count + (count * page);
                var to = 0 + (count * page);
                subcategory1Posts = subcategory1Posts.slice(from, to);
            }
            ;
            results['posts'] = subcategory1Posts;
            results['subcategory1'] = subcategory1Id;
            results['count'] = subcategory1Posts.length;
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsByStyle = function (styleId, page) {
        var _listPromise = Q.defer();
        var _postAuthorPopulate = [];
        var _postMetadataPopulate = [];
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var stylePosts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__style'] == styleId) {
                    stylePosts.push(posts[i]);
                }
                ;
            }
            ;
            // pagination
            var count = 6;
            results['count_total'] = stylePosts.length;
            results['pages'] = Math.floor(stylePosts.length / count);
            if (stylePosts.length > 5) {
                var from = -count + (count * page);
                var to = 0 + (count * page);
                stylePosts = stylePosts.slice(from, to);
            }
            ;
            results['posts'] = stylePosts;
            results['style'] = styleId;
            results['count'] = stylePosts.length;
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsBySex = function (sexId, page) {
        var _listPromise = Q.defer();
        var _postAuthorPopulate = [];
        var _postMetadataPopulate = [];
        this.db.query('core/?json=get_posts&count=200').then(function (results) {
            var posts = results['posts'];
            var sexPosts = [];
            for (var i in posts) {
                if (posts[i]['custom_fields']['sofbackend__sof_work_meta__sex'] == sexId) {
                    sexPosts.push(posts[i]);
                }
                ;
            }
            ;
            // pagination
            var count = 6;
            results['count_total'] = sexPosts.length;
            results['pages'] = Math.floor(sexPosts.length / count);
            if (sexPosts.length > 5) {
                var from = -count + (count * page);
                var to = 0 + (count * page);
                sexPosts = sexPosts.slice(from, to);
            }
            ;
            results['posts'] = sexPosts;
            results['sex'] = sexId;
            results['count'] = sexPosts.length;
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                var metadataPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                _postMetadataPopulate.push(metadataPromise.promise);
                // populate author's avatar
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    // populate metadatagi
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                        metadataPromise.resolve(data2);
                    });
                });
            });
            Q.all(_postAuthorPopulate.concat(_postMetadataPopulate)).then(function (values) {
                _listPromise.resolve(results);
            });
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.createProduct = function (nonce, authorId, title, content, status, school, subcategory0, subcategory1, styles) {
        return this.db.query('posts/create_post/?nonce=' + nonce + '&author=' + authorId + '&title=' + title + '&content=' + content + '&status=' + status).then(function (post) {
            console.log(post);
            // FALTA GUARDAR SCHOOL, SUBCATEGORY, STYLES
            return post;
        });
    };
    ProductsService.prototype.createNewProduct = function (authorId, title, content, img, subcategory0, subcategory1, styles, sex, subImg1, subImg2, subImg3, subImg4, subImg5, subImg6, productionCost, sell, sellPrice, sellNote, rental, rentalPrice, rentalNote) {
        var _this = this;
        var _promise = Q.defer();
        var promisesList = [];
        var now = new Date();
        var query = "INSERT INTO wp2_posts (ID, post_author, post_content, post_title, post_status, comment_status, ping_status, post_name, post_type, post_date, post_date_gmt) " + "VALUES (NULL, '" + authorId + "', '" + content + "', '" + title + "', 'publish', 'open', 'open', '" + title + "', 'post', '" + now.toISOString() + "','" + now.toISOString() + "')";
        this.db.query_db(query).then(function (data) {
            var guid = "http://sof.tokyo/?p=" + data['insertId'];
            var query2 = "UPDATE wp2_posts SET guid = '" + guid + "' WHERE ID = " + data['insertId'];
            _this.db.query_db(query2).then(function (data2) {
                var query3 = "INSERT INTO wp2_postmeta (meta_id, post_id, meta_key, meta_value)" + "VALUES ";
                if (img) {
                    var imagePromise = Q.defer();
                    promisesList.push(imagePromise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__postImage').then(function (result) {
                        imagePromise.resolve(result);
                    });
                }
                ;
                if (subcategory0)
                    query3 = query3.concat("(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__category_0','" + subcategory0 + "') ");
                if (subcategory1)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__category_1','" + subcategory1 + "') ");
                if (styles) {
                    for (var i in styles) {
                        query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__styles','" + styles[i] + "') ");
                    }
                }
                ;
                if (sex)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__sex','" + sex + "') ");
                if (subImg1) {
                    var subimage1Promise = Q.defer();
                    promisesList.push(subimage1Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage1').then(function (result) {
                        subimage1Promise.resolve(result);
                    });
                }
                ;
                if (subImg2) {
                    var subimage2Promise = Q.defer();
                    promisesList.push(subimage2Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage2').then(function (result) {
                        subimage2Promise.resolve(result);
                    });
                }
                ;
                if (subImg3) {
                    var subimage3Promise = Q.defer();
                    promisesList.push(subimage3Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage3').then(function (result) {
                        subimage3Promise.resolve(result);
                    });
                }
                ;
                if (subImg4) {
                    var subimage4Promise = Q.defer();
                    promisesList.push(subimage4Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage4').then(function (result) {
                        subimage4Promise.resolve(result);
                    });
                }
                ;
                if (subImg5) {
                    var subimage5Promise = Q.defer();
                    promisesList.push(subimage1Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage5').then(function (result) {
                        subimage5Promise.resolve(result);
                    });
                }
                ;
                if (subImg6) {
                    var subimage6Promise = Q.defer();
                    promisesList.push(subimage1Promise.promise);
                    imagesServ.uploadImage(img, data['insertId'], 'sofbackend__sof_work_meta__subImage6').then(function (result) {
                        subimage6Promise.resolve(result);
                    });
                }
                ;
                if (productionCost)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__productionCost'," + productionCost + ") ");
                if (sell)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__sell','" + sell + "') ");
                if (sellPrice)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__sellPrice'," + sellPrice + ") ");
                if (sellNote)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__sellNote','" + sellNote + "') ");
                if (rental)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__rental','" + rental + "') ");
                if (rentalPrice)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__rentalPrice'," + rentalPrice + ") ");
                if (rentalNote)
                    query3 = query3.concat(",(NULL," + data['insertId'] + ",'sofbackend__sof_work_meta__rentalNote','" + rentalNote + "') ");
                var query3Promise = Q.defer();
                promisesList.push(query3Promise.promise);
                _this.db.query_db(query3).then(function (data3) {
                    query3Promise.resolve(data3);
                });
            });
            Q.all(promisesList).then(function (values) {
                _promise.resolve(data);
            });
        });
        return _promise.promise;
    };
    ProductsService.prototype.updateProduct = function (nonce, productId, author, title, content, status, categories, tags) {
        return this.db.query('posts/update_post/?nonce=' + nonce + '&id=' + productId + '&author=' + author + '&title=' + title + '&content=' + content + '&status=' + status + '&categories=' + categories + '&tags=' + tags);
    };
    ProductsService.prototype.deleteProduct = function (nonce, productId) {
        return this.db.query('posts/delete_post/?nonce=' + nonce + '&id=' + productId);
    };
    ProductsService.prototype.createComment = function (productId, cookie, content) {
        return this.db.query('user/post_comment/?post_id=' + productId + '&cookie=' + cookie + '&comment_status=1' + '&content=' + content);
    };
    ProductsService.prototype.getProductsBySearch = function (search, page) {
        var _searchPromise = Q.defer();
        this.db.query('core/get_search_results/?count=4&search=' + search + '&page=' + page).then(function (results) {
            var _postAuthorPopulate = [];
            results['posts'].forEach(function (result) {
                var authorPromise = Q.defer();
                _postAuthorPopulate.push(authorPromise.promise);
                authServ.getUserAvatar(result.author.id, "thumb").then(function (data) {
                    result['author']['avatar'] = data['avatar'];
                    authorPromise.resolve(data);
                    metadataServ.getProductMetadata(result.id).then(function (data2) {
                        result['metadata'] = data2;
                    });
                });
            });
            Q.all(_postAuthorPopulate).then(function () {
                _searchPromise.resolve(results);
            });
        });
        return _searchPromise.promise;
    };
    ProductsService.prototype.getProductsRankingByLikes = function () {
        var _this = this;
        var _responsePromise = Q.defer();
        var _productsPromises = [];
        var _response = {
            posts: []
        };
        var query = "SELECT * FROM " + "( " + "SELECT wp2_posts.ID AS post_id, " + "wp2_posts.post_title AS title, " + "wp2_posts.post_date_gmt AS date, " + "wp2_postmeta.meta_value AS likes, " + "wp2_users.display_name AS author " + "FROM `wp2_posts` " + "JOIN wp2_users ON wp2_posts.post_author = wp2_users.ID " + "JOIN wp2_postmeta ON wp2_posts.ID = wp2_postmeta.post_id " + "WHERE wp2_postmeta.meta_key = '_item_likes' " + ") table1 " + "ORDER BY likes DESC " + "LIMIT 5";
        this.db.query_db(query).then(function (data) {
            data.forEach(function (product) {
                var _promise = Q.defer();
                _productsPromises.push(_promise.promise);
                _this.getProductById(product['post_id']).then(function (result) {
                    _promise.resolve(result['post']);
                });
            });
            Q.all(_productsPromises).then(function (results) {
                _responsePromise.resolve(results);
            });
        });
        return _responsePromise.promise;
    };
    ProductsService.prototype.getProductsRankingByVisits = function () {
        var _promise = Q.defer();
        var query = "SELECT * FROM " + "( " + "SELECT wp2_posts.ID AS post_id, " + "wp2_posts.post_title AS title, " + "wp2_posts.post_date_gmt AS date, " + "wp2_users.display_name AS author, " + "wp2_post_views.count AS visits " + "FROM `wp2_posts` " + "JOIN wp2_users ON wp2_posts.post_author = wp2_users.ID " + "JOIN wp2_post_views ON wp2_posts.ID = wp2_post_views.id " + "WHERE wp2_post_views.period = 'total' " + ") table1 " + "JOIN " + "( " + "SELECT wp2_postmeta.post_id, " + "wp2_postmeta.meta_value AS image " + "FROM wp2_postmeta " + "WHERE wp2_postmeta.meta_key = 'sofbackend__sof_work_meta__postImage' " + ") table2 " + "ON table1.post_id = table2.post_id " + "ORDER BY visits DESC " + "LIMIT 10";
        this.db.query_db(query).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    return ProductsService;
})();
exports.ProductsService = ProductsService;
;

//# sourceMappingURL=data:application/json;base64,