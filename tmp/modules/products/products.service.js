/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var ProductsService = (function () {
    function ProductsService() {
        this.db = connection.service;
    }
    ProductsService.prototype.getProductsNew = function (page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_recent_posts&count=4&page=' + page).then(function (results) {
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductsList = function (page) {
        var _listPromise = Q.defer();
        this.db.query('core/?json=get_posts&count=4&page=' + page).then(function (results) {
            _listPromise.resolve(results);
        });
        return _listPromise.promise;
    };
    ProductsService.prototype.getProductById = function (productId) {
        return this.db.query('core/get_post/?id=' + productId);
    };
    ProductsService.prototype.getProductsByAuthor = function (authorId, page) {
        return this.db.query('core/get_author_posts/?count=4&id=' + authorId + '&page=' + page);
    };
    ProductsService.prototype.getProductsByCategory = function (categoryId, page) {
        return this.db.query('core/get_category_posts/?count=4&id=' + categoryId + '&page=' + page);
    };
    ProductsService.prototype.getProductsByTag = function (tagId, page) {
        return this.db.query('core/get_tag_posts/?count=4&id=' + tagId + '&page=' + page);
    };
    ProductsService.prototype.createProduct = function (nonce, author, title, content, status, categories, tags) {
        return this.db.query('posts/create_post/?nonce=' + nonce + '&author=' + author + '&title=' + title + '&content=' + content + '&status=' + status + '&categories=' + categories + '&tags=' + tags);
    };
    ProductsService.prototype.updateProduct = function (nonce, productId, author, title, content, status, categories, tags) {
        return this.db.query('posts/update_post/?nonce=' + nonce + '&id=' + productId + '&author=' + author + '&title=' + title + '&content=' + content + '&status=' + status + '&categories=' + categories + '&tags=' + tags);
    };
    ProductsService.prototype.deleteProduct = function (nonce, productId) {
        return this.db.query('posts/delete_post/?nonce=' + nonce + '&id=' + productId);
    };
    ProductsService.prototype.createComment = function (productId, cookie, content) {
        return this.db.query('user/post_comment/?post_id=' + productId + '&cookie=' + cookie + '&comment_status=1' + '&content=' + content);
    };
    return ProductsService;
})();
exports.ProductsService = ProductsService;
;

//# sourceMappingURL=data:application/json;base64,