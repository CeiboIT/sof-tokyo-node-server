/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var cloudinary = require('cloudinary');
var conf = require('../../optin.conf');
var metadata = require("../metadata/metadata.service");
var metadataServ = new metadata.MetadataService();
cloudinary.config({
    cloud_name: conf.cloudinary.cloud_name,
    api_key: conf.cloudinary.api_key,
    api_secret: conf.cloudinary.api_secret
});
var ImagesService = (function () {
    function ImagesService() {
    }
    ImagesService.prototype.uploadImage = function (file, productId, field) {
        var _uploadPromise = Q.defer();
        // upload -base64 data- to cloudinary
        cloudinary.uploader.upload(file, function (result) {
            // save cloudinary result url as post metadata field
            metadataServ.createProductImage(productId, field, result.url).then(function (result2) {
                _uploadPromise.resolve(result);
            });
        });
        return _uploadPromise.promise;
    };
    ImagesService.prototype.updateImage = function (file, productId, field) {
        var _updatePromise = Q.defer();
        // upload -base64 data- to cloudinary
        cloudinary.uploader.upload(file, function (result) {
            // save cloudinary result url as post metadata field
            metadataServ.updateProductImage(productId, field, result.url).then(function (result2) {
                _updatePromise.resolve(result);
            });
        });
        return _updatePromise.promise;
    };
    return ImagesService;
})();
exports.ImagesService = ImagesService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvaW1hZ2VzL2ltYWdlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIkltYWdlc1NlcnZpY2UiLCJJbWFnZXNTZXJ2aWNlLmNvbnN0cnVjdG9yIiwiSW1hZ2VzU2VydmljZS51cGxvYWRJbWFnZSIsIkltYWdlc1NlcnZpY2UudXBkYXRlSW1hZ2UiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXZDLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFDMUQsSUFBSSxZQUFZLEdBQUcsSUFBSSxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7QUFFbEQsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVU7SUFDdEMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTztJQUNoQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVO0NBQ3pDLENBQUMsQ0FBQztBQVFILElBQWEsYUFBYTtJQUExQkEsU0FBYUEsYUFBYUE7SUFrQzFCQyxDQUFDQTtJQWhDR0QsbUNBQVdBLEdBQVhBLFVBQVlBLElBQUlBLEVBQUVBLFNBQVNBLEVBQUVBLEtBQUtBO1FBQzlCRSxJQUFJQSxjQUFjQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUvQkEsQUFDQUEscUNBRHFDQTtRQUNyQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsRUFBRUEsVUFBVUEsTUFBTUE7WUFFN0MsQUFDQSxvREFEb0Q7WUFDcEQsWUFBWSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUN4RCxJQUFJLENBQUMsVUFBQyxPQUFPO2dCQUNWLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2xDQSxDQUFDQTtJQUVERixtQ0FBV0EsR0FBWEEsVUFBWUEsSUFBSUEsRUFBRUEsU0FBU0EsRUFBRUEsS0FBS0E7UUFDOUJHLElBQUlBLGNBQWNBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBRS9CQSxBQUNBQSxxQ0FEcUNBO1FBQ3JDQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxVQUFVQSxNQUFNQTtZQUU3QyxBQUNBLG9EQURvRDtZQUNwRCxZQUFZLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ3hELElBQUksQ0FBQyxVQUFDLE9BQU87Z0JBQ1YsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFFSEEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFFbENBLENBQUNBO0lBQ0xILG9CQUFDQTtBQUFEQSxDQWxDQSxBQWtDQ0EsSUFBQTtBQWxDWSxxQkFBYSxHQUFiLGFBa0NaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvaW1hZ2VzL2ltYWdlcy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbnZhciBjbG91ZGluYXJ5ID0gcmVxdWlyZSgnY2xvdWRpbmFyeScpO1xudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9vcHRpbi5jb25mJyk7XG5cbmltcG9ydCBtZXRhZGF0YSA9IHJlcXVpcmUoXCIuLi9tZXRhZGF0YS9tZXRhZGF0YS5zZXJ2aWNlXCIpO1xudmFyIG1ldGFkYXRhU2VydiA9IG5ldyBtZXRhZGF0YS5NZXRhZGF0YVNlcnZpY2UoKTtcblxuY2xvdWRpbmFyeS5jb25maWcoe1xuICAgIGNsb3VkX25hbWU6IGNvbmYuY2xvdWRpbmFyeS5jbG91ZF9uYW1lLFxuICAgIGFwaV9rZXk6IGNvbmYuY2xvdWRpbmFyeS5hcGlfa2V5LFxuICAgIGFwaV9zZWNyZXQ6IGNvbmYuY2xvdWRpbmFyeS5hcGlfc2VjcmV0XG59KTtcblxuZXhwb3J0IGludGVyZmFjZSBJSW1hZ2VzU2VydmljZSB7XG4gICAgLy8gUE9TVFxuICAgIHVwbG9hZEltYWdlKGZpbGUsIHByb2R1Y3RJZCwgZmllbGQpOiBRLklQcm9taXNlPHt9PjtcbiAgICB1cGRhdGVJbWFnZShmaWxlLCBwcm9kdWN0SWQsIGZpZWxkKTogUS5JUHJvbWlzZTx7fT47XG59XG5cbmV4cG9ydCBjbGFzcyBJbWFnZXNTZXJ2aWNlIGltcGxlbWVudHMgSUltYWdlc1NlcnZpY2Uge1xuXG4gICAgdXBsb2FkSW1hZ2UoZmlsZSwgcHJvZHVjdElkLCBmaWVsZCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF91cGxvYWRQcm9taXNlID0gUS5kZWZlcigpO1xuXG4gICAgICAgIC8vIHVwbG9hZCAtYmFzZTY0IGRhdGEtIHRvIGNsb3VkaW5hcnlcbiAgICAgICAgY2xvdWRpbmFyeS51cGxvYWRlci51cGxvYWQoZmlsZSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAvLyBzYXZlIGNsb3VkaW5hcnkgcmVzdWx0IHVybCBhcyBwb3N0IG1ldGFkYXRhIGZpZWxkXG4gICAgICAgICAgICBtZXRhZGF0YVNlcnYuY3JlYXRlUHJvZHVjdEltYWdlKHByb2R1Y3RJZCwgZmllbGQsIHJlc3VsdC51cmwpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdDIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgX3VwbG9hZFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfdXBsb2FkUHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIHVwZGF0ZUltYWdlKGZpbGUsIHByb2R1Y3RJZCwgZmllbGQpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfdXBkYXRlUHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICAvLyB1cGxvYWQgLWJhc2U2NCBkYXRhLSB0byBjbG91ZGluYXJ5XG4gICAgICAgIGNsb3VkaW5hcnkudXBsb2FkZXIudXBsb2FkKGZpbGUsIGZ1bmN0aW9uIChyZXN1bHQpIHtcblxuICAgICAgICAgICAgLy8gc2F2ZSBjbG91ZGluYXJ5IHJlc3VsdCB1cmwgYXMgcG9zdCBtZXRhZGF0YSBmaWVsZFxuICAgICAgICAgICAgbWV0YWRhdGFTZXJ2LnVwZGF0ZVByb2R1Y3RJbWFnZShwcm9kdWN0SWQsIGZpZWxkLCByZXN1bHQudXJsKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF91cGRhdGVQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3VwZGF0ZVByb21pc2UucHJvbWlzZTtcblxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=