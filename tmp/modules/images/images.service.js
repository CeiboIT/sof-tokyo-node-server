/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var cloudinary = require('cloudinary');
var conf = require('../../optin.conf');
cloudinary.config({
    cloud_name: conf.cloudinary.cloud_name,
    api_key: conf.cloudinary.api_key,
    api_secret: conf.cloudinary.api_secret
});
var ImageService = (function () {
    function ImageService() {
    }
    ImageService.prototype.uploadImage = function (body) {
        var _uploadPromise = Q.defer();
        cloudinary.uploader.upload(body.file, function (result) {
            _uploadPromise.resolve(result);
        });
        return _uploadPromise.promise;
    };
    return ImageService;
})();
exports.ImageService = ImageService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvaW1hZ2VzL2ltYWdlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIkltYWdlU2VydmljZSIsIkltYWdlU2VydmljZS5jb25zdHJ1Y3RvciIsIkltYWdlU2VydmljZS51cGxvYWRJbWFnZSJdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBQ2xELDREQUE0RDtBQUU1RCxJQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUN4QixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdkMsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVU7SUFDdEMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTztJQUNoQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVO0NBQ3pDLENBQUMsQ0FBQztBQU9ILElBQWEsWUFBWTtJQUF6QkEsU0FBYUEsWUFBWUE7SUFXekJDLENBQUNBO0lBVEdELGtDQUFXQSxHQUFYQSxVQUFZQSxJQUFJQTtRQUNaRSxJQUFJQSxjQUFjQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUUvQkEsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsVUFBVUEsTUFBTUE7WUFDbEQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2xDQSxDQUFDQTtJQUNMRixtQkFBQ0E7QUFBREEsQ0FYQSxBQVdDQSxJQUFBO0FBWFksb0JBQVksR0FBWixZQVdaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvaW1hZ2VzL2ltYWdlcy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbnZhciBjbG91ZGluYXJ5ID0gcmVxdWlyZSgnY2xvdWRpbmFyeScpO1xudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9vcHRpbi5jb25mJyk7XG5cbmNsb3VkaW5hcnkuY29uZmlnKHsgXG4gICAgY2xvdWRfbmFtZTogY29uZi5jbG91ZGluYXJ5LmNsb3VkX25hbWUsXG4gICAgYXBpX2tleTogY29uZi5jbG91ZGluYXJ5LmFwaV9rZXksXG4gICAgYXBpX3NlY3JldDogY29uZi5jbG91ZGluYXJ5LmFwaV9zZWNyZXRcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIElJbWFnZXNTZXJ2aWNlIHtcbiAgICAvLyBQT1NUXG4gICAgdXBsb2FkSW1hZ2UoYm9keTogYW55KTogUS5JUHJvbWlzZTx7fT47XG59XG5cbmV4cG9ydCBjbGFzcyBJbWFnZVNlcnZpY2UgaW1wbGVtZW50cyBJSW1hZ2VzU2VydmljZSB7XG5cbiAgICB1cGxvYWRJbWFnZShib2R5KTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3VwbG9hZFByb21pc2UgPSBRLmRlZmVyKCk7XG5cbiAgICAgICAgY2xvdWRpbmFyeS51cGxvYWRlci51cGxvYWQoYm9keS5maWxlLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBfdXBsb2FkUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfdXBsb2FkUHJvbWlzZS5wcm9taXNlO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=