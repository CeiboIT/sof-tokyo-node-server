'use strict';
///<reference path="../../../typings/tsd.d.ts" />
///<reference path="./categories.service.ts" />
var service = require('./metadata.service');
var Joi = require('joi');
var MetadataService = new service.MetadataService();
var _prefix = '/metadata';
var metadata = [
    {
        method: 'GET',
        path: _prefix + '/subcategories0/list',
        handler: function (request, reply) {
            MetadataService.getSubcategories0List().then(function (data) {
                reply({ subcategories0: data });
            });
        },
        config: {
            description: 'Retrieve Subcategories0 list',
            tags: ['metadata'],
            notes: [
                "Can be selected 1+ per Product"
            ]
        }
    },
    {
        method: 'GET',
        path: _prefix + '/subcategories1/list',
        handler: function (request, reply) {
            MetadataService.getSubcategories1List().then(function (data) {
                reply({ subcategories1: data });
            });
        },
        config: {
            description: 'Retrieve Subcategories1 list',
            tags: ['metadata'],
            notes: [
                "Can be selected 1+ per Product"
            ]
        }
    },
    {
        method: 'GET',
        path: _prefix + '/schools/list',
        handler: function (request, reply) {
            MetadataService.getSchoolsList().then(function (data) {
                reply({ schools: data });
            });
        },
        config: {
            description: 'Retrieve Schools list',
            tags: ['metadata'],
            notes: [
                "This is defined to the Post Member"
            ]
        }
    },
    {
        method: 'GET',
        path: _prefix + '/styles/list',
        handler: function (request, reply) {
            MetadataService.getStylesList().then(function (data) {
                reply({ styles: data });
            });
        },
        config: {
            description: 'Retrieve Styles list',
            tags: ['metadata'],
            notes: [
                "Can be selected 1+ per Product"
            ]
        }
    },
    {
        method: 'GET',
        path: _prefix + '/schools/member/{memberId}',
        handler: function (request, reply) {
            MetadataService.getSchoolByMemberId(request.params.memberId).then(function (data) {
                reply({ school: data[0] });
            });
        },
        config: {
            description: 'Retrieve School from matched MemberID',
            tags: ['metadata']
        }
    },
    {
        method: 'GET',
        path: _prefix + '/likes/product/{productId}',
        handler: function (request, reply) {
            MetadataService.getProductLikes(request.params.productId).then(function (data) {
                reply({ likes: data[0] });
            });
        },
        config: {
            description: 'Retrieve Likes from matched ProductID',
            tags: ['metadata']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/likes/product',
        handler: function (request, reply) {
            MetadataService.createProductLike(request.payload.productId).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    productId: Joi.number().integer()
                }
            },
            description: 'Create a Like to matched ProductID',
            tags: ['metadata']
        }
    },
    {
        method: 'GET',
        path: _prefix + '/unique_visits/product/{productId}',
        handler: function (request, reply) {
            MetadataService.getProductUniqueVisits(request.params.productId).then(function (data) {
                reply({ unique_visits: data[0] });
            });
        },
        config: {
            description: 'Retrieve Unique Visits from matched ProductID',
            tags: ['metadata']
        }
    },
    {
        method: 'GET',
        path: _prefix + '/total_visits/product/{productId}',
        handler: function (request, reply) {
            MetadataService.getProductTotalVisits(request.params.productId).then(function (data) {
                reply({ total_visits: data[0] });
            });
        },
        config: {
            description: 'Retrieve Total Visits from matched ProductID',
            tags: ['metadata']
        }
    }
];
module.exports = metadata;

//# sourceMappingURL=data:application/json;base64,