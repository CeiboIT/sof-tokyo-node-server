/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var MetadataService = (function () {
    function MetadataService() {
        this.db = connection.service;
    }
    MetadataService.prototype.getSubcategories0List = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT option_value FROM wp2_options WHERE option_name = 'sofbackend__sof_options'").then(function (data) {
            var toString = data[0].option_value;
            console.log(toString.sli);
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSubcategories1List = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_1'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSchoolsList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_1'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getStylesList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__style'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    return MetadataService;
})();
exports.MetadataService = MetadataService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvbWV0YWRhdGEvbWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6WyJNZXRhZGF0YVNlcnZpY2UiLCJNZXRhZGF0YVNlcnZpY2UuY29uc3RydWN0b3IiLCJNZXRhZGF0YVNlcnZpY2UuZ2V0U3ViY2F0ZWdvcmllczBMaXN0IiwiTWV0YWRhdGFTZXJ2aWNlLmdldFN1YmNhdGVnb3JpZXMxTGlzdCIsIk1ldGFkYXRhU2VydmljZS5nZXRTY2hvb2xzTGlzdCIsIk1ldGFkYXRhU2VydmljZS5nZXRTdHlsZXNMaXN0Il0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRTVELElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUE7QUFXL0QsSUFBYSxlQUFlO0lBQTVCQSxTQUFhQSxlQUFlQTtRQUNoQkMsT0FBRUEsR0FBR0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUF5Q3BDQSxDQUFDQTtJQXZDR0QsK0NBQXFCQSxHQUFyQkE7UUFDSUUsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLG9GQUFvRkEsQ0FBQ0EsQ0FDakdBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBO1lBRXBDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFBQTtZQUV6QkEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVERiwrQ0FBcUJBLEdBQXJCQTtRQUNJRyxJQUFJQSxZQUFZQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsaUhBQWlIQSxDQUFDQSxDQUM5SEEsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFDUEEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVESCx3Q0FBY0EsR0FBZEE7UUFDSUksSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLGlIQUFpSEEsQ0FBQ0EsQ0FDOUhBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQy9CQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFREosdUNBQWFBLEdBQWJBO1FBQ0lLLElBQUlBLFlBQVlBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSw0R0FBNEdBLENBQUNBLENBQ3pIQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBQ0xMLHNCQUFDQTtBQUFEQSxDQTFDQSxBQTBDQ0EsSUFBQTtBQTFDWSx1QkFBZSxHQUFmLGVBMENaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvbWV0YWRhdGEvbWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBRID0gcmVxdWlyZShcInFcIik7XG5pbXBvcnQgY29ubmVjdGlvbiA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlJylcblxuZXhwb3J0IGludGVyZmFjZSBJTWV0YWRhdGFTZXJ2aWNlIHtcbiAgICAvLyBHRVRcbiAgICBnZXRTdWJjYXRlZ29yaWVzMExpc3QoKTogUS5JUHJvbWlzZTx7fT47XG4gICAgZ2V0U3ViY2F0ZWdvcmllczFMaXN0KCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFNjaG9vbHNMaXN0KCk6IFEuSVByb21pc2U8e30+O1xuICAgIGdldFN0eWxlc0xpc3QoKTogUS5JUHJvbWlzZTx7fT47XG59XG5cblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhU2VydmljZSBpbXBsZW1lbnRzIElNZXRhZGF0YVNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGIgPSBjb25uZWN0aW9uLnNlcnZpY2U7XG5cbiAgICBnZXRTdWJjYXRlZ29yaWVzMExpc3QoKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKFwiU0VMRUNUIG9wdGlvbl92YWx1ZSBGUk9NIHdwMl9vcHRpb25zIFdIRVJFIG9wdGlvbl9uYW1lID0gJ3NvZmJhY2tlbmRfX3NvZl9vcHRpb25zJ1wiKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmcgPSBkYXRhWzBdLm9wdGlvbl92YWx1ZTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvU3RyaW5nLnNsaSlcblxuICAgICAgICAgICAgICAgIF9saXN0UHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFN1YmNhdGVnb3JpZXMxTGlzdCgpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJTRUxFQ1QgRElTVElOQ1QgbWV0YV9rZXksIG1ldGFfdmFsdWUgRlJPTSB3cDJfcG9zdG1ldGEgV0hFUkUgbWV0YV9rZXkgPSAnc29mYmFja2VuZF9fc29mX3dvcmtfbWV0YV9fY2F0ZWdvcnlfMSdcIilcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX2xpc3RQcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0U2Nob29sc0xpc3QoKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKFwiU0VMRUNUIERJU1RJTkNUIG1ldGFfa2V5LCBtZXRhX3ZhbHVlIEZST00gd3AyX3Bvc3RtZXRhIFdIRVJFIG1ldGFfa2V5ID0gJ3NvZmJhY2tlbmRfX3NvZl93b3JrX21ldGFfX2NhdGVnb3J5XzEnXCIpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9saXN0UHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldFN0eWxlc0xpc3QoKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX2xpc3RQcm9taXNlID0gUS5kZWZlcigpO1xuICAgICAgICB0aGlzLmRiLnF1ZXJ5X2RiKFwiU0VMRUNUIERJU1RJTkNUIG1ldGFfa2V5LCBtZXRhX3ZhbHVlIEZST00gd3AyX3Bvc3RtZXRhIFdIRVJFIG1ldGFfa2V5ID0gJ3NvZmJhY2tlbmRfX3NvZl93b3JrX21ldGFfX3N0eWxlJ1wiKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfbGlzdFByb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfbGlzdFByb21pc2UucHJvbWlzZTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9