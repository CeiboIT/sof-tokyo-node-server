/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var MetadataService = (function () {
    function MetadataService() {
        this.db = connection.service;
    }
    MetadataService.prototype.getSubcategories0List = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_value AS value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_0'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSubcategories1List = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_value AS value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_1'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSchoolsList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT value FROM wp2_bp_xprofile_data WHERE field_id=4").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getStylesList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_value AS value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__style'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSchoolByMemberId = function (memberId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT value FROM wp2_bp_xprofile_data WHERE field_id=4 AND user_id=" + memberId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    MetadataService.prototype.getProductLikes = function (productId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT meta_value AS value FROM wp2_postmeta WHERE meta_key='_item_likes' AND post_id=" + productId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    MetadataService.prototype.createProductLike = function (productId) {
        var _promise = Q.defer();
        this.db.query_db("UPDATE wp2_postmeta SET meta_value = meta_value + 1 WHERE meta_key='_item_likes' AND post_id=" + productId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    MetadataService.prototype.getProductUniqueVisits = function (productId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT COUNT(DISTINCT meta_value) AS value FROM wp2_postmeta WHERE meta_key = 'visit' AND post_id=" + productId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    MetadataService.prototype.getProductTotalVisits = function (productId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT COUNT(meta_value) AS value FROM wp2_postmeta WHERE meta_key = 'visit' AND post_id=" + productId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    return MetadataService;
})();
exports.MetadataService = MetadataService;
;

//# sourceMappingURL=data:application/json;base64,