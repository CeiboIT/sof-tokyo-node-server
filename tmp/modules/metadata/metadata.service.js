/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var MetadataService = (function () {
    function MetadataService() {
        this.db = connection.service;
    }
    MetadataService.prototype.getSubcategoriesList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_1'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getSchoolsList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__category_1'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getStylesList = function () {
        var _listPromise = Q.defer();
        this.db.query_db("SELECT DISTINCT meta_key, meta_value FROM wp2_postmeta WHERE meta_key = 'sofbackend__sof_work_meta__style'").then(function (data) {
            _listPromise.resolve(data);
        });
        return _listPromise.promise;
    };
    MetadataService.prototype.getMetadataByProductId = function (productId) {
        var _promise = Q.defer();
        this.db.query_db("SELECT meta_key, meta_value FROM wp2_postmeta WHERE post_id=" + productId).then(function (data) {
            _promise.resolve(data);
        });
        return _promise.promise;
    };
    return MetadataService;
})();
exports.MetadataService = MetadataService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvbWV0YWRhdGEvbWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6WyJNZXRhZGF0YVNlcnZpY2UiLCJNZXRhZGF0YVNlcnZpY2UuY29uc3RydWN0b3IiLCJNZXRhZGF0YVNlcnZpY2UuZ2V0U3ViY2F0ZWdvcmllc0xpc3QiLCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2Nob29sc0xpc3QiLCJNZXRhZGF0YVNlcnZpY2UuZ2V0U3R5bGVzTGlzdCIsIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YUJ5UHJvZHVjdElkIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFDbEQsNERBQTREO0FBRTVELElBQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLElBQU8sVUFBVSxXQUFXLGtDQUFrQyxDQUFDLENBQUE7QUFZL0QsSUFBYSxlQUFlO0lBQTVCQSxTQUFhQSxlQUFlQTtRQUNoQkMsT0FBRUEsR0FBR0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFxQ3BDQSxDQUFDQTtJQW5DR0QsOENBQW9CQSxHQUFwQkE7UUFDSUUsSUFBSUEsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLGlIQUFpSEEsQ0FBQ0EsQ0FDOUhBLElBQUlBLENBQUNBLFVBQUNBLElBQUlBO1lBQ1BBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQy9CQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFREYsd0NBQWNBLEdBQWRBO1FBQ0lHLElBQUlBLFlBQVlBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxpSEFBaUhBLENBQUNBLENBQzlIQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDaENBLENBQUNBO0lBRURILHVDQUFhQSxHQUFiQTtRQUNJSSxJQUFJQSxZQUFZQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsNEdBQTRHQSxDQUFDQSxDQUN6SEEsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFDUEEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLENBQUNBLENBQUNBLENBQUFBO1FBQ05BLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVESixnREFBc0JBLEdBQXRCQSxVQUF1QkEsU0FBU0E7UUFDNUJLLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSw4REFBOERBLEdBQUdBLFNBQVNBLENBQUNBLENBQ3ZGQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNQQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBQ0xMLHNCQUFDQTtBQUFEQSxDQXRDQSxBQXNDQ0EsSUFBQTtBQXRDWSx1QkFBZSxHQUFmLGVBc0NaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvbWV0YWRhdGEvbWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBRID0gcmVxdWlyZShcInFcIik7XG5pbXBvcnQgY29ubmVjdGlvbiA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlJylcblxuZXhwb3J0IGludGVyZmFjZSBJTWV0YWRhdGFTZXJ2aWNlIHtcbiAgICAvLyBHRVRcbiAgICBnZXRTdWJjYXRlZ29yaWVzTGlzdCgpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRTY2hvb2xzTGlzdCgpOiBRLklQcm9taXNlPHt9PjtcbiAgICBnZXRTdHlsZXNMaXN0KCk6IFEuSVByb21pc2U8e30+O1xuXG4gICAgZ2V0TWV0YWRhdGFCeVByb2R1Y3RJZChwcm9kdWN0SWQpOiBRLklQcm9taXNlPHt9Pjtcbn1cblxuXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFTZXJ2aWNlIGltcGxlbWVudHMgSU1ldGFkYXRhU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkYiA9IGNvbm5lY3Rpb24uc2VydmljZTtcblxuICAgIGdldFN1YmNhdGVnb3JpZXNMaXN0KCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9saXN0UHJvbWlzZSA9IFEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihcIlNFTEVDVCBESVNUSU5DVCBtZXRhX2tleSwgbWV0YV92YWx1ZSBGUk9NIHdwMl9wb3N0bWV0YSBXSEVSRSBtZXRhX2tleSA9ICdzb2ZiYWNrZW5kX19zb2Zfd29ya19tZXRhX19jYXRlZ29yeV8xJ1wiKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBfbGlzdFByb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfbGlzdFByb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBnZXRTY2hvb2xzTGlzdCgpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJTRUxFQ1QgRElTVElOQ1QgbWV0YV9rZXksIG1ldGFfdmFsdWUgRlJPTSB3cDJfcG9zdG1ldGEgV0hFUkUgbWV0YV9rZXkgPSAnc29mYmFja2VuZF9fc29mX3dvcmtfbWV0YV9fY2F0ZWdvcnlfMSdcIilcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgX2xpc3RQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gX2xpc3RQcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0U3R5bGVzTGlzdCgpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfbGlzdFByb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJTRUxFQ1QgRElTVElOQ1QgbWV0YV9rZXksIG1ldGFfdmFsdWUgRlJPTSB3cDJfcG9zdG1ldGEgV0hFUkUgbWV0YV9rZXkgPSAnc29mYmFja2VuZF9fc29mX3dvcmtfbWV0YV9fc3R5bGUnXCIpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9saXN0UHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIF9saXN0UHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIGdldE1ldGFkYXRhQnlQcm9kdWN0SWQocHJvZHVjdElkKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJTRUxFQ1QgbWV0YV9rZXksIG1ldGFfdmFsdWUgRlJPTSB3cDJfcG9zdG1ldGEgV0hFUkUgcG9zdF9pZD1cIiArIHByb2R1Y3RJZClcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=