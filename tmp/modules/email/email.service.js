/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var conf = require('../../optin.conf');
var mandrill = require('mandrill-api/mandrill');
var emailClient = new mandrill.Mandrill(conf.mandrill.key);
if (emailClient.apikey)
    console.log('âœ“ Mandrill: running');
var EmailService = (function () {
    function EmailService() {
    }
    EmailService.prototype.sendTestEmail = function () {
        var _promise = Q.defer();
        var message = {
            "html": "<p>Testing sof-tokyo-node-server</p>",
            "subject": "test email",
            "from_email": conf.mandrill.adminEmail,
            "from_name": conf.mandrill.adminName,
            "to": [{
                "email": conf.mandrill.userEmail,
                "name": conf.mandrill.userName,
                "type": "to"
            }]
        };
        emailClient.messages.send({
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve('Message sent');
            }
        });
        return _promise.promise;
    };
    EmailService.prototype.sendNewEmail = function (fromEmail, fromName, schools) {
        var _promise = Q.defer();
        var message = {
            "subject": "User " + fromName + " requires a book",
            "from_email": "matias.caputti@gmail.com",
            "from_name": "Info sof-tokyo",
            "to": [{
                "email": "matias.caputti@gmail.com",
                //"email": "info@sof.tokyo",
                "type": "to"
            }],
            "merge": true,
            "merge_language": "handlebars",
            "global_merge_vars": [
                {
                    "name": "username",
                    "content": fromName
                },
                {
                    "name": "email",
                    "content": fromEmail
                },
                {
                    "name": "schools",
                    "content": schools
                }
            ]
        };
        emailClient.messages.sendTemplate({
            template_name: 'sofTokyoBooksSales',
            template_content: {},
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve({ status: 'ok', message: 'Message sent' });
            }
        }, function (error) {
            _promise.resolve({ status: 'error', message: error });
        });
        return _promise.promise;
    };
    return EmailService;
})();
exports.EmailService = EmailService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZW1haWwvZW1haWwuc2VydmljZS50cyJdLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2UiLCJFbWFpbFNlcnZpY2UuY29uc3RydWN0b3IiLCJFbWFpbFNlcnZpY2Uuc2VuZFRlc3RFbWFpbCIsIkVtYWlsU2VydmljZS5zZW5kTmV3RW1haWwiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFaEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQVMzRCxJQUFhLFlBQVk7SUFBekJBLFNBQWFBLFlBQVlBO0lBeUV6QkMsQ0FBQ0E7SUF4RUdELG9DQUFhQSxHQUFiQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBR0E7WUFDVkEsTUFBTUEsRUFBRUEsc0NBQXNDQTtZQUM5Q0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDdkJBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBO1lBQ3RDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQTtZQUNwQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ0hBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBO2dCQUNoQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUE7Z0JBQzlCQSxNQUFNQSxFQUFFQSxJQUFJQTthQUNmQSxDQUFDQTtTQUNMQSxDQUFDQTtRQUVGQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0QkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLEtBQUtBLEVBQUVBLEtBQUtBO1NBQ2ZBLEVBQUVBLFVBQVNBLE1BQU1BO1lBQ2QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixtQ0FBWUEsR0FBWkEsVUFBYUEsU0FBU0EsRUFBRUEsUUFBUUEsRUFBRUEsT0FBT0E7UUFDckNHLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBRXpCQSxJQUFJQSxPQUFPQSxHQUFHQTtZQUNWQSxTQUFTQSxFQUFFQSxPQUFPQSxHQUFHQSxRQUFRQSxHQUFHQSxrQkFBa0JBO1lBQ2xEQSxZQUFZQSxFQUFFQSwwQkFBMEJBO1lBQ3hDQSxXQUFXQSxFQUFFQSxnQkFBZ0JBO1lBQzdCQSxJQUFJQSxFQUFFQSxDQUFDQTtnQkFDSEEsT0FBT0EsRUFBRUEsMEJBQTBCQTtnQkFDbkNBLEFBQ0FBLDRCQUQ0QkE7Z0JBQzVCQSxNQUFNQSxFQUFFQSxJQUFJQTthQUNmQSxDQUFDQTtZQUNGQSxPQUFPQSxFQUFFQSxJQUFJQTtZQUNiQSxnQkFBZ0JBLEVBQUVBLFlBQVlBO1lBQzlCQSxtQkFBbUJBLEVBQUVBO2dCQUNqQkE7b0JBQ0lBLE1BQU1BLEVBQUVBLFVBQVVBO29CQUNsQkEsU0FBU0EsRUFBRUEsUUFBUUE7aUJBQ3RCQTtnQkFDREE7b0JBQ0lBLE1BQU1BLEVBQUVBLE9BQU9BO29CQUNmQSxTQUFTQSxFQUFFQSxTQUFTQTtpQkFDdkJBO2dCQUNEQTtvQkFDSUEsTUFBTUEsRUFBRUEsU0FBU0E7b0JBQ2pCQSxTQUFTQSxFQUFFQSxPQUFPQTtpQkFDckJBO2FBQ0pBO1NBQ0pBLENBQUNBO1FBRUZBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBO1lBQzlCQSxhQUFhQSxFQUFFQSxvQkFBb0JBO1lBQ25DQSxnQkFBZ0JBLEVBQUVBLEVBQUVBO1lBQ3BCQSxPQUFPQSxFQUFFQSxPQUFPQTtZQUNoQkEsS0FBS0EsRUFBRUEsS0FBS0E7U0FDZkEsRUFBRUEsVUFBU0EsTUFBTUE7WUFDZCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDO1lBQzdELENBQUM7UUFDTCxDQUFDLEVBQUVBLFVBQVNBLEtBQUtBO1lBQ2IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFDTEgsbUJBQUNBO0FBQURBLENBekVBLEFBeUVDQSxJQUFBO0FBekVZLG9CQUFZLEdBQVosWUF5RVosQ0FBQTtBQUFBLENBQUMiLCJmaWxlIjoibW9kdWxlcy9lbWFpbC9lbWFpbC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbnZhciBjb25mID0gcmVxdWlyZSgnLi4vLi4vb3B0aW4uY29uZicpO1xudmFyIG1hbmRyaWxsID0gcmVxdWlyZSgnbWFuZHJpbGwtYXBpL21hbmRyaWxsJyk7XG5cbnZhciBlbWFpbENsaWVudCA9IG5ldyBtYW5kcmlsbC5NYW5kcmlsbChjb25mLm1hbmRyaWxsLmtleSk7XG5pZiAoZW1haWxDbGllbnQuYXBpa2V5KSBjb25zb2xlLmxvZygn4pyTIE1hbmRyaWxsOiBydW5uaW5nJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVtYWlsU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgc2VuZFRlc3RFbWFpbCgpOiBRLklQcm9taXNlPHt9PjtcbiAgICBzZW5kTmV3RW1haWwoZnJvbUVtYWlsLCBmcm9tTmFtZSwgdG8sIHN1YmplY3QsIGNvbnRlbnQpOiBRLklQcm9taXNlPHt9Pjtcbn1cblxuXG5leHBvcnQgY2xhc3MgRW1haWxTZXJ2aWNlIGltcGxlbWVudHMgSUVtYWlsU2VydmljZSB7XG4gICAgc2VuZFRlc3RFbWFpbCgpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIFwiaHRtbFwiOiBcIjxwPlRlc3Rpbmcgc29mLXRva3lvLW5vZGUtc2VydmVyPC9wPlwiLFxuICAgICAgICAgICAgXCJzdWJqZWN0XCI6IFwidGVzdCBlbWFpbFwiLFxuICAgICAgICAgICAgXCJmcm9tX2VtYWlsXCI6IGNvbmYubWFuZHJpbGwuYWRtaW5FbWFpbCxcbiAgICAgICAgICAgIFwiZnJvbV9uYW1lXCI6IGNvbmYubWFuZHJpbGwuYWRtaW5OYW1lLFxuICAgICAgICAgICAgXCJ0b1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiZW1haWxcIjogY29uZi5tYW5kcmlsbC51c2VyRW1haWwsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IGNvbmYubWFuZHJpbGwudXNlck5hbWUsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidG9cIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcblxuICAgICAgICBlbWFpbENsaWVudC5tZXNzYWdlcy5zZW5kKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3NlbnQnIHx8IHJlc3VsdFswXS5zdGF0dXMgPT09ICdxdWV1ZWQnKSB7XG4gICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZSgnTWVzc2FnZSBzZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIHNlbmROZXdFbWFpbChmcm9tRW1haWwsIGZyb21OYW1lLCBzY2hvb2xzKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBRLmRlZmVyKCk7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBcInN1YmplY3RcIjogXCJVc2VyIFwiICsgZnJvbU5hbWUgKyBcIiByZXF1aXJlcyBhIGJvb2tcIixcbiAgICAgICAgICAgIFwiZnJvbV9lbWFpbFwiOiBcIm1hdGlhcy5jYXB1dHRpQGdtYWlsLmNvbVwiLFxuICAgICAgICAgICAgXCJmcm9tX25hbWVcIjogXCJJbmZvIHNvZi10b2t5b1wiLFxuICAgICAgICAgICAgXCJ0b1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiZW1haWxcIjogXCJtYXRpYXMuY2FwdXR0aUBnbWFpbC5jb21cIixcbiAgICAgICAgICAgICAgICAvL1wiZW1haWxcIjogXCJpbmZvQHNvZi50b2t5b1wiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRvXCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJtZXJnZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXJnZV9sYW5ndWFnZVwiOiBcImhhbmRsZWJhcnNcIixcbiAgICAgICAgICAgIFwiZ2xvYmFsX21lcmdlX3ZhcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IGZyb21OYW1lXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImVtYWlsXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29udGVudFwiOiBmcm9tRW1haWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2Nob29sc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIjogc2Nob29sc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICBlbWFpbENsaWVudC5tZXNzYWdlcy5zZW5kVGVtcGxhdGUoe1xuICAgICAgICAgICAgdGVtcGxhdGVfbmFtZTogJ3NvZlRva3lvQm9va3NTYWxlcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZV9jb250ZW50OiB7fSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3NlbnQnIHx8IHJlc3VsdFswXS5zdGF0dXMgPT09ICdxdWV1ZWQnKSB7XG4gICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZSh7c3RhdHVzOiAnb2snLCBtZXNzYWdlOidNZXNzYWdlIHNlbnQnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoe3N0YXR1czogJ2Vycm9yJywgbWVzc2FnZTplcnJvcn0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9