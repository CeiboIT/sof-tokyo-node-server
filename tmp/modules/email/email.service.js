/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var conf = require('../../optin.conf');
var mandrill = require('mandrill-api/mandrill');
var emailClient = new mandrill.Mandrill(conf.mandrill.key);
if (emailClient.apikey)
    console.log('âœ“ Mandrill: running');
var EmailService = (function () {
    function EmailService() {
    }
    EmailService.prototype.sendTestEmail = function () {
        var _promise = Q.defer();
        var message = {
            "html": "<p>Testing sof-tokyo-node-server</p>",
            "subject": "test email",
            "from_email": conf.mandrill.adminEmail,
            "from_name": conf.mandrill.adminName,
            "to": [{
                "email": conf.mandrill.userEmail,
                "name": conf.mandrill.userName,
                "type": "to"
            }]
        };
        emailClient.messages.send({
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve('Message sent');
            }
        });
        return _promise.promise;
    };
    EmailService.prototype.sendNewEmail = function (fromEmail, fromName, schools) {
        var _promise = Q.defer();
        var message = {
            "subject": fromName + " requires a book",
            "from_email": fromEmail,
            "from_name": fromName,
            "to": [{
                "email": "matias.caputti@gmail.com",
                //"email": "info@sof.tokyo",
                "type": "to"
            }],
            "merge": true,
            "merge_language": "handlebars",
            "global_merge_vars": [
                {
                    "name": "username",
                    "content": fromName
                },
                {
                    "name": "email",
                    "content": fromEmail
                },
                {
                    "name": "schools",
                    "content": schools
                }
            ]
        };
        emailClient.messages.sendTemplate({
            template_name: 'sofTokyoBooksSales',
            template_content: {},
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve({ status: 'ok', message: 'Message sent' });
            }
        }, function (error) {
            _promise.resolve({ status: 'error', message: error });
        });
        return _promise.promise;
    };
    return EmailService;
})();
exports.EmailService = EmailService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZW1haWwvZW1haWwuc2VydmljZS50cyJdLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2UiLCJFbWFpbFNlcnZpY2UuY29uc3RydWN0b3IiLCJFbWFpbFNlcnZpY2Uuc2VuZFRlc3RFbWFpbCIsIkVtYWlsU2VydmljZS5zZW5kTmV3RW1haWwiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFaEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQVMzRCxJQUFhLFlBQVk7SUFBekJBLFNBQWFBLFlBQVlBO0lBeUV6QkMsQ0FBQ0E7SUF4RUdELG9DQUFhQSxHQUFiQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBR0E7WUFDVkEsTUFBTUEsRUFBRUEsc0NBQXNDQTtZQUM5Q0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDdkJBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBO1lBQ3RDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQTtZQUNwQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ0hBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBO2dCQUNoQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUE7Z0JBQzlCQSxNQUFNQSxFQUFFQSxJQUFJQTthQUNmQSxDQUFDQTtTQUNMQSxDQUFDQTtRQUVGQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0QkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLEtBQUtBLEVBQUVBLEtBQUtBO1NBQ2ZBLEVBQUVBLFVBQVNBLE1BQU1BO1lBQ2QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixtQ0FBWUEsR0FBWkEsVUFBYUEsU0FBU0EsRUFBRUEsUUFBUUEsRUFBRUEsT0FBT0E7UUFDckNHLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBRXpCQSxJQUFJQSxPQUFPQSxHQUFHQTtZQUNWQSxTQUFTQSxFQUFFQSxRQUFRQSxHQUFHQSxrQkFBa0JBO1lBQ3hDQSxZQUFZQSxFQUFFQSxTQUFTQTtZQUN2QkEsV0FBV0EsRUFBRUEsUUFBUUE7WUFDckJBLElBQUlBLEVBQUVBLENBQUNBO2dCQUNIQSxPQUFPQSxFQUFFQSwwQkFBMEJBO2dCQUNuQ0EsQUFDQUEsNEJBRDRCQTtnQkFDNUJBLE1BQU1BLEVBQUVBLElBQUlBO2FBQ2ZBLENBQUNBO1lBQ0ZBLE9BQU9BLEVBQUVBLElBQUlBO1lBQ2JBLGdCQUFnQkEsRUFBRUEsWUFBWUE7WUFDOUJBLG1CQUFtQkEsRUFBRUE7Z0JBQ2pCQTtvQkFDSUEsTUFBTUEsRUFBRUEsVUFBVUE7b0JBQ2xCQSxTQUFTQSxFQUFFQSxRQUFRQTtpQkFDdEJBO2dCQUNEQTtvQkFDSUEsTUFBTUEsRUFBRUEsT0FBT0E7b0JBQ2ZBLFNBQVNBLEVBQUVBLFNBQVNBO2lCQUN2QkE7Z0JBQ0RBO29CQUNJQSxNQUFNQSxFQUFFQSxTQUFTQTtvQkFDakJBLFNBQVNBLEVBQUVBLE9BQU9BO2lCQUNyQkE7YUFDSkE7U0FDSkEsQ0FBQ0E7UUFFRkEsV0FBV0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDOUJBLGFBQWFBLEVBQUVBLG9CQUFvQkE7WUFDbkNBLGdCQUFnQkEsRUFBRUEsRUFBRUE7WUFDcEJBLE9BQU9BLEVBQUVBLE9BQU9BO1lBQ2hCQSxLQUFLQSxFQUFFQSxLQUFLQTtTQUNmQSxFQUFFQSxVQUFTQSxNQUFNQTtZQUNkLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDL0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDLGNBQWMsRUFBQyxDQUFDLENBQUM7WUFDN0QsQ0FBQztRQUNMLENBQUMsRUFBRUEsVUFBU0EsS0FBS0E7WUFDYixRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUNMSCxtQkFBQ0E7QUFBREEsQ0F6RUEsQUF5RUNBLElBQUE7QUF6RVksb0JBQVksR0FBWixZQXlFWixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL2VtYWlsL2VtYWlsLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnNlcnZpY2UudHNcIiAvPlxuXG5pbXBvcnQgUSA9IHJlcXVpcmUoXCJxXCIpO1xudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9vcHRpbi5jb25mJyk7XG52YXIgbWFuZHJpbGwgPSByZXF1aXJlKCdtYW5kcmlsbC1hcGkvbWFuZHJpbGwnKTtcblxudmFyIGVtYWlsQ2xpZW50ID0gbmV3IG1hbmRyaWxsLk1hbmRyaWxsKGNvbmYubWFuZHJpbGwua2V5KTtcbmlmIChlbWFpbENsaWVudC5hcGlrZXkpIGNvbnNvbGUubG9nKCfinJMgTWFuZHJpbGw6IHJ1bm5pbmcnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJRW1haWxTZXJ2aWNlIHtcbiAgICAvLyBHRVRcbiAgICBzZW5kVGVzdEVtYWlsKCk6IFEuSVByb21pc2U8e30+O1xuICAgIHNlbmROZXdFbWFpbChmcm9tRW1haWwsIGZyb21OYW1lLCB0bywgc3ViamVjdCwgY29udGVudCk6IFEuSVByb21pc2U8e30+O1xufVxuXG5cbmV4cG9ydCBjbGFzcyBFbWFpbFNlcnZpY2UgaW1wbGVtZW50cyBJRW1haWxTZXJ2aWNlIHtcbiAgICBzZW5kVGVzdEVtYWlsKCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuXG4gICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgXCJodG1sXCI6IFwiPHA+VGVzdGluZyBzb2YtdG9reW8tbm9kZS1zZXJ2ZXI8L3A+XCIsXG4gICAgICAgICAgICBcInN1YmplY3RcIjogXCJ0ZXN0IGVtYWlsXCIsXG4gICAgICAgICAgICBcImZyb21fZW1haWxcIjogY29uZi5tYW5kcmlsbC5hZG1pbkVtYWlsLFxuICAgICAgICAgICAgXCJmcm9tX25hbWVcIjogY29uZi5tYW5kcmlsbC5hZG1pbk5hbWUsXG4gICAgICAgICAgICBcInRvXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJlbWFpbFwiOiBjb25mLm1hbmRyaWxsLnVzZXJFbWFpbCxcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogY29uZi5tYW5kcmlsbC51c2VyTmFtZSxcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0b1wiXG4gICAgICAgICAgICB9XVxuICAgICAgICB9O1xuXG4gICAgICAgIGVtYWlsQ2xpZW50Lm1lc3NhZ2VzLnNlbmQoe1xuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRbMF0uc3RhdHVzID09PSAnc2VudCcgfHwgcmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3F1ZXVlZCcpIHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKCdNZXNzYWdlIHNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxuXG4gICAgc2VuZE5ld0VtYWlsKGZyb21FbWFpbCwgZnJvbU5hbWUsIHNjaG9vbHMpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIFwic3ViamVjdFwiOiBmcm9tTmFtZSArIFwiIHJlcXVpcmVzIGEgYm9va1wiLFxuICAgICAgICAgICAgXCJmcm9tX2VtYWlsXCI6IGZyb21FbWFpbCxcbiAgICAgICAgICAgIFwiZnJvbV9uYW1lXCI6IGZyb21OYW1lLFxuICAgICAgICAgICAgXCJ0b1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiZW1haWxcIjogXCJtYXRpYXMuY2FwdXR0aUBnbWFpbC5jb21cIixcbiAgICAgICAgICAgICAgICAvL1wiZW1haWxcIjogXCJpbmZvQHNvZi50b2t5b1wiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRvXCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJtZXJnZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXJnZV9sYW5ndWFnZVwiOiBcImhhbmRsZWJhcnNcIixcbiAgICAgICAgICAgIFwiZ2xvYmFsX21lcmdlX3ZhcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IGZyb21OYW1lXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImVtYWlsXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29udGVudFwiOiBmcm9tRW1haWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2Nob29sc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIjogc2Nob29sc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICBlbWFpbENsaWVudC5tZXNzYWdlcy5zZW5kVGVtcGxhdGUoe1xuICAgICAgICAgICAgdGVtcGxhdGVfbmFtZTogJ3NvZlRva3lvQm9va3NTYWxlcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZV9jb250ZW50OiB7fSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3NlbnQnIHx8IHJlc3VsdFswXS5zdGF0dXMgPT09ICdxdWV1ZWQnKSB7XG4gICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZSh7c3RhdHVzOiAnb2snLCBtZXNzYWdlOidNZXNzYWdlIHNlbnQnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoe3N0YXR1czogJ2Vycm9yJywgbWVzc2FnZTplcnJvcn0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9