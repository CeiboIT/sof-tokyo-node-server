/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var conf = require('../../optin.conf');
var mandrill = require('mandrill-api/mandrill');
var emailClient = new mandrill.Mandrill(conf.mandrill.key);
if (emailClient.apikey)
    console.log('âœ“ Mandrill: running');
var EmailService = (function () {
    function EmailService() {
    }
    EmailService.prototype.sendTestEmail = function () {
        var _promise = Q.defer();
        var message = {
            "html": "<p>Testing sof-tokyo-node-server</p>",
            "subject": "test email",
            "from_email": conf.mandrill.adminEmail,
            "from_name": conf.mandrill.adminName,
            "to": [{
                "email": conf.mandrill.userEmail,
                "name": conf.mandrill.userName,
                "type": "to"
            }]
        };
        emailClient.messages.send({
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve('Message sent');
            }
        });
        return _promise.promise;
    };
    EmailService.prototype.sendNewEmail = function (fromEmail, fromName, to, subject, schools) {
        var _promise = Q.defer();
        var message = {
            "from_email": fromEmail,
            "from_name": fromName,
            "to": [{
                "email": to,
                "type": "to"
            }],
            schools: schools,
            content: "Content"
        };
        emailClient.messages.send({
            template_name: 'sofTokyoBooksSales',
            template_content: {},
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve({ status: 'ok', message: 'Message sent' });
            }
        }, function (error) {
            _promise.resolve({ status: 'error', message: error });
        });
        return _promise.promise;
    };
    return EmailService;
})();
exports.EmailService = EmailService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZW1haWwvZW1haWwuc2VydmljZS50cyJdLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2UiLCJFbWFpbFNlcnZpY2UuY29uc3RydWN0b3IiLCJFbWFpbFNlcnZpY2Uuc2VuZFRlc3RFbWFpbCIsIkVtYWlsU2VydmljZS5zZW5kTmV3RW1haWwiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFaEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQVMzRCxJQUFhLFlBQVk7SUFBekJBLFNBQWFBLFlBQVlBO0lBeUR6QkMsQ0FBQ0E7SUF4REdELG9DQUFhQSxHQUFiQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBR0E7WUFDVkEsTUFBTUEsRUFBRUEsc0NBQXNDQTtZQUM5Q0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDdkJBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBO1lBQ3RDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQTtZQUNwQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ0hBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBO2dCQUNoQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUE7Z0JBQzlCQSxNQUFNQSxFQUFFQSxJQUFJQTthQUNmQSxDQUFDQTtTQUNMQSxDQUFDQTtRQUVGQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0QkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLEtBQUtBLEVBQUVBLEtBQUtBO1NBQ2ZBLEVBQUVBLFVBQVNBLE1BQU1BO1lBQ2QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixtQ0FBWUEsR0FBWkEsVUFBYUEsU0FBU0EsRUFBRUEsUUFBUUEsRUFBRUEsRUFBRUEsRUFBRUEsT0FBT0EsRUFBRUEsT0FBT0E7UUFDbERHLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBRXpCQSxJQUFJQSxPQUFPQSxHQUFHQTtZQUNWQSxZQUFZQSxFQUFFQSxTQUFTQTtZQUN2QkEsV0FBV0EsRUFBRUEsUUFBUUE7WUFDckJBLElBQUlBLEVBQUVBLENBQUNBO2dCQUNIQSxPQUFPQSxFQUFFQSxFQUFFQTtnQkFDWEEsTUFBTUEsRUFBRUEsSUFBSUE7YUFDZkEsQ0FBQ0E7WUFDRkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLE9BQU9BLEVBQUVBLFNBQVNBO1NBQ3JCQSxDQUFDQTtRQUVGQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0QkEsYUFBYUEsRUFBRUEsb0JBQW9CQTtZQUNuQ0EsZ0JBQWdCQSxFQUFFQSxFQUFFQTtZQUNwQkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLEtBQUtBLEVBQUVBLEtBQUtBO1NBQ2ZBLEVBQUVBLFVBQVNBLE1BQU1BO1lBQ2QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQztZQUM3RCxDQUFDO1FBQ0wsQ0FBQyxFQUFFQSxVQUFTQSxLQUFLQTtZQUNiLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQ0EsQ0FBQ0E7UUFFSEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBQ0xILG1CQUFDQTtBQUFEQSxDQXpEQSxBQXlEQ0EsSUFBQTtBQXpEWSxvQkFBWSxHQUFaLFlBeURaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvZW1haWwvZW1haWwuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBRID0gcmVxdWlyZShcInFcIik7XG52YXIgY29uZiA9IHJlcXVpcmUoJy4uLy4uL29wdGluLmNvbmYnKTtcbnZhciBtYW5kcmlsbCA9IHJlcXVpcmUoJ21hbmRyaWxsLWFwaS9tYW5kcmlsbCcpO1xuXG52YXIgZW1haWxDbGllbnQgPSBuZXcgbWFuZHJpbGwuTWFuZHJpbGwoY29uZi5tYW5kcmlsbC5rZXkpO1xuaWYgKGVtYWlsQ2xpZW50LmFwaWtleSkgY29uc29sZS5sb2coJ+KckyBNYW5kcmlsbDogcnVubmluZycpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFbWFpbFNlcnZpY2Uge1xuICAgIC8vIEdFVFxuICAgIHNlbmRUZXN0RW1haWwoKTogUS5JUHJvbWlzZTx7fT47XG4gICAgc2VuZE5ld0VtYWlsKGZyb21FbWFpbCwgZnJvbU5hbWUsIHRvLCBzdWJqZWN0LCBjb250ZW50KTogUS5JUHJvbWlzZTx7fT47XG59XG5cblxuZXhwb3J0IGNsYXNzIEVtYWlsU2VydmljZSBpbXBsZW1lbnRzIElFbWFpbFNlcnZpY2Uge1xuICAgIHNlbmRUZXN0RW1haWwoKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBRLmRlZmVyKCk7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBcImh0bWxcIjogXCI8cD5UZXN0aW5nIHNvZi10b2t5by1ub2RlLXNlcnZlcjwvcD5cIixcbiAgICAgICAgICAgIFwic3ViamVjdFwiOiBcInRlc3QgZW1haWxcIixcbiAgICAgICAgICAgIFwiZnJvbV9lbWFpbFwiOiBjb25mLm1hbmRyaWxsLmFkbWluRW1haWwsXG4gICAgICAgICAgICBcImZyb21fbmFtZVwiOiBjb25mLm1hbmRyaWxsLmFkbWluTmFtZSxcbiAgICAgICAgICAgIFwidG9cIjogW3tcbiAgICAgICAgICAgICAgICBcImVtYWlsXCI6IGNvbmYubWFuZHJpbGwudXNlckVtYWlsLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBjb25mLm1hbmRyaWxsLnVzZXJOYW1lLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRvXCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG5cbiAgICAgICAgZW1haWxDbGllbnQubWVzc2FnZXMuc2VuZCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdFswXS5zdGF0dXMgPT09ICdzZW50JyB8fCByZXN1bHRbMF0uc3RhdHVzID09PSAncXVldWVkJykge1xuICAgICAgICAgICAgICAgIF9wcm9taXNlLnJlc29sdmUoJ01lc3NhZ2Ugc2VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3Byb21pc2UucHJvbWlzZTtcbiAgICB9XG5cbiAgICBzZW5kTmV3RW1haWwoZnJvbUVtYWlsLCBmcm9tTmFtZSwgdG8sIHN1YmplY3QsIHNjaG9vbHMpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIFwiZnJvbV9lbWFpbFwiOiBmcm9tRW1haWwsXG4gICAgICAgICAgICBcImZyb21fbmFtZVwiOiBmcm9tTmFtZSxcbiAgICAgICAgICAgIFwidG9cIjogW3tcbiAgICAgICAgICAgICAgICBcImVtYWlsXCI6IHRvLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRvXCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgc2Nob29sczogc2Nob29scyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiQ29udGVudFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgZW1haWxDbGllbnQubWVzc2FnZXMuc2VuZCh7XG4gICAgICAgICAgICB0ZW1wbGF0ZV9uYW1lOiAnc29mVG9reW9Cb29rc1NhbGVzJyxcbiAgICAgICAgICAgIHRlbXBsYXRlX2NvbnRlbnQ6IHt9LFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRbMF0uc3RhdHVzID09PSAnc2VudCcgfHwgcmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3F1ZXVlZCcpIHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKHtzdGF0dXM6ICdvaycsIG1lc3NhZ2U6J01lc3NhZ2Ugc2VudCd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZSh7c3RhdHVzOiAnZXJyb3InLCBtZXNzYWdlOmVycm9yfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=