/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var conf = require('../../optin.conf');
var mandrill = require('mandrill-api/mandrill');
var emailClient = new mandrill.Mandrill(conf.mandrill.key);
if (emailClient.apikey)
    console.log('âœ“ Mandrill: running');
var EmailService = (function () {
    function EmailService() {
    }
    EmailService.prototype.sendTestEmail = function () {
        var _promise = Q.defer();
        var message = {
            "html": "<p>Testing sof-tokyo-node-server</p>",
            "subject": "test email",
            "from_email": conf.mandrill.adminEmail,
            "from_name": conf.mandrill.adminName,
            "to": [{
                "email": conf.mandrill.userEmail,
                "name": conf.mandrill.userName,
                "type": "to"
            }]
        };
        emailClient.messages.send({
            message: message,
            async: false
        }, function (result) {
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve('Message sent');
            }
        });
        return _promise.promise;
    };
    EmailService.prototype.sendNewEmail = function (fromEmail, fromName, to, subject, content) {
        var _promise = Q.defer();
        var message = {
            "html": content,
            "subject": subject,
            "from_email": fromEmail,
            "from_name": fromName,
            "to": [{
                "email": to,
                "type": "to"
            }]
        };
        emailClient.messages.send({
            message: message,
            async: false
        }, function (result) {
            console.log(result);
            if (result[0].status === 'sent' || result[0].status === 'queued') {
                _promise.resolve('Message sent');
            }
        });
        return _promise.promise;
    };
    return EmailService;
})();
exports.EmailService = EmailService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZW1haWwvZW1haWwuc2VydmljZS50cyJdLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2UiLCJFbWFpbFNlcnZpY2UuY29uc3RydWN0b3IiLCJFbWFpbFNlcnZpY2Uuc2VuZFRlc3RFbWFpbCIsIkVtYWlsU2VydmljZS5zZW5kTmV3RW1haWwiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFFNUQsSUFBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFaEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQVMzRCxJQUFhLFlBQVk7SUFBekJBLFNBQWFBLFlBQVlBO0lBc0R6QkMsQ0FBQ0E7SUFyREdELG9DQUFhQSxHQUFiQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBR0E7WUFDVkEsTUFBTUEsRUFBRUEsc0NBQXNDQTtZQUM5Q0EsU0FBU0EsRUFBRUEsWUFBWUE7WUFDdkJBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBO1lBQ3RDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQTtZQUNwQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ0hBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBO2dCQUNoQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUE7Z0JBQzlCQSxNQUFNQSxFQUFFQSxJQUFJQTthQUNmQSxDQUFDQTtTQUNMQSxDQUFDQTtRQUVGQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN0QkEsT0FBT0EsRUFBRUEsT0FBT0E7WUFDaEJBLEtBQUtBLEVBQUVBLEtBQUtBO1NBQ2ZBLEVBQUVBLFVBQVNBLE1BQU1BO1lBQ2QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixtQ0FBWUEsR0FBWkEsVUFBYUEsU0FBU0EsRUFBRUEsUUFBUUEsRUFBRUEsRUFBRUEsRUFBRUEsT0FBT0EsRUFBRUEsT0FBT0E7UUFDbERHLElBQUlBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBRXpCQSxJQUFJQSxPQUFPQSxHQUFHQTtZQUNWQSxNQUFNQSxFQUFFQSxPQUFPQTtZQUNmQSxTQUFTQSxFQUFFQSxPQUFPQTtZQUNsQkEsWUFBWUEsRUFBRUEsU0FBU0E7WUFDdkJBLFdBQVdBLEVBQUVBLFFBQVFBO1lBQ3JCQSxJQUFJQSxFQUFFQSxDQUFDQTtnQkFDSEEsT0FBT0EsRUFBRUEsRUFBRUE7Z0JBQ1hBLE1BQU1BLEVBQUVBLElBQUlBO2FBQ2ZBLENBQUNBO1NBQ0xBLENBQUNBO1FBRUZBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBO1lBQ3RCQSxPQUFPQSxFQUFFQSxPQUFPQTtZQUNoQkEsS0FBS0EsRUFBRUEsS0FBS0E7U0FDZkEsRUFBRUEsVUFBU0EsTUFBTUE7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDL0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFDTEgsbUJBQUNBO0FBQURBLENBdERBLEFBc0RDQSxJQUFBO0FBdERZLG9CQUFZLEdBQVosWUFzRFosQ0FBQTtBQUFBLENBQUMiLCJmaWxlIjoibW9kdWxlcy9lbWFpbC9lbWFpbC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlLnRzXCIgLz5cblxuaW1wb3J0IFEgPSByZXF1aXJlKFwicVwiKTtcbnZhciBjb25mID0gcmVxdWlyZSgnLi4vLi4vb3B0aW4uY29uZicpO1xudmFyIG1hbmRyaWxsID0gcmVxdWlyZSgnbWFuZHJpbGwtYXBpL21hbmRyaWxsJyk7XG5cbnZhciBlbWFpbENsaWVudCA9IG5ldyBtYW5kcmlsbC5NYW5kcmlsbChjb25mLm1hbmRyaWxsLmtleSk7XG5pZiAoZW1haWxDbGllbnQuYXBpa2V5KSBjb25zb2xlLmxvZygn4pyTIE1hbmRyaWxsOiBydW5uaW5nJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVtYWlsU2VydmljZSB7XG4gICAgLy8gR0VUXG4gICAgc2VuZFRlc3RFbWFpbCgpOiBRLklQcm9taXNlPHt9PjtcbiAgICBzZW5kTmV3RW1haWwoZnJvbUVtYWlsLCBmcm9tTmFtZSwgdG8sIHN1YmplY3QsIGNvbnRlbnQpOiBRLklQcm9taXNlPHt9Pjtcbn1cblxuXG5leHBvcnQgY2xhc3MgRW1haWxTZXJ2aWNlIGltcGxlbWVudHMgSUVtYWlsU2VydmljZSB7XG4gICAgc2VuZFRlc3RFbWFpbCgpOiBRLklQcm9taXNlPHt9PiB7XG4gICAgICAgIHZhciBfcHJvbWlzZSA9IFEuZGVmZXIoKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIFwiaHRtbFwiOiBcIjxwPlRlc3Rpbmcgc29mLXRva3lvLW5vZGUtc2VydmVyPC9wPlwiLFxuICAgICAgICAgICAgXCJzdWJqZWN0XCI6IFwidGVzdCBlbWFpbFwiLFxuICAgICAgICAgICAgXCJmcm9tX2VtYWlsXCI6IGNvbmYubWFuZHJpbGwuYWRtaW5FbWFpbCxcbiAgICAgICAgICAgIFwiZnJvbV9uYW1lXCI6IGNvbmYubWFuZHJpbGwuYWRtaW5OYW1lLFxuICAgICAgICAgICAgXCJ0b1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiZW1haWxcIjogY29uZi5tYW5kcmlsbC51c2VyRW1haWwsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IGNvbmYubWFuZHJpbGwudXNlck5hbWUsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidG9cIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcblxuICAgICAgICBlbWFpbENsaWVudC5tZXNzYWdlcy5zZW5kKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3NlbnQnIHx8IHJlc3VsdFswXS5zdGF0dXMgPT09ICdxdWV1ZWQnKSB7XG4gICAgICAgICAgICAgICAgX3Byb21pc2UucmVzb2x2ZSgnTWVzc2FnZSBzZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuICAgIHNlbmROZXdFbWFpbChmcm9tRW1haWwsIGZyb21OYW1lLCB0bywgc3ViamVjdCwgY29udGVudCk6IFEuSVByb21pc2U8e30+IHtcbiAgICAgICAgdmFyIF9wcm9taXNlID0gUS5kZWZlcigpO1xuXG4gICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgXCJodG1sXCI6IGNvbnRlbnQsXG4gICAgICAgICAgICBcInN1YmplY3RcIjogc3ViamVjdCxcbiAgICAgICAgICAgIFwiZnJvbV9lbWFpbFwiOiBmcm9tRW1haWwsXG4gICAgICAgICAgICBcImZyb21fbmFtZVwiOiBmcm9tTmFtZSxcbiAgICAgICAgICAgIFwidG9cIjogW3tcbiAgICAgICAgICAgICAgICBcImVtYWlsXCI6IHRvLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRvXCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG5cbiAgICAgICAgZW1haWxDbGllbnQubWVzc2FnZXMuc2VuZCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRbMF0uc3RhdHVzID09PSAnc2VudCcgfHwgcmVzdWx0WzBdLnN0YXR1cyA9PT0gJ3F1ZXVlZCcpIHtcbiAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKCdNZXNzYWdlIHNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9wcm9taXNlLnByb21pc2U7XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==