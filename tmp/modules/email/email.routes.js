'use strict';
///<reference path="../../../typings/tsd.d.ts" />
///<reference path="./email.service.ts" />
var service = require('./email.service');
var Joi = require('joi');
var EmailService = new service.EmailService();
var _prefix = '/email';
var email = [
    {
        method: 'GET',
        path: _prefix + '/test',
        handler: function (request, reply) {
            EmailService.sendTestEmail().then(function (data) {
                reply(data);
            });
        },
        config: {
            description: 'Send a test Email',
            tags: ['email']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/new',
        handler: function (request, reply) {
            EmailService.sendNewEmail(request.payload.fromEmail, request.payload.fromName, request.payload.to, request.payload.subject, request.payload.schools).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    fromEmail: Joi.string(),
                    fromName: Joi.string(),
                    to: Joi.string(),
                    subject: Joi.string(),
                    content: Joi.string()
                }
            },
            description: 'Send a new Email',
            tags: ['email']
        }
    },
];
module.exports = email;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvZW1haWwvZW1haWwucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLEFBSUEsaURBSmlEO0FBQ2pELDBDQUEwQztBQUcxQyxJQUFPLE9BQU8sV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVDLElBQU8sR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0FBRTVCLElBQUksWUFBWSxHQUFHLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlDLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN2QixJQUFJLEtBQUssR0FBRztJQUNSO1FBQ0ksTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLE9BQU87UUFDdkIsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUN2QixJQUFJLENBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixXQUFXLEVBQUUsbUJBQW1CO1lBQ2hDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUNsQjtLQUNKO0lBQ0Q7UUFDSSxNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRSxPQUFPLEdBQUcsTUFBTTtRQUN0QixPQUFPLEVBQUUsVUFBUyxPQUFPLEVBQUUsS0FBSztZQUM1QixZQUFZLENBQUMsWUFBWSxDQUNyQixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQ3hCLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUNsQixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDdkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDdkIsSUFBSSxDQUFDLFVBQUMsSUFBSTtnQkFDUCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDO1FBQ0QsTUFBTSxFQUFFO1lBQ0osUUFBUSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDSCxTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtvQkFDdkIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3RCLEVBQUUsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNoQixPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtvQkFDckIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7aUJBQ3hCO2FBQ0o7WUFDRCxXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUNsQjtLQUNKO0NBQ0osQ0FBQTtBQUdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvZW1haWwvZW1haWwucm91dGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLy88cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4vZW1haWwuc2VydmljZS50c1wiIC8+XG5cblxuaW1wb3J0IHNlcnZpY2UgPSByZXF1aXJlKCcuL2VtYWlsLnNlcnZpY2UnKTtcbmltcG9ydCBKb2kgPSByZXF1aXJlKCdqb2knKTtcblxudmFyIEVtYWlsU2VydmljZSA9IG5ldyBzZXJ2aWNlLkVtYWlsU2VydmljZSgpO1xudmFyIF9wcmVmaXggPSAnL2VtYWlsJztcbnZhciBlbWFpbCA9IFtcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL3Rlc3QnLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgRW1haWxTZXJ2aWNlLnNlbmRUZXN0RW1haWwoKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTZW5kIGEgdGVzdCBFbWFpbCcsXG4gICAgICAgICAgICB0YWdzOiBbJ2VtYWlsJ11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgcGF0aDogX3ByZWZpeCArICcvbmV3JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIEVtYWlsU2VydmljZS5zZW5kTmV3RW1haWwoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLmZyb21FbWFpbCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQuZnJvbU5hbWUsXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnRvLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5zdWJqZWN0LFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5zY2hvb2xzKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICBmcm9tRW1haWw6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgZnJvbU5hbWU6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdG86IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogSm9pLnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBKb2kuc3RyaW5nKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTZW5kIGEgbmV3IEVtYWlsJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnZW1haWwnXVxuICAgICAgICB9XG4gICAgfSxcbl1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtYWlsO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9