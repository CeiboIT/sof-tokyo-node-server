/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../connection/connection.service.ts" />
var Q = require("q");
var connection = require('../connection/connection.service');
var MessagesService = (function () {
    function MessagesService() {
        this.db = connection.service;
    }
    MessagesService.prototype.createMessage = function (sender_id, receiver_id, subject, message) {
        var _this = this;
        var _promise = Q.defer();
        var thread_id = Math.floor((Math.random() * 100000) + 1);
        var now = new Date();
        // insert record sender
        this.db.query_db("INSERT INTO wp2_bp_messages_recipients (id, user_id, thread_id, unread_count, sender_only, is_deleted) " + "VALUES (NULL," + sender_id + "," + thread_id + ",0,0,0)").then(function () {
            // insert record receiver
            _this.db.query_db("INSERT INTO wp2_bp_messages_recipients (id, user_id, thread_id, unread_count, sender_only, is_deleted) " + "VALUES (NULL," + receiver_id + "," + thread_id + ",1,0,0)").then(function () {
                // insert message
                _this.db.query_db("INSERT INTO wp2_bp_messages_messages (id, thread_id, sender_id, subject, message, date_sent) " + "VALUES (NULL," + thread_id + "," + sender_id + ",'" + subject + "','" + message + "','" + now.toISOString() + "')").then(function () {
                    var response = {
                        status: 'Message created OK',
                        thread_id: thread_id,
                        sender_id: sender_id,
                        receiver_id: receiver_id,
                        subject: subject,
                        message: message,
                        date_sent: now.toISOString()
                    };
                    _promise.resolve(response);
                });
            });
        });
        return _promise.promise;
    };
    return MessagesService;
})();
exports.MessagesService = MessagesService;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvbWVzc2FnZXMvbWVzc2FnZXMuc2VydmljZS50cyJdLCJuYW1lcyI6WyJNZXNzYWdlc1NlcnZpY2UiLCJNZXNzYWdlc1NlcnZpY2UuY29uc3RydWN0b3IiLCJNZXNzYWdlc1NlcnZpY2UuY3JlYXRlTWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBQ2xELDREQUE0RDtBQUU1RCxJQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUN4QixJQUFPLFVBQVUsV0FBVyxrQ0FBa0MsQ0FBQyxDQUFBO0FBVS9ELElBQWEsZUFBZTtJQUE1QkEsU0FBYUEsZUFBZUE7UUFDaEJDLE9BQUVBLEdBQUdBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBO0lBK0VwQ0EsQ0FBQ0E7SUE3RUdELHVDQUFhQSxHQUFiQSxVQUFjQSxTQUFTQSxFQUFFQSxXQUFXQSxFQUFFQSxPQUFPQSxFQUFFQSxPQUFPQTtRQUF0REUsaUJBa0NDQTtRQWpDR0EsSUFBSUEsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDekJBLElBQUlBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNyQkEsQUFDQUEsdUJBRHVCQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EseUdBQXlHQSxHQUN0R0EsZUFBZUEsR0FBR0EsU0FBU0EsR0FBR0EsR0FBR0EsR0FBR0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FDekVBLElBQUlBLENBQUNBO1lBRUZBLEFBQ0FBLHlCQUR5QkE7WUFDekJBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLHlHQUF5R0EsR0FDdEdBLGVBQWVBLEdBQUdBLFdBQVdBLEdBQUdBLEdBQUdBLEdBQUdBLFNBQVNBLEdBQUdBLFNBQVNBLENBQUNBLENBQzNFQSxJQUFJQSxDQUFDQTtnQkFFRkEsQUFDQUEsaUJBRGlCQTtnQkFDakJBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLCtGQUErRkEsR0FDNUZBLGVBQWVBLEdBQUdBLFNBQVNBLEdBQUdBLEdBQUdBLEdBQUdBLFNBQVNBLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLENBQUNBLFdBQVdBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLENBQ25JQSxJQUFJQSxDQUFDQTtvQkFDRkEsSUFBSUEsUUFBUUEsR0FBR0E7d0JBQ1hBLE1BQU1BLEVBQUVBLG9CQUFvQkE7d0JBQzVCQSxTQUFTQSxFQUFFQSxTQUFTQTt3QkFDcEJBLFNBQVNBLEVBQUVBLFNBQVNBO3dCQUNwQkEsV0FBV0EsRUFBRUEsV0FBV0E7d0JBQ3hCQSxPQUFPQSxFQUFFQSxPQUFPQTt3QkFDaEJBLE9BQU9BLEVBQUVBLE9BQU9BO3dCQUNoQkEsU0FBU0EsRUFBRUEsR0FBR0EsQ0FBQ0EsV0FBV0EsRUFBRUE7cUJBQy9CQSxDQUFDQTtvQkFDRkEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQy9CQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUVWQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUVWQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNOQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUEyQ0xGLHNCQUFDQTtBQUFEQSxDQWhGQSxBQWdGQ0EsSUFBQTtBQWhGWSx1QkFBZSxHQUFmLGVBZ0ZaLENBQUE7QUFBQSxDQUFDIiwiZmlsZSI6Im1vZHVsZXMvbWVzc2FnZXMvbWVzc2FnZXMuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBRID0gcmVxdWlyZShcInFcIik7XG5pbXBvcnQgY29ubmVjdGlvbiA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5zZXJ2aWNlJylcblxuZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZXNTZXJ2aWNlIHtcbiAgICAvLyBHRVRcbiAgICAvLyBQT1NUXG4gICAgY3JlYXRlTWVzc2FnZShzZW5kZXJfaWQsIHJlY2VpdmVyX2lkLCBzdWJqZWN0LCBtZXNzYWdlKTogUS5JUHJvbWlzZTx7fT47XG4gICAgLy8gUFVUXG4gICAgLy8gREVMRVRFXG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlc1NlcnZpY2UgaW1wbGVtZW50cyBJTWVzc2FnZXNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGRiID0gY29ubmVjdGlvbi5zZXJ2aWNlO1xuXG4gICAgY3JlYXRlTWVzc2FnZShzZW5kZXJfaWQsIHJlY2VpdmVyX2lkLCBzdWJqZWN0LCBtZXNzYWdlKTogUS5JUHJvbWlzZTx7fT4ge1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBRLmRlZmVyKCk7XG4gICAgICAgIHZhciB0aHJlYWRfaWQgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDAwKSArIDEpO1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgLy8gaW5zZXJ0IHJlY29yZCBzZW5kZXJcbiAgICAgICAgdGhpcy5kYi5xdWVyeV9kYihcIklOU0VSVCBJTlRPIHdwMl9icF9tZXNzYWdlc19yZWNpcGllbnRzIChpZCwgdXNlcl9pZCwgdGhyZWFkX2lkLCB1bnJlYWRfY291bnQsIHNlbmRlcl9vbmx5LCBpc19kZWxldGVkKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWQUxVRVMgKE5VTEwsXCIgKyBzZW5kZXJfaWQgKyBcIixcIiArIHRocmVhZF9pZCArIFwiLDAsMCwwKVwiKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHJlY29yZCByZWNlaXZlclxuICAgICAgICAgICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJJTlNFUlQgSU5UTyB3cDJfYnBfbWVzc2FnZXNfcmVjaXBpZW50cyAoaWQsIHVzZXJfaWQsIHRocmVhZF9pZCwgdW5yZWFkX2NvdW50LCBzZW5kZXJfb25seSwgaXNfZGVsZXRlZCkgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWQUxVRVMgKE5VTEwsXCIgKyByZWNlaXZlcl9pZCArIFwiLFwiICsgdGhyZWFkX2lkICsgXCIsMSwwLDApXCIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGIucXVlcnlfZGIoXCJJTlNFUlQgSU5UTyB3cDJfYnBfbWVzc2FnZXNfbWVzc2FnZXMgKGlkLCB0aHJlYWRfaWQsIHNlbmRlcl9pZCwgc3ViamVjdCwgbWVzc2FnZSwgZGF0ZV9zZW50KSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVkFMVUVTIChOVUxMLFwiICsgdGhyZWFkX2lkICsgXCIsXCIgKyBzZW5kZXJfaWQgKyBcIiwnXCIgKyBzdWJqZWN0ICsgXCInLCdcIiArIG1lc3NhZ2UgKyBcIicsJ1wiICsgbm93LnRvSVNPU3RyaW5nKCkgKyBcIicpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdNZXNzYWdlIGNyZWF0ZWQgT0snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWFkX2lkOiB0aHJlYWRfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXJfaWQ6IHNlbmRlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyX2lkOiByZWNlaXZlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9zZW50OiBub3cudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBfcHJvbWlzZS5wcm9taXNlO1xuICAgIH1cblxuLypcbiAgICByZXNwb25zZU1lc3NhZ2UodGhyZWFkX2lkLCBzZW5kZXJfaWQsIHJlY2VpdmVyX2lkLCBzdWJqZWN0LCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBkYXRlX3NlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgcmVzU3ViamVjdCA9ICdSZTogJyArIHN1YmplY3Q7XG5cbiAgICAgICAgLy8gaW5zZXJ0IG1lc3NhZ2VcbiAgICAgICAgd3AyX2JwX21lc3NhZ2VzX21lc3NhZ2VzIHtcbiAgICAgICAgICAgIHZhciBpZCA9IE5VTEw7XG4gICAgICAgICAgICB2YXIgdGhyZWRfaWQgPSB0aHJlYWRfaWQ7XG4gICAgICAgICAgICB2YXIgc2VuZGVyX2lkID0gc2VuZGVyX2lkO1xuICAgICAgICAgICAgdmFyIHN1YmplY3QgPSByZXNTdWJqZWN0O1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHJlY29yZCBTRU5ERVJcbiAgICAgICAgd3AyX2JwX21lc3NhZ2VzX3JlY2lwaWVudHMge1xuICAgICAgICAgICAgdmFyIGlkID0gTlVMTDtcbiAgICAgICAgICAgIHZhciB1c2VyX2lkID0gc2VuZGVyX2lkO1xuICAgICAgICAgICAgdmFyIHRocmVhZF9pZCA9IHRocmVhZF9pZDtcbiAgICAgICAgICAgIHZhciB1bnJlYWRfY291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIHNlbmRlcl9vbmx5ID0gMDtcbiAgICAgICAgICAgIHZhciBpc19kZWxldGVkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSByZWNvcmQgUkVDRUlWRVJcbiAgICAgICAgd3AyX2JwX21lc3NhZ2VzX3JlY2lwaWVudHMge1xuICAgICAgICAgICAgdmFyIGlkID0gTlVMTDtcbiAgICAgICAgICAgIHZhciB1c2VyX2lkID0gcmVjZWl2ZXJfaWQ7XG4gICAgICAgICAgICB2YXIgdGhyZWFkX2lkID0gdGhyZWFkX2lkO1xuICAgICAgICAgICAgdmFyIHVucmVhZF9jb3VudCA9IElOQ1JFQVNFICsgMTtcbiAgICAgICAgICAgIHZhciBzZW5kZXJfb25seSA9IDA7XG4gICAgICAgICAgICB2YXIgaXNfZGVsZXRlZCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkTWVzc2FnZXModXNlcklkLCB0aHJlYWRJZCkge1xuICAgICAgICB2YXIgdW5yZWFkX2NvdW50ID0gMDtcbiAgICB9XG4qL1xuXG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=