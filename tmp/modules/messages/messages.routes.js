'use strict';
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="./messages.service.ts" />
var service = require('./messages.service');
var Joi = require('joi');
var MessagesService = new service.MessagesService();
var _prefix = '/messages';
var messages = [
    {
        method: 'GET',
        path: _prefix + '/show/{userId}',
        handler: function (request, reply) {
            MessagesService.showMessages(request.params.userId).then(function (data) {
                reply({ messages: data });
            });
        },
        config: {
            validate: {
                query: {
                    userId: Joi.number().integer()
                }
            },
            description: 'Retrieve Messages from UserID',
            tags: ['messages']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/create',
        handler: function (request, reply) {
            MessagesService.createMessage(request.payload.sender_id, request.payload.receiver_id, request.payload.subject, request.payload.message).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    sender_id: Joi.number().integer(),
                    receiver_id: Joi.number().integer(),
                    subject: Joi.string(),
                    message: Joi.string()
                }
            },
            description: 'Create a new Message',
            tags: ['messages']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/response',
        handler: function (request, reply) {
            MessagesService.responseMessage(request.payload.thread_id, request.payload.sender_id, request.payload.receiver_id, request.payload.subject, request.payload.message).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    thread_id: Joi.number().integer(),
                    sender_id: Joi.number().integer(),
                    receiver_id: Joi.number().integer(),
                    subject: Joi.string(),
                    message: Joi.string()
                }
            },
            description: 'Response a Message',
            tags: ['messages']
        }
    },
];
module.exports = messages;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvbWVzc2FnZXMvbWVzc2FnZXMucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLEFBR0Esa0RBSGtEO0FBQ2xELDhDQUE4QztBQUU5QyxJQUFPLE9BQU8sV0FBVyxvQkFBb0IsQ0FBQyxDQUFDO0FBQy9DLElBQU8sR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0FBRTVCLElBQUksZUFBZSxHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3BELElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUMxQixJQUFJLFFBQVEsR0FBRztJQUNYO1FBQ0ksTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLGdCQUFnQjtRQUNoQyxPQUFPLEVBQUUsVUFBUyxPQUFPLEVBQUUsS0FBSztZQUM1QixlQUFlLENBQUMsWUFBWSxDQUN4QixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUNyQixJQUFJLENBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNKLFFBQVEsRUFBRTtnQkFDTixLQUFLLEVBQUU7b0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUU7aUJBQ2pDO2FBQ0o7WUFDRCxXQUFXLEVBQUUsK0JBQStCO1lBQzVDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQztTQUNyQjtLQUNKO0lBQ0Q7UUFDSSxNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRSxPQUFPLEdBQUcsU0FBUztRQUN6QixPQUFPLEVBQUUsVUFBUyxPQUFPLEVBQUUsS0FBSztZQUM1QixlQUFlLENBQUMsYUFBYSxDQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQzNCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUN2QixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUN2QixJQUFJLENBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO29CQUNqQyxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtvQkFDbkMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3JCLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO2lCQUN4QjthQUNKO1lBQ0QsV0FBVyxFQUFFLHNCQUFzQjtZQUNuQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDckI7S0FDSjtJQUNEO1FBQ0ksTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsT0FBTyxHQUFHLFdBQVc7UUFDM0IsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsZUFBZSxDQUFDLGVBQWUsQ0FDM0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQ3pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFDM0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQ3ZCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQ3ZCLElBQUksQ0FBQyxVQUFDLElBQUk7Z0JBQ1AsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNKLFFBQVEsRUFBRTtnQkFDTixLQUFLLEVBQUU7b0JBQ0gsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUU7b0JBQ2pDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO29CQUNqQyxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtvQkFDbkMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3JCLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO2lCQUN4QjthQUNKO1lBQ0QsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDckI7S0FDSjtDQUNKLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsImZpbGUiOiJtb2R1bGVzL21lc3NhZ2VzL21lc3NhZ2VzLnJvdXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbWVzc2FnZXMuc2VydmljZS50c1wiIC8+XG5cbmltcG9ydCBzZXJ2aWNlID0gcmVxdWlyZSgnLi9tZXNzYWdlcy5zZXJ2aWNlJyk7XG5pbXBvcnQgSm9pID0gcmVxdWlyZSgnam9pJyk7XG5cbnZhciBNZXNzYWdlc1NlcnZpY2UgPSBuZXcgc2VydmljZS5NZXNzYWdlc1NlcnZpY2UoKTtcbnZhciBfcHJlZml4ID0gJy9tZXNzYWdlcyc7XG52YXIgbWVzc2FnZXMgPSBbXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9zaG93L3t1c2VySWR9JyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIE1lc3NhZ2VzU2VydmljZS5zaG93TWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMudXNlcklkKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KHsgbWVzc2FnZXM6IGRhdGEgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogSm9pLm51bWJlcigpLmludGVnZXIoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JldHJpZXZlIE1lc3NhZ2VzIGZyb20gVXNlcklEJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnbWVzc2FnZXMnXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBfcHJlZml4ICsgJy9jcmVhdGUnLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgTWVzc2FnZXNTZXJ2aWNlLmNyZWF0ZU1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnNlbmRlcl9pZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQucmVjZWl2ZXJfaWQsXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnN1YmplY3QsXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHkoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcl9pZDogSm9pLm51bWJlcigpLmludGVnZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJfaWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogSm9pLnN0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGEgbmV3IE1lc3NhZ2UnLFxuICAgICAgICAgICAgdGFnczogWydtZXNzYWdlcyddXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL3Jlc3BvbnNlJyxcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgICAgIE1lc3NhZ2VzU2VydmljZS5yZXNwb25zZU1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnRocmVhZF9pZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQuc2VuZGVyX2lkLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5yZWNlaXZlcl9pZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQuc3ViamVjdCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQubWVzc2FnZSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXBseShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkX2lkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXJfaWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyX2lkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiBKb2kuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IEpvaS5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Jlc3BvbnNlIGEgTWVzc2FnZScsXG4gICAgICAgICAgICB0YWdzOiBbJ21lc3NhZ2VzJ11cbiAgICAgICAgfVxuICAgIH0sXG5dXG5cbm1vZHVsZS5leHBvcnRzID0gbWVzc2FnZXM7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=