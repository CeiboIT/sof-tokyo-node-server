'use strict';
/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="./messages.service.ts" />
var service = require('./messages.service');
var Joi = require('joi');
var MessagesService = new service.MessagesService();
var _prefix = '/messages';
var messages = [
    {
        method: 'POST',
        path: _prefix + '/create',
        handler: function (request, reply) {
            MessagesService.createMessage(request.payload.sender_id, request.payload.receiver_id, request.payload.subject, request.payload.message).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    sender_id: Joi.number().integer(),
                    receiver_id: Joi.number().integer(),
                    subject: Joi.string(),
                    message: Joi.string()
                }
            },
            description: 'Create a new Message',
            tags: ['messages']
        }
    },
    {
        method: 'POST',
        path: _prefix + '/response',
        handler: function (request, reply) {
            MessagesService.responseMessage(request.payload.thread_id, request.payload.sender_id, request.payload.receiver_id, request.payload.subject, request.payload.message).then(function (data) {
                reply(data);
            });
        },
        config: {
            validate: {
                query: {
                    thread_id: Joi.number().integer(),
                    sender_id: Joi.number().integer(),
                    receiver_id: Joi.number().integer(),
                    subject: Joi.string(),
                    message: Joi.string()
                }
            },
            description: 'Response a Message',
            tags: ['messages']
        }
    },
];
module.exports = messages;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvbWVzc2FnZXMvbWVzc2FnZXMucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLEFBR0Esa0RBSGtEO0FBQ2xELDhDQUE4QztBQUU5QyxJQUFPLE9BQU8sV0FBVyxvQkFBb0IsQ0FBQyxDQUFDO0FBQy9DLElBQU8sR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0FBRTVCLElBQUksZUFBZSxHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3BELElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUMxQixJQUFJLFFBQVEsR0FBRztJQUNYO1FBQ0ksTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsT0FBTyxHQUFHLFNBQVM7UUFDekIsT0FBTyxFQUFFLFVBQVMsT0FBTyxFQUFFLEtBQUs7WUFDNUIsZUFBZSxDQUFDLGFBQWEsQ0FDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQ3pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDdkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDdkIsSUFBSSxDQUFDLFVBQUMsSUFBSTtnQkFDUCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDO1FBQ0QsTUFBTSxFQUFFO1lBQ0osUUFBUSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDSCxTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtvQkFDakMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUU7b0JBQ25DLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNyQixPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtpQkFDeEI7YUFDSjtZQUNELFdBQVcsRUFBRSxzQkFBc0I7WUFDbkMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQ3JCO0tBQ0o7SUFDRDtRQUNJLE1BQU0sRUFBRSxNQUFNO1FBQ2QsSUFBSSxFQUFFLE9BQU8sR0FBRyxXQUFXO1FBQzNCLE9BQU8sRUFBRSxVQUFTLE9BQU8sRUFBRSxLQUFLO1lBQzVCLGVBQWUsQ0FBQyxlQUFlLENBQzNCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQzNCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUN2QixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUN2QixJQUFJLENBQUMsVUFBQyxJQUFJO2dCQUNQLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDRCxNQUFNLEVBQUU7WUFDSixRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNILFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFO29CQUNqQyxTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRTtvQkFDakMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUU7b0JBQ25DLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNyQixPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtpQkFDeEI7YUFDSjtZQUNELFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQ3JCO0tBQ0o7Q0FDSixDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMiLCJmaWxlIjoibW9kdWxlcy9tZXNzYWdlcy9tZXNzYWdlcy5yb3V0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21lc3NhZ2VzLnNlcnZpY2UudHNcIiAvPlxuXG5pbXBvcnQgc2VydmljZSA9IHJlcXVpcmUoJy4vbWVzc2FnZXMuc2VydmljZScpO1xuaW1wb3J0IEpvaSA9IHJlcXVpcmUoJ2pvaScpO1xuXG52YXIgTWVzc2FnZXNTZXJ2aWNlID0gbmV3IHNlcnZpY2UuTWVzc2FnZXNTZXJ2aWNlKCk7XG52YXIgX3ByZWZpeCA9ICcvbWVzc2FnZXMnO1xudmFyIG1lc3NhZ2VzID0gW1xuICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IF9wcmVmaXggKyAnL2NyZWF0ZScsXG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlcXVlc3QsIHJlcGx5KSB7XG4gICAgICAgICAgICBNZXNzYWdlc1NlcnZpY2UuY3JlYXRlTWVzc2FnZShcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQuc2VuZGVyX2lkLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5yZWNlaXZlcl9pZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQuc3ViamVjdCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQubWVzc2FnZSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXBseShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyX2lkOiBKb2kubnVtYmVyKCkuaW50ZWdlcigpLFxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlcl9pZDogSm9pLm51bWJlcigpLmludGVnZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogSm9pLnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBKb2kuc3RyaW5nKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDcmVhdGUgYSBuZXcgTWVzc2FnZScsXG4gICAgICAgICAgICB0YWdzOiBbJ21lc3NhZ2VzJ11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgcGF0aDogX3ByZWZpeCArICcvcmVzcG9uc2UnLFxuICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZXF1ZXN0LCByZXBseSkge1xuICAgICAgICAgICAgTWVzc2FnZXNTZXJ2aWNlLnJlc3BvbnNlTWVzc2FnZShcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnBheWxvYWQudGhyZWFkX2lkLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5zZW5kZXJfaWQsXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXlsb2FkLnJlY2VpdmVyX2lkLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5zdWJqZWN0LFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGF5bG9hZC5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICB0aHJlYWRfaWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcl9pZDogSm9pLm51bWJlcigpLmludGVnZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJfaWQ6IEpvaS5udW1iZXIoKS5pbnRlZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogSm9pLnN0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmVzcG9uc2UgYSBNZXNzYWdlJyxcbiAgICAgICAgICAgIHRhZ3M6IFsnbWVzc2FnZXMnXVxuICAgICAgICB9XG4gICAgfSxcbl1cblxubW9kdWxlLmV4cG9ydHMgPSBtZXNzYWdlcztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==