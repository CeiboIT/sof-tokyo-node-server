///<reference path='../typings/hapi/hapi.d.ts' />
'use strict';
var _this = this;
var hapi = require('hapi');
var routes = require("./routes");
this.server = new hapi.Server({
    cache: [{
        name: 'mongoCache',
        engine: require('catbox-mongodb'),
        uri: 'mongodb://softokyo:softokyo@ds019498.mlab.com:19498/',
        partition: 'heroku_pbrg0ccm'
    }]
});
var _host;
var lout_status = false;
if (process.env.NODE_ENV != 'development') {
    _host = '0.0.0.0';
}
else {
    _host = 'localhost';
}
this.server.connection({
    port: process.env.PORT || 9000,
    host: _host
});
for (var route in routes) {
    routes[route].path = '/api' + routes[route].path;
    this.server.route(routes[route]);
}
// Lout documentation to see all the API routes
this.server.register([require('vision'), require('inert'), {
    register: require('lout'),
    options: {
        endpoint: '/api'
    }
}], function () {
    lout_status = true;
});
// Start server
this.server.start(function () {
    if (lout_status == true)
        console.log('✓ lout: API Documentation generated at ' + _this.server.info.uri + '/api');
    console.log('✓ Hapi: Server started at ' + _this.server.info.uri);
});
module.exports = this.server;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQ0EsaURBRGlEO0FBQ2pELFlBQVksQ0FBQztBQUFiLGlCQXFEQTtBQW5EQSxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFPLE1BQU0sV0FBVyxVQUFVLENBQUMsQ0FBQztBQUVwQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxQixLQUFLLEVBQUUsQ0FBQztRQUNKLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDakMsR0FBRyxFQUFFLHNEQUFzRDtRQUMzRCxTQUFTLEVBQUUsaUJBQWlCO0tBRy9CLENBQUM7Q0FDTCxDQUFDLENBQUM7QUFFSCxJQUFJLEtBQUssQ0FBQztBQUNWLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztBQUV4QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLEtBQUssR0FBRyxTQUFTLENBQUM7QUFDdEIsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ0osS0FBSyxHQUFHLFdBQVcsQ0FBQztBQUN4QixDQUFDO0FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDbkIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUk7SUFDOUIsSUFBSSxFQUFFLEtBQUs7Q0FDZCxDQUFDLENBQUE7QUFHRixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUNwQyxDQUFDO0FBRUQsQUFDQSwrQ0FEK0M7QUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ3ZELFFBQVEsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3pCLE9BQU8sRUFBRTtRQUNMLFFBQVEsRUFBRSxNQUFNO0tBQ25CO0NBQ0osQ0FBQyxFQUFFO0lBQ0EsV0FBVyxHQUFHLElBQUksQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILEFBQ0EsZUFEZTtBQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2QsRUFBRSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQztRQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMseUNBQXlDLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBQ2hILE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy88cmVmZXJlbmNlIHBhdGg9Jy4uL3R5cGluZ3MvaGFwaS9oYXBpLmQudHMnIC8+XG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBoYXBpID0gcmVxdWlyZSgnaGFwaScpO1xuaW1wb3J0IHJvdXRlcyA9IHJlcXVpcmUoXCIuL3JvdXRlc1wiKTtcblxudGhpcy5zZXJ2ZXIgPSBuZXcgaGFwaS5TZXJ2ZXIoe1xuICAgIGNhY2hlOiBbe1xuICAgICAgICBuYW1lOiAnbW9uZ29DYWNoZScsXG4gICAgICAgIGVuZ2luZTogcmVxdWlyZSgnY2F0Ym94LW1vbmdvZGInKSxcbiAgICAgICAgdXJpOiAnbW9uZ29kYjovL3NvZnRva3lvOnNvZnRva3lvQGRzMDE5NDk4Lm1sYWIuY29tOjE5NDk4LycsXG4gICAgICAgIHBhcnRpdGlvbjogJ2hlcm9rdV9wYnJnMGNjbSdcbiAgICAgICAgLy8gZW5naW5lOiByZXF1aXJlKCdjYXRib3gtbWVtb3J5JyksXG4gICAgICAgIC8vIG1heEJ5dGVTaXplOiAnMjYyMTQ0MDAnXG4gICAgfV1cbn0pO1xuXG52YXIgX2hvc3Q7XG52YXIgbG91dF9zdGF0dXMgPSBmYWxzZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9ICdkZXZlbG9wbWVudCcpIHtcbiAgICBfaG9zdCA9ICcwLjAuMC4wJztcbn0gZWxzZSB7XG4gICAgX2hvc3QgPSAnbG9jYWxob3N0Jztcbn1cblxudGhpcy5zZXJ2ZXIuY29ubmVjdGlvbih7XG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCB8fCA5MDAwLFxuICAgIGhvc3Q6IF9ob3N0XG59KVxuXG4vLyBBZGQgYWxsIEFQSSByb3V0ZXNcbmZvciAodmFyIHJvdXRlIGluIHJvdXRlcykge1xuICAgIHJvdXRlc1tyb3V0ZV0ucGF0aCA9ICcvYXBpJyArIHJvdXRlc1tyb3V0ZV0ucGF0aDtcbiAgICB0aGlzLnNlcnZlci5yb3V0ZShyb3V0ZXNbcm91dGVdKVxufVxuXG4vLyBMb3V0IGRvY3VtZW50YXRpb24gdG8gc2VlIGFsbCB0aGUgQVBJIHJvdXRlc1xudGhpcy5zZXJ2ZXIucmVnaXN0ZXIoW3JlcXVpcmUoJ3Zpc2lvbicpLCByZXF1aXJlKCdpbmVydCcpLCB7XG4gICAgcmVnaXN0ZXI6IHJlcXVpcmUoJ2xvdXQnKSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGVuZHBvaW50OiAnL2FwaSdcbiAgICB9XG59XSwgZnVuY3Rpb24oKSB7XG4gICAgbG91dF9zdGF0dXMgPSB0cnVlO1xufSk7XG5cbi8vIFN0YXJ0IHNlcnZlclxudGhpcy5zZXJ2ZXIuc3RhcnQoKCkgPT4ge1xuICAgIGlmIChsb3V0X3N0YXR1cyA9PSB0cnVlKSBjb25zb2xlLmxvZygn4pyTIGxvdXQ6IEFQSSBEb2N1bWVudGF0aW9uIGdlbmVyYXRlZCBhdCAnICsgdGhpcy5zZXJ2ZXIuaW5mby51cmkgKyAnL2FwaScpO1xuICAgIGNvbnNvbGUubG9nKCfinJMgSGFwaTogU2VydmVyIHN0YXJ0ZWQgYXQgJyArIHRoaXMuc2VydmVyLmluZm8udXJpKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRoaXMuc2VydmVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9