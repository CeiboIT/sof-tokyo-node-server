///<reference path='../typings/hapi/hapi.d.ts' />
'use strict';
var _this = this;
var hapi = require("hapi");
var ProductsRoutes = require("./modules/products/products.routes");
var CategoriesRoutes = require("./modules/categories/categories.routes");
var TagsRoutes = require("./modules/tags/tags.routes");
var AuthorsRoutes = require("./modules/authors/authors.routes");
this.server = new hapi.Server();
var _host;
if (process.env.NODE_ENV != 'development') {
    _host = '0.0.0.0';
}
else {
    _host = 'localhost';
}
this.server.connection({
    port: process.env.PORT || 9000,
    host: _host
});
for (var route in ProductsRoutes) {
    ProductsRoutes[route].path = '/api' + ProductsRoutes[route].path;
    this.server.route(ProductsRoutes[route]);
}
for (var route in CategoriesRoutes) {
    CategoriesRoutes[route].path = '/api' + CategoriesRoutes[route].path;
    this.server.route(CategoriesRoutes[route]);
}
for (var route in TagsRoutes) {
    TagsRoutes[route].path = '/api' + TagsRoutes[route].path;
    this.server.route(TagsRoutes[route]);
}
for (var route in AuthorsRoutes) {
    AuthorsRoutes[route].path = '/api' + AuthorsRoutes[route].path;
    this.server.route(AuthorsRoutes[route]);
}
//help for see all the routes
this.server.route({
    method: 'GET',
    path: '/api',
    handler: function (request, reply) {
        var _table = _this.server.table();
        var _answer = {};
        _table.table.map(function (element) {
            console.log(element);
            _answer[element.fingerprint] = {
                path: element.path,
                method: element.method
            };
        });
        reply(_answer);
    }
});
//this.server.connection({ port: process.env.PORT ||3000 });
this.server.start(function () {
    console.log('Started: ' + _this.server.info.uri);
});

//# sourceMappingURL=data:application/json;base64,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RyxDQUFDLFVBQUMsT0FBTztZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQzNCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2FBQ3pCLENBQUE7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDO0NBQ0osQ0FBQyxDQUFBO0FBRUYsQUFDQSw0REFENEQ7QUFDNUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLzxyZWZlcmVuY2UgcGF0aD0nLi4vdHlwaW5ncy9oYXBpL2hhcGkuZC50cycgLz5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGhhcGkgPSByZXF1aXJlKFwiaGFwaVwiKTtcbmltcG9ydCBQcm9kdWN0c1JvdXRlcyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcHJvZHVjdHMvcHJvZHVjdHMucm91dGVzXCIpO1xuaW1wb3J0IENhdGVnb3JpZXNSb3V0ZXMgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2NhdGVnb3JpZXMvY2F0ZWdvcmllcy5yb3V0ZXNcIik7XG5pbXBvcnQgVGFnc1JvdXRlcyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvdGFncy90YWdzLnJvdXRlc1wiKTtcbmltcG9ydCBBdXRob3JzUm91dGVzID0gcmVxdWlyZShcIi4vbW9kdWxlcy9hdXRob3JzL2F1dGhvcnMucm91dGVzXCIpO1xuXG50aGlzLnNlcnZlciA9IG5ldyBoYXBpLlNlcnZlcigpO1xuXG52YXIgX2hvc3Q7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgX2hvc3QgPSAnMC4wLjAuMCc7XG59IGVsc2Uge1xuICAgIF9ob3N0ID0gJ2xvY2FsaG9zdCc7XG59XG5cblxuXG50aGlzLnNlcnZlci5jb25uZWN0aW9uKHtcbiAgICBwb3J0OiBwcm9jZXNzLmVudi5QT1JUIHx8IDkwMDAsXG4gICAgaG9zdDogX2hvc3Rcbn0pXG5cblxuLy8gYWRkIHByb2R1Y3RzIGFwaSByb3V0ZXNcbmZvciAodmFyIHJvdXRlIGluIFByb2R1Y3RzUm91dGVzKSB7XG4gICAgUHJvZHVjdHNSb3V0ZXNbcm91dGVdLnBhdGggPSAnL2FwaScgKyBQcm9kdWN0c1JvdXRlc1tyb3V0ZV0ucGF0aDtcbiAgICB0aGlzLnNlcnZlci5yb3V0ZShQcm9kdWN0c1JvdXRlc1tyb3V0ZV0pXG59XG5cbi8vIGFkZCBjYXRlZ29yaWVzIGFwaSByb3V0ZXNcbmZvciAodmFyIHJvdXRlIGluIENhdGVnb3JpZXNSb3V0ZXMpIHtcbiAgICBDYXRlZ29yaWVzUm91dGVzW3JvdXRlXS5wYXRoID0gJy9hcGknICsgQ2F0ZWdvcmllc1JvdXRlc1tyb3V0ZV0ucGF0aDtcbiAgICB0aGlzLnNlcnZlci5yb3V0ZShDYXRlZ29yaWVzUm91dGVzW3JvdXRlXSlcbn1cblxuLy8gYWRkIHRhZ3MgYXBpIHJvdXRlc1xuZm9yICh2YXIgcm91dGUgaW4gVGFnc1JvdXRlcykge1xuICAgIFRhZ3NSb3V0ZXNbcm91dGVdLnBhdGggPSAnL2FwaScgKyBUYWdzUm91dGVzW3JvdXRlXS5wYXRoO1xuICAgIHRoaXMuc2VydmVyLnJvdXRlKFRhZ3NSb3V0ZXNbcm91dGVdKVxufVxuXG4vLyBhZGQgYXV0aG9ycyBhcGkgcm91dGVzXG5mb3IgKHZhciByb3V0ZSBpbiBBdXRob3JzUm91dGVzKSB7XG4gICAgQXV0aG9yc1JvdXRlc1tyb3V0ZV0ucGF0aCA9ICcvYXBpJyArIEF1dGhvcnNSb3V0ZXNbcm91dGVdLnBhdGg7XG4gICAgdGhpcy5zZXJ2ZXIucm91dGUoQXV0aG9yc1JvdXRlc1tyb3V0ZV0pXG59XG5cblxuXG4vL2hlbHAgZm9yIHNlZSBhbGwgdGhlIHJvdXRlc1xudGhpcy5zZXJ2ZXIucm91dGUoe1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGknLFxuICAgIGhhbmRsZXI6IChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgICAgICB2YXIgX3RhYmxlID0gdGhpcy5zZXJ2ZXIudGFibGUoKTtcblxuICAgICAgICB2YXIgX2Fuc3dlciA9IHt9O1xuICAgICAgICBfdGFibGUudGFibGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50KTtcbiAgICAgICAgICAgIF9hbnN3ZXJbZWxlbWVudC5maW5nZXJwcmludF0gPSB7XG4gICAgICAgICAgICAgICAgcGF0aDogZWxlbWVudC5wYXRoLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogZWxlbWVudC5tZXRob2RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmVwbHkoX2Fuc3dlcik7XG4gICAgfVxufSlcblxuLy90aGlzLnNlcnZlci5jb25uZWN0aW9uKHsgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCB8fDMwMDAgfSk7XG50aGlzLnNlcnZlci5zdGFydCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1N0YXJ0ZWQ6ICcgKyB0aGlzLnNlcnZlci5pbmZvLnVyaSk7XG59KVxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=