///<reference path='../typings/hapi/hapi.d.ts' />
'use strict';
var _this = this;
var hapi = require("hapi");
var ProductsRoutes = require("./modules/products/products.routes");
var _server = new hapi.Server();
this.server = new hapi.Server();
if (process.env.NODE_ENV != 'development') {
    this.server._host = '0.0.0.0';
}
else {
    this.server._host = 'localhost';
}
this.server._port = process.env.PORT || 9000;
for (var route in ProductsRoutes) {
    ProductsRoutes[route].path = '/api' + ProductsRoutes[route].path;
    this.server.route(ProductsRoutes[route]);
}
//help for see all the routes
this.server.route({
    method: 'GET',
    path: '/api',
    handler: function (request, reply) {
        var _table = _this.server.table();
        var _answer = {};
        _table.map(function (element) {
            _answer[element.fingerprint] = {
                path: element.path,
                method: element.method
            };
        });
        reply(_answer);
    }
});
//this.server.connection({ port: process.env.PORT ||3000 });
this.server.start(function () {
    console.log('Started: ' + _this.server.info.uri);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQ0EsaURBRGlEO0FBQ2pELFlBQVksQ0FBQztBQUFiLGlCQTZDQTtBQTNDQSxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFPLGNBQWMsV0FBVyxvQ0FBb0MsQ0FBQyxDQUFDO0FBRXRFLElBQUksT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBRS9CLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEMsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7QUFDL0IsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUMsV0FBVyxDQUFDO0FBQy9CLENBQUM7QUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBRSxJQUFJLENBQUM7QUFHM0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekMsQ0FBQztBQUVELEFBQ0EsNkJBRDZCO0FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLE1BQU0sRUFBRSxLQUFLO0lBQ2IsSUFBSSxFQUFFLE1BQU07SUFDWixPQUFPLEVBQUUsVUFBQyxPQUFPLEVBQUUsS0FBSztRQUN0QixJQUFJLE1BQU0sR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNWLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQ3RDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2FBQ3ZCLENBQUE7UUFDSSxDQUFDLENBQUMsQ0FBQTtRQUNGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0QsQ0FBQyxDQUFBO0FBRUYsQUFDQSw0REFENEQ7QUFDNUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy88cmVmZXJlbmNlIHBhdGg9Jy4uL3R5cGluZ3MvaGFwaS9oYXBpLmQudHMnIC8+XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBoYXBpID0gcmVxdWlyZShcImhhcGlcIik7XHJcbmltcG9ydCBQcm9kdWN0c1JvdXRlcyA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcHJvZHVjdHMvcHJvZHVjdHMucm91dGVzXCIpO1xyXG5cclxudmFyIF9zZXJ2ZXIgPSBuZXcgaGFwaS5TZXJ2ZXIoKVxyXG5cclxudGhpcy5zZXJ2ZXIgPSBuZXcgaGFwaS5TZXJ2ZXIoKTtcclxuXHJcbmlmKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9ICdkZXZlbG9wbWVudCcpIHtcclxuXHR0aGlzLnNlcnZlci5faG9zdCA9ICcwLjAuMC4wJztcclxufSBlbHNlIHtcclxuXHR0aGlzLnNlcnZlci5faG9zdD0nbG9jYWxob3N0JztcclxufVxyXG5cclxudGhpcy5zZXJ2ZXIuX3BvcnQgPSBwcm9jZXNzLmVudi5QT1JUfHw5MDAwO1xyXG5cclxuLy8gYWRkIHByb2R1Y3RzIGFwaSByb3V0ZXNcclxuZm9yICh2YXIgcm91dGUgaW4gUHJvZHVjdHNSb3V0ZXMpIHtcclxuXHRQcm9kdWN0c1JvdXRlc1tyb3V0ZV0ucGF0aCA9ICcvYXBpJyArIFByb2R1Y3RzUm91dGVzW3JvdXRlXS5wYXRoO1xyXG5cdHRoaXMuc2VydmVyLnJvdXRlKFByb2R1Y3RzUm91dGVzW3JvdXRlXSlcclxufVxyXG5cclxuLy9oZWxwIGZvciBzZWUgYWxsIHRoZSByb3V0ZXNcclxudGhpcy5zZXJ2ZXIucm91dGUoe1xyXG5cdG1ldGhvZDogJ0dFVCcsXHJcblx0cGF0aDogJy9hcGknLFxyXG5cdGhhbmRsZXI6IChyZXF1ZXN0LCByZXBseSkgPT4ge1xyXG5cdFx0IHZhciBfdGFibGUgPSB0aGlzLnNlcnZlci50YWJsZSgpO1xyXG5cdFx0IHZhciBfYW5zd2VyID0ge307XHJcbiAgICAgICAgICBfdGFibGUubWFwKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIF9hbnN3ZXJbZWxlbWVudC5maW5nZXJwcmludF0gPSB7XHJcblx0XHRcdFx0IHBhdGg6IGVsZW1lbnQucGF0aCxcclxuXHRcdFx0XHQgbWV0aG9kOiBlbGVtZW50Lm1ldGhvZFxyXG5cdFx0XHR9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXBseShfYW5zd2VyKTtcclxuXHR9XHJcbn0pXHJcblxyXG4vL3RoaXMuc2VydmVyLmNvbm5lY3Rpb24oeyBwb3J0OiBwcm9jZXNzLmVudi5QT1JUIHx8MzAwMCB9KTtcclxudGhpcy5zZXJ2ZXIuc3RhcnQoKCkgPT4ge1xyXG5cdGNvbnNvbGUubG9nKCdTdGFydGVkOiAnICsgdGhpcy5zZXJ2ZXIuaW5mby51cmkpO1xyXG59KVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9